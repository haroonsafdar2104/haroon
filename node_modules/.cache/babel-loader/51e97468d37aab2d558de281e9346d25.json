{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Subject } from './Subject';\n\nvar AsyncSubject = function (_super) {\n  __extends(AsyncSubject, _super);\n\n  function AsyncSubject() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._value = null;\n    _this._hasValue = false;\n    _this._isComplete = false;\n    return _this;\n  }\n\n  AsyncSubject.prototype._checkFinalizedStatuses = function (subscriber) {\n    var _a = this,\n        hasError = _a.hasError,\n        _hasValue = _a._hasValue,\n        _value = _a._value,\n        thrownError = _a.thrownError,\n        isStopped = _a.isStopped,\n        _isComplete = _a._isComplete;\n\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped || _isComplete) {\n      _hasValue && subscriber.next(_value);\n      subscriber.complete();\n    }\n  };\n\n  AsyncSubject.prototype.next = function (value) {\n    if (!this.isStopped) {\n      this._value = value;\n      this._hasValue = true;\n    }\n  };\n\n  AsyncSubject.prototype.complete = function () {\n    var _a = this,\n        _hasValue = _a._hasValue,\n        _value = _a._value,\n        _isComplete = _a._isComplete;\n\n    if (!_isComplete) {\n      this._isComplete = true;\n      _hasValue && _super.prototype.next.call(this, _value);\n\n      _super.prototype.complete.call(this);\n    }\n  };\n\n  return AsyncSubject;\n}(Subject);\n\nexport { AsyncSubject };","map":{"version":3,"mappings":";AAAA,SAASA,OAAT,QAAwB,WAAxB;;AASA;AAAqCC;;AAArC;AAAA;;AACUC,mBAAmB,IAAnB;AACAA,sBAAY,KAAZ;AACAA,wBAAc,KAAd;;AA4BT;;AAzBWC,mDAAV,UAAkCC,UAAlC,EAA2D;AACnD,aAAuE,IAAvE;AAAA,QAAEC,QAAQ,cAAV;AAAA,QAAYC,SAAS,eAArB;AAAA,QAAuBC,MAAM,YAA7B;AAAA,QAA+BC,WAAW,iBAA1C;AAAA,QAA4CC,SAAS,eAArD;AAAA,QAAuDC,WAAW,iBAAlE;;AACN,QAAIL,QAAJ,EAAc;AACZD,gBAAU,CAACO,KAAX,CAAiBH,WAAjB;AACD,KAFD,MAEO,IAAIC,SAAS,IAAIC,WAAjB,EAA8B;AACnCJ,eAAS,IAAIF,UAAU,CAACQ,IAAX,CAAgBL,MAAhB,CAAb;AACAH,gBAAU,CAACS,QAAX;AACD;AACF,GARS;;AAUVV,0CAAKW,KAAL,EAAa;AACX,QAAI,CAAC,KAAKL,SAAV,EAAqB;AACnB,WAAKF,MAAL,GAAcO,KAAd;AACA,WAAKR,SAAL,GAAiB,IAAjB;AACD;AACF,GALD;;AAOAH;AACQ,aAAqC,IAArC;AAAA,QAAEG,SAAS,eAAX;AAAA,QAAaC,MAAM,YAAnB;AAAA,QAAqBG,WAAW,iBAAhC;;AACN,QAAI,CAACA,WAAL,EAAkB;AAChB,WAAKA,WAAL,GAAmB,IAAnB;AACAJ,eAAS,IAAIS,iBAAMH,IAAN,CAAUI,IAAV,CAAU,IAAV,EAAWT,MAAX,CAAb;;AACAQ,uBAAMF,QAAN,CAAcG,IAAd,CAAc,IAAd;AACD;AACF,GAPD;;AAQF;AA/BA,EAAqChB,OAArC","names":["Subject","__extends","_this","AsyncSubject","subscriber","hasError","_hasValue","_value","thrownError","isStopped","_isComplete","error","next","complete","value","_super","call"],"sources":["D:\\Web Data\\Personal-Website\\client\\node_modules\\rxjs\\src\\internal\\AsyncSubject.ts"],"sourcesContent":["import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\n\n/**\n * A variant of Subject that only emits a value when it completes. It will emit\n * its latest value to all its observers on completion.\n *\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private _value: T | null = null;\n  private _hasValue = false;\n  private _isComplete = false;\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<T>) {\n    const { hasError, _hasValue, _value, thrownError, isStopped, _isComplete } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped || _isComplete) {\n      _hasValue && subscriber.next(_value!);\n      subscriber.complete();\n    }\n  }\n\n  next(value: T): void {\n    if (!this.isStopped) {\n      this._value = value;\n      this._hasValue = true;\n    }\n  }\n\n  complete(): void {\n    const { _hasValue, _value, _isComplete } = this;\n    if (!_isComplete) {\n      this._isComplete = true;\n      _hasValue && super.next(_value!);\n      super.complete();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}