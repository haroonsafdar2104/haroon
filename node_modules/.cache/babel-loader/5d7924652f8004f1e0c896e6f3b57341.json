{"ast":null,"code":"import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { PanSession } from './PanSession.mjs';\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @privateRemarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */\n\nfunction usePanGesture(_ref) {\n  let {\n    onPan,\n    onPanStart,\n    onPanEnd,\n    onPanSessionStart,\n    visualElement\n  } = _ref;\n  const hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n  const panSession = useRef(null);\n  const {\n    transformPagePoint\n  } = useContext(MotionConfigContext);\n  const handlers = {\n    onSessionStart: onPanSessionStart,\n    onStart: onPanStart,\n    onMove: onPan,\n    onEnd: (event, info) => {\n      panSession.current = null;\n      onPanEnd && onPanEnd(event, info);\n    }\n  };\n  useEffect(() => {\n    if (panSession.current !== null) {\n      panSession.current.updateHandlers(handlers);\n    }\n  });\n\n  function onPointerDown(event) {\n    panSession.current = new PanSession(event, handlers, {\n      transformPagePoint\n    });\n  }\n\n  usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n  useUnmountEffect(() => panSession.current && panSession.current.end());\n}\n\nexport { usePanGesture };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/gestures/use-pan-gesture.mjs"],"names":["useRef","useContext","useEffect","MotionConfigContext","useUnmountEffect","usePointerEvent","PanSession","usePanGesture","onPan","onPanStart","onPanEnd","onPanSessionStart","visualElement","hasPanEvents","panSession","transformPagePoint","handlers","onSessionStart","onStart","onMove","onEnd","event","info","current","updateHandlers","onPointerDown","end"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,UAAjB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,eAAT,QAAgC,iCAAhC;AACA,SAASC,UAAT,QAA2B,kBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,OAA2F;AAAA,MAApE;AAAEC,IAAAA,KAAF;AAASC,IAAAA,UAAT;AAAqBC,IAAAA,QAArB;AAA+BC,IAAAA,iBAA/B;AAAkDC,IAAAA;AAAlD,GAAoE;AACvF,QAAMC,YAAY,GAAGL,KAAK,IAAIC,UAAT,IAAuBC,QAAvB,IAAmCC,iBAAxD;AACA,QAAMG,UAAU,GAAGd,MAAM,CAAC,IAAD,CAAzB;AACA,QAAM;AAAEe,IAAAA;AAAF,MAAyBd,UAAU,CAACE,mBAAD,CAAzC;AACA,QAAMa,QAAQ,GAAG;AACbC,IAAAA,cAAc,EAAEN,iBADH;AAEbO,IAAAA,OAAO,EAAET,UAFI;AAGbU,IAAAA,MAAM,EAAEX,KAHK;AAIbY,IAAAA,KAAK,EAAE,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACpBR,MAAAA,UAAU,CAACS,OAAX,GAAqB,IAArB;AACAb,MAAAA,QAAQ,IAAIA,QAAQ,CAACW,KAAD,EAAQC,IAAR,CAApB;AACH;AAPY,GAAjB;AASApB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIY,UAAU,CAACS,OAAX,KAAuB,IAA3B,EAAiC;AAC7BT,MAAAA,UAAU,CAACS,OAAX,CAAmBC,cAAnB,CAAkCR,QAAlC;AACH;AACJ,GAJQ,CAAT;;AAKA,WAASS,aAAT,CAAuBJ,KAAvB,EAA8B;AAC1BP,IAAAA,UAAU,CAACS,OAAX,GAAqB,IAAIjB,UAAJ,CAAee,KAAf,EAAsBL,QAAtB,EAAgC;AACjDD,MAAAA;AADiD,KAAhC,CAArB;AAGH;;AACDV,EAAAA,eAAe,CAACO,aAAD,EAAgB,aAAhB,EAA+BC,YAAY,IAAIY,aAA/C,CAAf;AACArB,EAAAA,gBAAgB,CAAC,MAAMU,UAAU,CAACS,OAAX,IAAsBT,UAAU,CAACS,OAAX,CAAmBG,GAAnB,EAA7B,CAAhB;AACH;;AAED,SAASnB,aAAT","sourcesContent":["import { useRef, useContext, useEffect } from 'react';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useUnmountEffect } from '../utils/use-unmount-effect.mjs';\nimport { usePointerEvent } from '../events/use-pointer-event.mjs';\nimport { PanSession } from './PanSession.mjs';\n\n/**\n *\n * @param handlers -\n * @param ref -\n *\n * @privateRemarks\n * Currently this sets new pan gesture functions every render. The memo route has been explored\n * in the past but ultimately we're still creating new functions every render. An optimisation\n * to explore is creating the pan gestures and loading them into a `ref`.\n *\n * @internal\n */\nfunction usePanGesture({ onPan, onPanStart, onPanEnd, onPanSessionStart, visualElement, }) {\n    const hasPanEvents = onPan || onPanStart || onPanEnd || onPanSessionStart;\n    const panSession = useRef(null);\n    const { transformPagePoint } = useContext(MotionConfigContext);\n    const handlers = {\n        onSessionStart: onPanSessionStart,\n        onStart: onPanStart,\n        onMove: onPan,\n        onEnd: (event, info) => {\n            panSession.current = null;\n            onPanEnd && onPanEnd(event, info);\n        },\n    };\n    useEffect(() => {\n        if (panSession.current !== null) {\n            panSession.current.updateHandlers(handlers);\n        }\n    });\n    function onPointerDown(event) {\n        panSession.current = new PanSession(event, handlers, {\n            transformPagePoint,\n        });\n    }\n    usePointerEvent(visualElement, \"pointerdown\", hasPanEvents && onPointerDown);\n    useUnmountEffect(() => panSession.current && panSession.current.end());\n}\n\nexport { usePanGesture };\n"]},"metadata":{},"sourceType":"module"}