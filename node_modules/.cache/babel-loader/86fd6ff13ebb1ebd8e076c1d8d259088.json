{"ast":null,"code":"import sync, { getFrameData } from 'framesync';\nimport { velocityPerSecond } from 'popmotion';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\n\nconst isFloat = value => {\n  return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\n\n\nclass MotionValue {\n  /**\n   * @param init - The initiating value\n   * @param config - Optional configuration options\n   *\n   * -  `transformer`: A function to transform incoming values with.\n   *\n   * @internal\n   */\n  constructor(init) {\n    var _this = this;\n\n    /**\n     * This will be replaced by the build step with the latest version number.\n     * When MotionValues are provided to motion components, warn if versions are mixed.\n     */\n    this.version = \"7.2.1\";\n    /**\n     * Duration, in milliseconds, since last updating frame.\n     *\n     * @internal\n     */\n\n    this.timeDelta = 0;\n    /**\n     * Timestamp of the last time this `MotionValue` was updated.\n     *\n     * @internal\n     */\n\n    this.lastUpdated = 0;\n    /**\n     * Functions to notify when the `MotionValue` updates.\n     *\n     * @internal\n     */\n\n    this.updateSubscribers = new SubscriptionManager();\n    /**\n     * Functions to notify when the velocity updates.\n     *\n     * @internal\n     */\n\n    this.velocityUpdateSubscribers = new SubscriptionManager();\n    /**\n     * Functions to notify when the `MotionValue` updates and `render` is set to `true`.\n     *\n     * @internal\n     */\n\n    this.renderSubscribers = new SubscriptionManager();\n    /**\n     * Tracks whether this value can output a velocity. Currently this is only true\n     * if the value is numerical, but we might be able to widen the scope here and support\n     * other value types.\n     *\n     * @internal\n     */\n\n    this.canTrackVelocity = false;\n\n    this.updateAndNotify = function (v) {\n      let render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      _this.prev = _this.current;\n      _this.current = v; // Update timestamp\n\n      const {\n        delta,\n        timestamp\n      } = getFrameData();\n\n      if (_this.lastUpdated !== timestamp) {\n        _this.timeDelta = delta;\n        _this.lastUpdated = timestamp;\n        sync.postRender(_this.scheduleVelocityCheck);\n      } // Update update subscribers\n\n\n      if (_this.prev !== _this.current) {\n        _this.updateSubscribers.notify(_this.current);\n      } // Update velocity subscribers\n\n\n      if (_this.velocityUpdateSubscribers.getSize()) {\n        _this.velocityUpdateSubscribers.notify(_this.getVelocity());\n      } // Update render subscribers\n\n\n      if (render) {\n        _this.renderSubscribers.notify(_this.current);\n      }\n    };\n    /**\n     * Schedule a velocity check for the next frame.\n     *\n     * This is an instanced and bound function to prevent generating a new\n     * function once per frame.\n     *\n     * @internal\n     */\n\n\n    this.scheduleVelocityCheck = () => sync.postRender(this.velocityCheck);\n    /**\n     * Updates `prev` with `current` if the value hasn't been updated this frame.\n     * This ensures velocity calculations return `0`.\n     *\n     * This is an instanced and bound function to prevent generating a new\n     * function once per frame.\n     *\n     * @internal\n     */\n\n\n    this.velocityCheck = _ref => {\n      let {\n        timestamp\n      } = _ref;\n\n      if (timestamp !== this.lastUpdated) {\n        this.prev = this.current;\n        this.velocityUpdateSubscribers.notify(this.getVelocity());\n      }\n    };\n\n    this.hasAnimated = false;\n    this.prev = this.current = init;\n    this.canTrackVelocity = isFloat(this.current);\n  }\n  /**\n   * Adds a function that will be notified when the `MotionValue` is updated.\n   *\n   * It returns a function that, when called, will cancel the subscription.\n   *\n   * When calling `onChange` inside a React component, it should be wrapped with the\n   * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n   * from the `useEffect` function to ensure you don't add duplicate subscribers..\n   *\n   * ```jsx\n   * export const MyComponent = () => {\n   *   const x = useMotionValue(0)\n   *   const y = useMotionValue(0)\n   *   const opacity = useMotionValue(1)\n   *\n   *   useEffect(() => {\n   *     function updateOpacity() {\n   *       const maxXY = Math.max(x.get(), y.get())\n   *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n   *       opacity.set(newOpacity)\n   *     }\n   *\n   *     const unsubscribeX = x.onChange(updateOpacity)\n   *     const unsubscribeY = y.onChange(updateOpacity)\n   *\n   *     return () => {\n   *       unsubscribeX()\n   *       unsubscribeY()\n   *     }\n   *   }, [])\n   *\n   *   return <motion.div style={{ x }} />\n   * }\n   * ```\n   *\n   * @privateRemarks\n   *\n   * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\n   *\n   * ```jsx\n   * useOnChange(x, () => {})\n   * ```\n   *\n   * @param subscriber - A function that receives the latest value.\n   * @returns A function that, when called, will cancel this subscription.\n   *\n   * @public\n   */\n\n\n  onChange(subscription) {\n    return this.updateSubscribers.add(subscription);\n  }\n\n  clearListeners() {\n    this.updateSubscribers.clear();\n  }\n  /**\n   * Adds a function that will be notified when the `MotionValue` requests a render.\n   *\n   * @param subscriber - A function that's provided the latest value.\n   * @returns A function that, when called, will cancel this subscription.\n   *\n   * @internal\n   */\n\n\n  onRenderRequest(subscription) {\n    // Render immediately\n    subscription(this.get());\n    return this.renderSubscribers.add(subscription);\n  }\n  /**\n   * Attaches a passive effect to the `MotionValue`.\n   *\n   * @internal\n   */\n\n\n  attach(passiveEffect) {\n    this.passiveEffect = passiveEffect;\n  }\n  /**\n   * Sets the state of the `MotionValue`.\n   *\n   * @remarks\n   *\n   * ```jsx\n   * const x = useMotionValue(0)\n   * x.set(10)\n   * ```\n   *\n   * @param latest - Latest value to set.\n   * @param render - Whether to notify render subscribers. Defaults to `true`\n   *\n   * @public\n   */\n\n\n  set(v) {\n    let render = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (!render || !this.passiveEffect) {\n      this.updateAndNotify(v, render);\n    } else {\n      this.passiveEffect(v, this.updateAndNotify);\n    }\n  }\n  /**\n   * Returns the latest state of `MotionValue`\n   *\n   * @returns - The latest state of `MotionValue`\n   *\n   * @public\n   */\n\n\n  get() {\n    return this.current;\n  }\n  /**\n   * @public\n   */\n\n\n  getPrevious() {\n    return this.prev;\n  }\n  /**\n   * Returns the latest velocity of `MotionValue`\n   *\n   * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n   *\n   * @public\n   */\n\n\n  getVelocity() {\n    // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n    return this.canTrackVelocity ? // These casts could be avoided if parseFloat would be typed better\n    velocityPerSecond(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;\n  }\n  /**\n   * Registers a new animation to control this `MotionValue`. Only one\n   * animation can drive a `MotionValue` at one time.\n   *\n   * ```jsx\n   * value.start()\n   * ```\n   *\n   * @param animation - A function that starts the provided animation\n   *\n   * @internal\n   */\n\n\n  start(animation) {\n    this.stop();\n    return new Promise(resolve => {\n      this.hasAnimated = true;\n      this.stopAnimation = animation(resolve);\n    }).then(() => this.clearAnimation());\n  }\n  /**\n   * Stop the currently active animation.\n   *\n   * @public\n   */\n\n\n  stop() {\n    if (this.stopAnimation) this.stopAnimation();\n    this.clearAnimation();\n  }\n  /**\n   * Returns `true` if this value is currently animating.\n   *\n   * @public\n   */\n\n\n  isAnimating() {\n    return !!this.stopAnimation;\n  }\n\n  clearAnimation() {\n    this.stopAnimation = null;\n  }\n  /**\n   * Destroy and clean up subscribers to this `MotionValue`.\n   *\n   * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n   * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n   * created a `MotionValue` via the `motionValue` function.\n   *\n   * @public\n   */\n\n\n  destroy() {\n    this.updateSubscribers.clear();\n    this.renderSubscribers.clear();\n    this.stop();\n  }\n\n}\n\nfunction motionValue(init) {\n  return new MotionValue(init);\n}\n\nexport { MotionValue, motionValue };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/value/index.mjs"],"names":["sync","getFrameData","velocityPerSecond","SubscriptionManager","isFloat","value","isNaN","parseFloat","MotionValue","constructor","init","version","timeDelta","lastUpdated","updateSubscribers","velocityUpdateSubscribers","renderSubscribers","canTrackVelocity","updateAndNotify","v","render","prev","current","delta","timestamp","postRender","scheduleVelocityCheck","notify","getSize","getVelocity","velocityCheck","hasAnimated","onChange","subscription","add","clearListeners","clear","onRenderRequest","get","attach","passiveEffect","set","getPrevious","start","animation","stop","Promise","resolve","stopAnimation","then","clearAnimation","isAnimating","destroy","motionValue"],"mappings":"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","sourcesContent":["import sync, { getFrameData } from 'framesync';\nimport { velocityPerSecond } from 'popmotion';\nimport { SubscriptionManager } from '../utils/subscription-manager.mjs';\n\nconst isFloat = (value) => {\n    return !isNaN(parseFloat(value));\n};\n/**\n * `MotionValue` is used to track the state and velocity of motion values.\n *\n * @public\n */\nclass MotionValue {\n    /**\n     * @param init - The initiating value\n     * @param config - Optional configuration options\n     *\n     * -  `transformer`: A function to transform incoming values with.\n     *\n     * @internal\n     */\n    constructor(init) {\n        /**\n         * This will be replaced by the build step with the latest version number.\n         * When MotionValues are provided to motion components, warn if versions are mixed.\n         */\n        this.version = \"7.2.1\";\n        /**\n         * Duration, in milliseconds, since last updating frame.\n         *\n         * @internal\n         */\n        this.timeDelta = 0;\n        /**\n         * Timestamp of the last time this `MotionValue` was updated.\n         *\n         * @internal\n         */\n        this.lastUpdated = 0;\n        /**\n         * Functions to notify when the `MotionValue` updates.\n         *\n         * @internal\n         */\n        this.updateSubscribers = new SubscriptionManager();\n        /**\n         * Functions to notify when the velocity updates.\n         *\n         * @internal\n         */\n        this.velocityUpdateSubscribers = new SubscriptionManager();\n        /**\n         * Functions to notify when the `MotionValue` updates and `render` is set to `true`.\n         *\n         * @internal\n         */\n        this.renderSubscribers = new SubscriptionManager();\n        /**\n         * Tracks whether this value can output a velocity. Currently this is only true\n         * if the value is numerical, but we might be able to widen the scope here and support\n         * other value types.\n         *\n         * @internal\n         */\n        this.canTrackVelocity = false;\n        this.updateAndNotify = (v, render = true) => {\n            this.prev = this.current;\n            this.current = v;\n            // Update timestamp\n            const { delta, timestamp } = getFrameData();\n            if (this.lastUpdated !== timestamp) {\n                this.timeDelta = delta;\n                this.lastUpdated = timestamp;\n                sync.postRender(this.scheduleVelocityCheck);\n            }\n            // Update update subscribers\n            if (this.prev !== this.current) {\n                this.updateSubscribers.notify(this.current);\n            }\n            // Update velocity subscribers\n            if (this.velocityUpdateSubscribers.getSize()) {\n                this.velocityUpdateSubscribers.notify(this.getVelocity());\n            }\n            // Update render subscribers\n            if (render) {\n                this.renderSubscribers.notify(this.current);\n            }\n        };\n        /**\n         * Schedule a velocity check for the next frame.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.scheduleVelocityCheck = () => sync.postRender(this.velocityCheck);\n        /**\n         * Updates `prev` with `current` if the value hasn't been updated this frame.\n         * This ensures velocity calculations return `0`.\n         *\n         * This is an instanced and bound function to prevent generating a new\n         * function once per frame.\n         *\n         * @internal\n         */\n        this.velocityCheck = ({ timestamp }) => {\n            if (timestamp !== this.lastUpdated) {\n                this.prev = this.current;\n                this.velocityUpdateSubscribers.notify(this.getVelocity());\n            }\n        };\n        this.hasAnimated = false;\n        this.prev = this.current = init;\n        this.canTrackVelocity = isFloat(this.current);\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` is updated.\n     *\n     * It returns a function that, when called, will cancel the subscription.\n     *\n     * When calling `onChange` inside a React component, it should be wrapped with the\n     * `useEffect` hook. As it returns an unsubscribe function, this should be returned\n     * from the `useEffect` function to ensure you don't add duplicate subscribers..\n     *\n     * ```jsx\n     * export const MyComponent = () => {\n     *   const x = useMotionValue(0)\n     *   const y = useMotionValue(0)\n     *   const opacity = useMotionValue(1)\n     *\n     *   useEffect(() => {\n     *     function updateOpacity() {\n     *       const maxXY = Math.max(x.get(), y.get())\n     *       const newOpacity = transform(maxXY, [0, 100], [1, 0])\n     *       opacity.set(newOpacity)\n     *     }\n     *\n     *     const unsubscribeX = x.onChange(updateOpacity)\n     *     const unsubscribeY = y.onChange(updateOpacity)\n     *\n     *     return () => {\n     *       unsubscribeX()\n     *       unsubscribeY()\n     *     }\n     *   }, [])\n     *\n     *   return <motion.div style={{ x }} />\n     * }\n     * ```\n     *\n     * @privateRemarks\n     *\n     * We could look into a `useOnChange` hook if the above lifecycle management proves confusing.\n     *\n     * ```jsx\n     * useOnChange(x, () => {})\n     * ```\n     *\n     * @param subscriber - A function that receives the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @public\n     */\n    onChange(subscription) {\n        return this.updateSubscribers.add(subscription);\n    }\n    clearListeners() {\n        this.updateSubscribers.clear();\n    }\n    /**\n     * Adds a function that will be notified when the `MotionValue` requests a render.\n     *\n     * @param subscriber - A function that's provided the latest value.\n     * @returns A function that, when called, will cancel this subscription.\n     *\n     * @internal\n     */\n    onRenderRequest(subscription) {\n        // Render immediately\n        subscription(this.get());\n        return this.renderSubscribers.add(subscription);\n    }\n    /**\n     * Attaches a passive effect to the `MotionValue`.\n     *\n     * @internal\n     */\n    attach(passiveEffect) {\n        this.passiveEffect = passiveEffect;\n    }\n    /**\n     * Sets the state of the `MotionValue`.\n     *\n     * @remarks\n     *\n     * ```jsx\n     * const x = useMotionValue(0)\n     * x.set(10)\n     * ```\n     *\n     * @param latest - Latest value to set.\n     * @param render - Whether to notify render subscribers. Defaults to `true`\n     *\n     * @public\n     */\n    set(v, render = true) {\n        if (!render || !this.passiveEffect) {\n            this.updateAndNotify(v, render);\n        }\n        else {\n            this.passiveEffect(v, this.updateAndNotify);\n        }\n    }\n    /**\n     * Returns the latest state of `MotionValue`\n     *\n     * @returns - The latest state of `MotionValue`\n     *\n     * @public\n     */\n    get() {\n        return this.current;\n    }\n    /**\n     * @public\n     */\n    getPrevious() {\n        return this.prev;\n    }\n    /**\n     * Returns the latest velocity of `MotionValue`\n     *\n     * @returns - The latest velocity of `MotionValue`. Returns `0` if the state is non-numerical.\n     *\n     * @public\n     */\n    getVelocity() {\n        // This could be isFloat(this.prev) && isFloat(this.current), but that would be wasteful\n        return this.canTrackVelocity\n            ? // These casts could be avoided if parseFloat would be typed better\n                velocityPerSecond(parseFloat(this.current) -\n                    parseFloat(this.prev), this.timeDelta)\n            : 0;\n    }\n    /**\n     * Registers a new animation to control this `MotionValue`. Only one\n     * animation can drive a `MotionValue` at one time.\n     *\n     * ```jsx\n     * value.start()\n     * ```\n     *\n     * @param animation - A function that starts the provided animation\n     *\n     * @internal\n     */\n    start(animation) {\n        this.stop();\n        return new Promise((resolve) => {\n            this.hasAnimated = true;\n            this.stopAnimation = animation(resolve);\n        }).then(() => this.clearAnimation());\n    }\n    /**\n     * Stop the currently active animation.\n     *\n     * @public\n     */\n    stop() {\n        if (this.stopAnimation)\n            this.stopAnimation();\n        this.clearAnimation();\n    }\n    /**\n     * Returns `true` if this value is currently animating.\n     *\n     * @public\n     */\n    isAnimating() {\n        return !!this.stopAnimation;\n    }\n    clearAnimation() {\n        this.stopAnimation = null;\n    }\n    /**\n     * Destroy and clean up subscribers to this `MotionValue`.\n     *\n     * The `MotionValue` hooks like `useMotionValue` and `useTransform` automatically\n     * handle the lifecycle of the returned `MotionValue`, so this method is only necessary if you've manually\n     * created a `MotionValue` via the `motionValue` function.\n     *\n     * @public\n     */\n    destroy() {\n        this.updateSubscribers.clear();\n        this.renderSubscribers.clear();\n        this.stop();\n    }\n}\nfunction motionValue(init) {\n    return new MotionValue(init);\n}\n\nexport { MotionValue, motionValue };\n"]},"metadata":{},"sourceType":"module"}