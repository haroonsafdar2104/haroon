{"ast":null,"code":"import { now } from '../../shared/utils.js';\nexport default function freeMode(_ref) {\n  var swiper = _ref.swiper,\n      extendParams = _ref.extendParams,\n      emit = _ref.emit,\n      once = _ref.once;\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n\n  function onTouchStart() {\n    var translate = swiper.getTranslate();\n    swiper.setTranslate(translate);\n    swiper.setTransition(0);\n    swiper.touchEventsData.velocities.length = 0;\n    swiper.freeMode.onTouchEnd({\n      currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n    });\n  }\n\n  function onTouchMove() {\n    var data = swiper.touchEventsData,\n        touches = swiper.touches; // Velocity\n\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: now()\n    });\n  }\n\n  function onTouchEnd(_ref2) {\n    var currentPos = _ref2.currentPos;\n    var params = swiper.params,\n        $wrapperEl = swiper.$wrapperEl,\n        rtl = swiper.rtlTranslate,\n        snapGrid = swiper.snapGrid,\n        data = swiper.touchEventsData; // Time diff\n\n    var touchEndTime = now();\n    var timeDiff = touchEndTime - data.touchStartTime;\n\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n\n      return;\n    }\n\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        var lastMoveEvent = data.velocities.pop();\n        var velocityEvent = data.velocities.pop();\n        var distance = lastMoveEvent.position - velocityEvent.position;\n        var time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        } // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n\n\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      var momentumDuration = 1000 * params.freeMode.momentumRatio;\n      var momentumDistance = swiper.velocity * momentumDuration;\n      var newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      var doBounce = false;\n      var afterBouncePosition;\n      var bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      var needsLoopFix;\n\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        var nextSlide;\n\n        for (var j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n\n        newPosition = -newPosition;\n      }\n\n      if (needsLoopFix) {\n        once('transitionEnd', function () {\n          swiper.loopFix();\n        });\n      } // Fix duration\n\n\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n\n        if (params.freeMode.sticky) {\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          var moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          var currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        $wrapperEl.transitionEnd(function () {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(function () {\n            swiper.setTranslate(afterBouncePosition);\n            $wrapperEl.transitionEnd(function () {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n\n        if (!swiper.animating) {\n          swiper.animating = true;\n          $wrapperEl.transitionEnd(function () {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit('_freeModeNoMomentumRelease');\n    }\n\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchStart: onTouchStart,\n      onTouchMove: onTouchMove,\n      onTouchEnd: onTouchEnd\n    }\n  });\n}","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/swiper/modules/free-mode/free-mode.js"],"names":["now","freeMode","_ref","swiper","extendParams","emit","once","enabled","momentum","momentumRatio","momentumBounce","momentumBounceRatio","momentumVelocityRatio","sticky","minimumVelocity","onTouchStart","translate","getTranslate","setTranslate","setTransition","touchEventsData","velocities","length","onTouchEnd","currentPos","rtl","onTouchMove","data","touches","push","position","isHorizontal","time","touchStartTime","_ref2","params","$wrapperEl","rtlTranslate","snapGrid","touchEndTime","timeDiff","minTranslate","slideTo","activeIndex","maxTranslate","slides","lastMoveEvent","pop","velocityEvent","distance","velocity","Math","abs","momentumDuration","momentumDistance","newPosition","doBounce","afterBouncePosition","bounceAmount","needsLoopFix","allowMomentumBounce","loop","centeredSlides","nextSlide","j","swipeDirection","loopFix","moveDistance","currentSlideSize","slidesSizesGrid","speed","slideToClosest","updateProgress","transitionStart","animating","transitionEnd","destroyed","setTimeout","updateActiveIndex","updateSlidesClasses","longSwipesMs","Object","assign"],"mappings":"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","sourcesContent":["import { now } from '../../shared/utils.js';\nexport default function freeMode(_ref) {\n  let {\n    swiper,\n    extendParams,\n    emit,\n    once\n  } = _ref;\n  extendParams({\n    freeMode: {\n      enabled: false,\n      momentum: true,\n      momentumRatio: 1,\n      momentumBounce: true,\n      momentumBounceRatio: 1,\n      momentumVelocityRatio: 1,\n      sticky: false,\n      minimumVelocity: 0.02\n    }\n  });\n\n  function onTouchStart() {\n    const translate = swiper.getTranslate();\n    swiper.setTranslate(translate);\n    swiper.setTransition(0);\n    swiper.touchEventsData.velocities.length = 0;\n    swiper.freeMode.onTouchEnd({\n      currentPos: swiper.rtl ? swiper.translate : -swiper.translate\n    });\n  }\n\n  function onTouchMove() {\n    const {\n      touchEventsData: data,\n      touches\n    } = swiper; // Velocity\n\n    if (data.velocities.length === 0) {\n      data.velocities.push({\n        position: touches[swiper.isHorizontal() ? 'startX' : 'startY'],\n        time: data.touchStartTime\n      });\n    }\n\n    data.velocities.push({\n      position: touches[swiper.isHorizontal() ? 'currentX' : 'currentY'],\n      time: now()\n    });\n  }\n\n  function onTouchEnd(_ref2) {\n    let {\n      currentPos\n    } = _ref2;\n    const {\n      params,\n      $wrapperEl,\n      rtlTranslate: rtl,\n      snapGrid,\n      touchEventsData: data\n    } = swiper; // Time diff\n\n    const touchEndTime = now();\n    const timeDiff = touchEndTime - data.touchStartTime;\n\n    if (currentPos < -swiper.minTranslate()) {\n      swiper.slideTo(swiper.activeIndex);\n      return;\n    }\n\n    if (currentPos > -swiper.maxTranslate()) {\n      if (swiper.slides.length < snapGrid.length) {\n        swiper.slideTo(snapGrid.length - 1);\n      } else {\n        swiper.slideTo(swiper.slides.length - 1);\n      }\n\n      return;\n    }\n\n    if (params.freeMode.momentum) {\n      if (data.velocities.length > 1) {\n        const lastMoveEvent = data.velocities.pop();\n        const velocityEvent = data.velocities.pop();\n        const distance = lastMoveEvent.position - velocityEvent.position;\n        const time = lastMoveEvent.time - velocityEvent.time;\n        swiper.velocity = distance / time;\n        swiper.velocity /= 2;\n\n        if (Math.abs(swiper.velocity) < params.freeMode.minimumVelocity) {\n          swiper.velocity = 0;\n        } // this implies that the user stopped moving a finger then released.\n        // There would be no events with distance zero, so the last event is stale.\n\n\n        if (time > 150 || now() - lastMoveEvent.time > 300) {\n          swiper.velocity = 0;\n        }\n      } else {\n        swiper.velocity = 0;\n      }\n\n      swiper.velocity *= params.freeMode.momentumVelocityRatio;\n      data.velocities.length = 0;\n      let momentumDuration = 1000 * params.freeMode.momentumRatio;\n      const momentumDistance = swiper.velocity * momentumDuration;\n      let newPosition = swiper.translate + momentumDistance;\n      if (rtl) newPosition = -newPosition;\n      let doBounce = false;\n      let afterBouncePosition;\n      const bounceAmount = Math.abs(swiper.velocity) * 20 * params.freeMode.momentumBounceRatio;\n      let needsLoopFix;\n\n      if (newPosition < swiper.maxTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition + swiper.maxTranslate() < -bounceAmount) {\n            newPosition = swiper.maxTranslate() - bounceAmount;\n          }\n\n          afterBouncePosition = swiper.maxTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.maxTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (newPosition > swiper.minTranslate()) {\n        if (params.freeMode.momentumBounce) {\n          if (newPosition - swiper.minTranslate() > bounceAmount) {\n            newPosition = swiper.minTranslate() + bounceAmount;\n          }\n\n          afterBouncePosition = swiper.minTranslate();\n          doBounce = true;\n          data.allowMomentumBounce = true;\n        } else {\n          newPosition = swiper.minTranslate();\n        }\n\n        if (params.loop && params.centeredSlides) needsLoopFix = true;\n      } else if (params.freeMode.sticky) {\n        let nextSlide;\n\n        for (let j = 0; j < snapGrid.length; j += 1) {\n          if (snapGrid[j] > -newPosition) {\n            nextSlide = j;\n            break;\n          }\n        }\n\n        if (Math.abs(snapGrid[nextSlide] - newPosition) < Math.abs(snapGrid[nextSlide - 1] - newPosition) || swiper.swipeDirection === 'next') {\n          newPosition = snapGrid[nextSlide];\n        } else {\n          newPosition = snapGrid[nextSlide - 1];\n        }\n\n        newPosition = -newPosition;\n      }\n\n      if (needsLoopFix) {\n        once('transitionEnd', () => {\n          swiper.loopFix();\n        });\n      } // Fix duration\n\n\n      if (swiper.velocity !== 0) {\n        if (rtl) {\n          momentumDuration = Math.abs((-newPosition - swiper.translate) / swiper.velocity);\n        } else {\n          momentumDuration = Math.abs((newPosition - swiper.translate) / swiper.velocity);\n        }\n\n        if (params.freeMode.sticky) {\n          // If freeMode.sticky is active and the user ends a swipe with a slow-velocity\n          // event, then durations can be 20+ seconds to slide one (or zero!) slides.\n          // It's easy to see this when simulating touch with mouse events. To fix this,\n          // limit single-slide swipes to the default slide duration. This also has the\n          // nice side effect of matching slide speed if the user stopped moving before\n          // lifting finger or mouse vs. moving slowly before lifting the finger/mouse.\n          // For faster swipes, also apply limits (albeit higher ones).\n          const moveDistance = Math.abs((rtl ? -newPosition : newPosition) - swiper.translate);\n          const currentSlideSize = swiper.slidesSizesGrid[swiper.activeIndex];\n\n          if (moveDistance < currentSlideSize) {\n            momentumDuration = params.speed;\n          } else if (moveDistance < 2 * currentSlideSize) {\n            momentumDuration = params.speed * 1.5;\n          } else {\n            momentumDuration = params.speed * 2.5;\n          }\n        }\n      } else if (params.freeMode.sticky) {\n        swiper.slideToClosest();\n        return;\n      }\n\n      if (params.freeMode.momentumBounce && doBounce) {\n        swiper.updateProgress(afterBouncePosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n        swiper.animating = true;\n        $wrapperEl.transitionEnd(() => {\n          if (!swiper || swiper.destroyed || !data.allowMomentumBounce) return;\n          emit('momentumBounce');\n          swiper.setTransition(params.speed);\n          setTimeout(() => {\n            swiper.setTranslate(afterBouncePosition);\n            $wrapperEl.transitionEnd(() => {\n              if (!swiper || swiper.destroyed) return;\n              swiper.transitionEnd();\n            });\n          }, 0);\n        });\n      } else if (swiper.velocity) {\n        emit('_freeModeNoMomentumRelease');\n        swiper.updateProgress(newPosition);\n        swiper.setTransition(momentumDuration);\n        swiper.setTranslate(newPosition);\n        swiper.transitionStart(true, swiper.swipeDirection);\n\n        if (!swiper.animating) {\n          swiper.animating = true;\n          $wrapperEl.transitionEnd(() => {\n            if (!swiper || swiper.destroyed) return;\n            swiper.transitionEnd();\n          });\n        }\n      } else {\n        swiper.updateProgress(newPosition);\n      }\n\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    } else if (params.freeMode.sticky) {\n      swiper.slideToClosest();\n      return;\n    } else if (params.freeMode) {\n      emit('_freeModeNoMomentumRelease');\n    }\n\n    if (!params.freeMode.momentum || timeDiff >= params.longSwipesMs) {\n      swiper.updateProgress();\n      swiper.updateActiveIndex();\n      swiper.updateSlidesClasses();\n    }\n  }\n\n  Object.assign(swiper, {\n    freeMode: {\n      onTouchStart,\n      onTouchMove,\n      onTouchEnd\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}