{"ast":null,"code":"let http = null;\n\nif (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\n  http = require(\"./\").http;\n}\n\nconst BulletHttpRequest = function () {\n  function BulletHttpRequest() {\n    this.xmlhttp = null;\n    this.opts = {\n      url: '',\n      // 请求地址\n      type: 'GET',\n      // 请求类型 [get|post|put|delete]\n      dataType: 'json',\n      // 请求数据类型 [arraybuffer|blob|document|json|text]\n      data: {},\n      // 请求数据\n      header: {} // 请求头数据\n\n    };\n\n    if (typeof window !== 'undefined') {\n      if (window['ActiveXObject']) {\n        this.xmlhttp = new window['ActiveXObject']('Microsoft.XMLHTTP');\n      } else if (window['XMLHttpRequest']) {\n        this.xmlhttp = new XMLHttpRequest();\n      } else {\n        throw new Error('not http request object can use at current environment.');\n      }\n    }\n  }\n\n  ;\n\n  BulletHttpRequest.prototype.request = function () {\n    let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    if (typeof window === 'undefined') {\n      if (http) {\n        const _opts = {\n          protocol: '',\n          hostname: '',\n          port: 80,\n          path: '',\n          method: opts.type,\n          headers: {\n            'Accept': 'application/json;',\n            'Accept-Encoding': 'gzip,deflate',\n            'Accept-Language': 'zh-CN,zh,en; q=0.8',\n            'Connection': 'keep-alive',\n            'Content-Type': 'application/json; charset=UTF-8',\n            'X-Requested-With': 'XMLHttpRequest'\n          }\n        },\n              data = opts.data || null;\n        _opts.headers = Object.assign(_opts.headers, opts.header);\n        _opts.headers['Host'] = _opts.hostname;\n        data && data.length > 0 ? _opts.headers['Content-Length'] = Buffer.byteLength(data) : '';\n\n        const _url = new URL(opts.url || '');\n\n        _opts.protocol = _url.protocol;\n        _opts.hostname = _url.hostname;\n        _opts.port = _url.port;\n        _opts.path = _url.pathname;\n        return new Promise((res, rej) => {\n          let _data = '',\n              _req = http.request(_opts, _obj => {\n            _obj.setEncoding('utf8');\n\n            _obj.on('data', chunk => {\n              _data += chunk;\n            });\n\n            _obj.on('end', () => {\n              try {\n                _data = JSON.parse(_data);\n                res(_data);\n              } catch (e) {\n                res(_data);\n              }\n            });\n          });\n\n          _req.on('error', err => {\n            rej({\n              error: err.Error,\n              status: 0,\n              readyState: 0\n            });\n          });\n\n          data ? _req.write(JSON.stringify(data)) : '';\n\n          _req.end();\n        });\n      }\n\n      return new Promise((res, rej) => {\n        rej({\n          error: 'can not find http request module at current platform',\n          status: 0,\n          readyState: 0\n        });\n      });\n    } else {\n      this.opts = Object.assign(this.opts, opts);\n      const self = this;\n\n      if (!this.xmlhttp) {\n        return null;\n      }\n\n      self.xmlhttp.responseType = self.opts.dataType.toString().toLowerCase();\n      return new Promise((res, rej) => {\n        self.xmlhttp.onreadystatechange = () => {\n          if (self.xmlhttp.readyState === 4) {\n            if (self.xmlhttp.status === 200) {\n              res(self.xmlhttp.response);\n            } else {\n              rej({\n                error: self.xmlhttp.statusText,\n                status: self.xmlhttp.status,\n                readyState: self.xmlhttp.readyState\n              });\n            }\n          }\n        };\n\n        try {\n          self.xmlhttp.open(self.opts.type.toUpperCase(), self.opts.url);\n        } catch (e) {\n          rej({\n            error: e,\n            status: 0,\n            readyState: 0\n          });\n        }\n\n        if (self.opts.header) {\n          const hkarr = Object.keys(self.opts.header);\n\n          for (let i = 0; i < hkarr.length; i++) {\n            const hk = hkarr[i];\n            self.xmlhttp.setRequestHeader(hk, self.opts.header[hk]);\n          }\n        }\n\n        self.opts.type === 'POST' || 'PUT' ? self.xmlhttp.send(JSON.stringify(self.opts.data)) : self.xmlhttp.send();\n      });\n    }\n  };\n\n  return BulletHttpRequest;\n}();\n\nif (typeof module !== 'undefined') {\n  module.exports = BulletHttpRequest;\n}","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/bullet-request/http-request.js"],"names":["http","process","Object","prototype","toString","call","require","BulletHttpRequest","xmlhttp","opts","url","type","dataType","data","header","window","XMLHttpRequest","Error","request","_opts","protocol","hostname","port","path","method","headers","assign","length","Buffer","byteLength","_url","URL","pathname","Promise","res","rej","_data","_req","_obj","setEncoding","on","chunk","JSON","parse","e","err","error","status","readyState","write","stringify","end","self","responseType","toLowerCase","onreadystatechange","response","statusText","open","toUpperCase","hkarr","keys","i","hk","setRequestHeader","send","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAG,IAAX;;AACA,IAAI,OAAOC,OAAP,KAAmB,WAAnB,IAAkCC,MAAM,CAACC,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BJ,OAA/B,MAA4C,kBAAlF,EAAsG;AACpGD,EAAAA,IAAI,GAAGM,OAAO,CAAC,IAAD,CAAP,CAAcN,IAArB;AACD;;AAED,MACEO,iBAAiB,GAAI,YAAY;AAC/B,WAASA,iBAAT,GAA6B;AAC3B,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,IAAL,GAAY;AACVC,MAAAA,GAAG,EAAE,EADK;AACU;AACpBC,MAAAA,IAAI,EAAE,KAFI;AAEU;AACpBC,MAAAA,QAAQ,EAAE,MAHA;AAGU;AACpBC,MAAAA,IAAI,EAAE,EAJI;AAIU;AACpBC,MAAAA,MAAM,EAAE,EALE,CAOC;;AAPD,KAAZ;;AAUA,QAAI,OAAOC,MAAP,KAAkB,WAAtB,EAAmC;AACjC,UAAIA,MAAM,CAAC,eAAD,CAAV,EAA6B;AAC3B,aAAKP,OAAL,GAAe,IAAIO,MAAM,CAAC,eAAD,CAAV,CAA4B,mBAA5B,CAAf;AACD,OAFD,MAEO,IAAIA,MAAM,CAAC,gBAAD,CAAV,EAA8B;AACnC,aAAKP,OAAL,GAAe,IAAIQ,cAAJ,EAAf;AACD,OAFM,MAEA;AACL,cAAO,IAAIC,KAAJ,CAAU,yDAAV,CAAP;AACD;AACF;AACF;;AAAA;;AACDV,EAAAA,iBAAiB,CAACJ,SAAlB,CAA4Be,OAA5B,GAAsC,YAAqB;AAAA,QAAXT,IAAW,uEAAJ,EAAI;;AACzD,QAAI,OAAOM,MAAP,KAAkB,WAAtB,EAAmC;AACjC,UAAIf,IAAJ,EAAU;AACR,cAAMmB,KAAK,GAAG;AACZC,UAAAA,QAAQ,EAAE,EADE;AAEZC,UAAAA,QAAQ,EAAE,EAFE;AAGZC,UAAAA,IAAI,EAAE,EAHM;AAIZC,UAAAA,IAAI,EAAE,EAJM;AAKZC,UAAAA,MAAM,EAAEf,IAAI,CAACE,IALD;AAMZc,UAAAA,OAAO,EAAE;AACP,sBAAU,mBADH;AAEP,+BAAmB,cAFZ;AAGP,+BAAmB,oBAHZ;AAIP,0BAAc,YAJP;AAKP,4BAAgB,iCALT;AAMP,gCAAoB;AANb;AANG,SAAd;AAAA,cAeEZ,IAAI,GAAGJ,IAAI,CAACI,IAAL,IAAa,IAftB;AAgBAM,QAAAA,KAAK,CAACM,OAAN,GAAgBvB,MAAM,CAACwB,MAAP,CAAcP,KAAK,CAACM,OAApB,EAA6BhB,IAAI,CAACK,MAAlC,CAAhB;AACAK,QAAAA,KAAK,CAACM,OAAN,CAAc,MAAd,IAAwBN,KAAK,CAACE,QAA9B;AACAR,QAAAA,IAAI,IAAIA,IAAI,CAACc,MAAL,GAAc,CAAtB,GAA0BR,KAAK,CAACM,OAAN,CAAc,gBAAd,IAAkCG,MAAM,CAACC,UAAP,CAAkBhB,IAAlB,CAA5D,GAAsF,EAAtF;;AACA,cAAMiB,IAAI,GAAG,IAAIC,GAAJ,CAAQtB,IAAI,CAACC,GAAL,IAAY,EAApB,CAAb;;AACAS,QAAAA,KAAK,CAACC,QAAN,GAAiBU,IAAI,CAACV,QAAtB;AACAD,QAAAA,KAAK,CAACE,QAAN,GAAiBS,IAAI,CAACT,QAAtB;AACAF,QAAAA,KAAK,CAACG,IAAN,GAAaQ,IAAI,CAACR,IAAlB;AACAH,QAAAA,KAAK,CAACI,IAAN,GAAaO,IAAI,CAACE,QAAlB;AAEA,eAAO,IAAIC,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/B,cAAIC,KAAK,GAAG,EAAZ;AAAA,cACEC,IAAI,GAAGrC,IAAI,CAACkB,OAAL,CAAaC,KAAb,EAAoBmB,IAAI,IAAI;AACjCA,YAAAA,IAAI,CAACC,WAAL,CAAiB,MAAjB;;AACAD,YAAAA,IAAI,CAACE,EAAL,CAAQ,MAAR,EAAgBC,KAAK,IAAI;AACvBL,cAAAA,KAAK,IAAIK,KAAT;AACD,aAFD;;AAGAH,YAAAA,IAAI,CAACE,EAAL,CAAQ,KAAR,EAAe,MAAM;AACnB,kBAAI;AACFJ,gBAAAA,KAAK,GAAGM,IAAI,CAACC,KAAL,CAAWP,KAAX,CAAR;AACAF,gBAAAA,GAAG,CAACE,KAAD,CAAH;AACD,eAHD,CAGE,OAAOQ,CAAP,EAAU;AACVV,gBAAAA,GAAG,CAACE,KAAD,CAAH;AACD;AACF,aAPD;AAQD,WAbM,CADT;;AAeAC,UAAAA,IAAI,CAACG,EAAL,CAAQ,OAAR,EAAiBK,GAAG,IAAI;AACtBV,YAAAA,GAAG,CAAC;AACFW,cAAAA,KAAK,EAAED,GAAG,CAAC5B,KADT;AAEF8B,cAAAA,MAAM,EAAE,CAFN;AAGFC,cAAAA,UAAU,EAAE;AAHV,aAAD,CAAH;AAKD,WAND;;AAOAnC,UAAAA,IAAI,GAAGwB,IAAI,CAACY,KAAL,CAAWP,IAAI,CAACQ,SAAL,CAAerC,IAAf,CAAX,CAAH,GAAsC,EAA1C;;AACAwB,UAAAA,IAAI,CAACc,GAAL;AACD,SAzBM,CAAP;AA0BD;;AACD,aAAO,IAAIlB,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/BA,QAAAA,GAAG,CAAC;AACFW,UAAAA,KAAK,EAAE,sDADL;AAEFC,UAAAA,MAAM,EAAE,CAFN;AAGFC,UAAAA,UAAU,EAAE;AAHV,SAAD,CAAH;AAKD,OANM,CAAP;AAOD,KA7DD,MA6DO;AACL,WAAKvC,IAAL,GAAYP,MAAM,CAACwB,MAAP,CAAc,KAAKjB,IAAnB,EAAyBA,IAAzB,CAAZ;AACA,YAAM2C,IAAI,GAAG,IAAb;;AACA,UAAI,CAAC,KAAK5C,OAAV,EAAmB;AAAE,eAAO,IAAP;AAAc;;AACnC4C,MAAAA,IAAI,CAAC5C,OAAL,CAAa6C,YAAb,GAA4BD,IAAI,CAAC3C,IAAL,CAAUG,QAAV,CAAmBR,QAAnB,GAA8BkD,WAA9B,EAA5B;AAEA,aAAO,IAAIrB,OAAJ,CAAY,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC/BiB,QAAAA,IAAI,CAAC5C,OAAL,CAAa+C,kBAAb,GAAkC,MAAM;AACtC,cAAIH,IAAI,CAAC5C,OAAL,CAAawC,UAAb,KAA4B,CAAhC,EAAmC;AACjC,gBAAII,IAAI,CAAC5C,OAAL,CAAauC,MAAb,KAAwB,GAA5B,EAAiC;AAC/Bb,cAAAA,GAAG,CAACkB,IAAI,CAAC5C,OAAL,CAAagD,QAAd,CAAH;AACD,aAFD,MAEO;AACLrB,cAAAA,GAAG,CAAC;AACFW,gBAAAA,KAAK,EAAEM,IAAI,CAAC5C,OAAL,CAAaiD,UADlB;AAEFV,gBAAAA,MAAM,EAAEK,IAAI,CAAC5C,OAAL,CAAauC,MAFnB;AAGFC,gBAAAA,UAAU,EAAEI,IAAI,CAAC5C,OAAL,CAAawC;AAHvB,eAAD,CAAH;AAKD;AACF;AACF,SAZD;;AAaA,YAAI;AACFI,UAAAA,IAAI,CAAC5C,OAAL,CAAakD,IAAb,CAAkBN,IAAI,CAAC3C,IAAL,CAAUE,IAAV,CAAegD,WAAf,EAAlB,EAAgDP,IAAI,CAAC3C,IAAL,CAAUC,GAA1D;AACD,SAFD,CAEE,OAAOkC,CAAP,EAAU;AACVT,UAAAA,GAAG,CAAC;AACFW,YAAAA,KAAK,EAAEF,CADL;AAEFG,YAAAA,MAAM,EAAE,CAFN;AAGFC,YAAAA,UAAU,EAAE;AAHV,WAAD,CAAH;AAKD;;AACD,YAAII,IAAI,CAAC3C,IAAL,CAAUK,MAAd,EAAsB;AACpB,gBAAM8C,KAAK,GAAG1D,MAAM,CAAC2D,IAAP,CAAYT,IAAI,CAAC3C,IAAL,CAAUK,MAAtB,CAAd;;AACA,eAAK,IAAIgD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,KAAK,CAACjC,MAA1B,EAAkCmC,CAAC,EAAnC,EAAuC;AACrC,kBAAMC,EAAE,GAAGH,KAAK,CAACE,CAAD,CAAhB;AACAV,YAAAA,IAAI,CAAC5C,OAAL,CAAawD,gBAAb,CAA8BD,EAA9B,EAAkCX,IAAI,CAAC3C,IAAL,CAAUK,MAAV,CAAiBiD,EAAjB,CAAlC;AACD;AACF;;AACDX,QAAAA,IAAI,CAAC3C,IAAL,CAAUE,IAAV,KAAmB,MAAnB,IAA6B,KAA7B,GAAqCyC,IAAI,CAAC5C,OAAL,CAAayD,IAAb,CAAkBvB,IAAI,CAACQ,SAAL,CAAeE,IAAI,CAAC3C,IAAL,CAAUI,IAAzB,CAAlB,CAArC,GAAyFuC,IAAI,CAAC5C,OAAL,CAAayD,IAAb,EAAzF;AACD,OA/BM,CAAP;AAgCD;AACF,GArGD;;AAuGA,SAAO1D,iBAAP;AACD,CA/HmB,EADtB;;AAkIA,IAAI,OAAO2D,MAAP,KAAkB,WAAtB,EAAmC;AACjCA,EAAAA,MAAM,CAACC,OAAP,GAAiB5D,iBAAjB;AACD","sourcesContent":["let http = null;\r\nif (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {\r\n  http = require(\"./\").http;\r\n}\r\n\r\nconst\r\n  BulletHttpRequest = (function () {\r\n    function BulletHttpRequest() {\r\n      this.xmlhttp = null;\r\n      this.opts = {\r\n        url: '',            // 请求地址\r\n        type: 'GET',        // 请求类型 [get|post|put|delete]\r\n        dataType: 'json',   // 请求数据类型 [arraybuffer|blob|document|json|text]\r\n        data: {},           // 请求数据\r\n        header: {\r\n\r\n        },         // 请求头数据\r\n      };\r\n\r\n      if (typeof window !== 'undefined') {\r\n        if (window['ActiveXObject']) {\r\n          this.xmlhttp = new window['ActiveXObject']('Microsoft.XMLHTTP');\r\n        } else if (window['XMLHttpRequest']) {\r\n          this.xmlhttp = new XMLHttpRequest();\r\n        } else {\r\n          throw (new Error('not http request object can use at current environment.'));\r\n        }\r\n      }\r\n    };\r\n    BulletHttpRequest.prototype.request = function (opts = {}) {\r\n      if (typeof window === 'undefined') {\r\n        if (http) {\r\n          const _opts = {\r\n            protocol: '',\r\n            hostname: '',\r\n            port: 80,\r\n            path: '',\r\n            method: opts.type,\r\n            headers: {\r\n              'Accept': 'application/json;',\r\n              'Accept-Encoding': 'gzip,deflate',\r\n              'Accept-Language': 'zh-CN,zh,en; q=0.8',\r\n              'Connection': 'keep-alive',\r\n              'Content-Type': 'application/json; charset=UTF-8',\r\n              'X-Requested-With': 'XMLHttpRequest',\r\n            },\r\n          },\r\n            data = opts.data || null;\r\n          _opts.headers = Object.assign(_opts.headers, opts.header);\r\n          _opts.headers['Host'] = _opts.hostname;\r\n          data && data.length > 0 ? _opts.headers['Content-Length'] = Buffer.byteLength(data) : '';\r\n          const _url = new URL(opts.url || '');\r\n          _opts.protocol = _url.protocol;\r\n          _opts.hostname = _url.hostname;\r\n          _opts.port = _url.port;\r\n          _opts.path = _url.pathname;\r\n\r\n          return new Promise((res, rej) => {\r\n            let _data = '',\r\n              _req = http.request(_opts, _obj => {\r\n                _obj.setEncoding('utf8');\r\n                _obj.on('data', chunk => {\r\n                  _data += chunk;\r\n                });\r\n                _obj.on('end', () => {\r\n                  try {\r\n                    _data = JSON.parse(_data);\r\n                    res(_data);\r\n                  } catch (e) {\r\n                    res(_data);\r\n                  }\r\n                });\r\n              });\r\n            _req.on('error', err => {\r\n              rej({\r\n                error: err.Error,\r\n                status: 0,\r\n                readyState: 0\r\n              });\r\n            });\r\n            data ? _req.write(JSON.stringify(data)) : '';\r\n            _req.end();\r\n          });\r\n        }\r\n        return new Promise((res, rej) => {\r\n          rej({\r\n            error: 'can not find http request module at current platform',\r\n            status: 0,\r\n            readyState: 0\r\n          });\r\n        });\r\n      } else {\r\n        this.opts = Object.assign(this.opts, opts);\r\n        const self = this;\r\n        if (!this.xmlhttp) { return null; }\r\n        self.xmlhttp.responseType = self.opts.dataType.toString().toLowerCase();\r\n\r\n        return new Promise((res, rej) => {\r\n          self.xmlhttp.onreadystatechange = () => {\r\n            if (self.xmlhttp.readyState === 4) {\r\n              if (self.xmlhttp.status === 200) {\r\n                res(self.xmlhttp.response);\r\n              } else {\r\n                rej({\r\n                  error: self.xmlhttp.statusText,\r\n                  status: self.xmlhttp.status,\r\n                  readyState: self.xmlhttp.readyState\r\n                });\r\n              }\r\n            }\r\n          };\r\n          try {\r\n            self.xmlhttp.open(self.opts.type.toUpperCase(), self.opts.url);\r\n          } catch (e) {\r\n            rej({\r\n              error: e,\r\n              status: 0,\r\n              readyState: 0\r\n            });\r\n          }\r\n          if (self.opts.header) {\r\n            const hkarr = Object.keys(self.opts.header);\r\n            for (let i = 0; i < hkarr.length; i++) {\r\n              const hk = hkarr[i];\r\n              self.xmlhttp.setRequestHeader(hk, self.opts.header[hk]);\r\n            }\r\n          }\r\n          self.opts.type === 'POST' || 'PUT' ? self.xmlhttp.send(JSON.stringify(self.opts.data)) : self.xmlhttp.send();\r\n        });\r\n      }\r\n    }\r\n\r\n    return BulletHttpRequest;\r\n  })();\r\n\r\nif (typeof module !== 'undefined') {\r\n  module.exports = BulletHttpRequest;\r\n}"]},"metadata":{},"sourceType":"script"}