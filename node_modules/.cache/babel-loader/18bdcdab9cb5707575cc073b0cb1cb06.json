{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry(configOrCount) {\n  if (configOrCount === void 0) {\n    configOrCount = Infinity;\n  }\n\n  var config;\n\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount\n    };\n  }\n\n  var _a = config.count,\n      count = _a === void 0 ? Infinity : _a,\n      delay = config.delay,\n      _b = config.resetOnSuccess,\n      resetOnSuccess = _b === void 0 ? false : _b;\n  return count <= 0 ? identity : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n\n    var subscribeForRetry = function () {\n      var syncUnsub = false;\n      innerSub = source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n        if (resetOnSuccess) {\n          soFar = 0;\n        }\n\n        subscriber.next(value);\n      }, undefined, function (err) {\n        if (soFar++ < count) {\n          var resub_1 = function () {\n            if (innerSub) {\n              innerSub.unsubscribe();\n              innerSub = null;\n              subscribeForRetry();\n            } else {\n              syncUnsub = true;\n            }\n          };\n\n          if (delay != null) {\n            var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n            var notifierSubscriber_1 = createOperatorSubscriber(subscriber, function () {\n              notifierSubscriber_1.unsubscribe();\n              resub_1();\n            }, function () {\n              subscriber.complete();\n            });\n            notifier.subscribe(notifierSubscriber_1);\n          } else {\n            resub_1();\n          }\n        } else {\n          subscriber.error(err);\n        }\n      }));\n\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRetry();\n      }\n    };\n\n    subscribeForRetry();\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAT,QAAwB,cAAxB;AAEA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AA4EA,OAAM,SAAUC,KAAV,CAAmBC,aAAnB,EAAiE;AAA9C;AAAAA;AAA8C;;AACrE,MAAIC,MAAJ;;AACA,MAAID,aAAa,IAAI,OAAOA,aAAP,KAAyB,QAA9C,EAAwD;AACtDC,UAAM,GAAGD,aAAT;AACD,GAFD,MAEO;AACLC,UAAM,GAAG;AACPC,WAAK,EAAEF;AADA,KAAT;AAGD;;AACO,WAAoEC,MAAM,MAA1E;AAAA,WAAK,mBAAGE,QAAH,GAAWC,EAAhB;AAAA,MAAkBC,KAAK,GAA6CJ,MAAM,MAA1E;AAAA,MAAyBK,KAA2CL,MAAM,eAA1E;AAAA,MAAyCM,cAAc,mBAAG,KAAH,GAAQD,EAA/D;AAER,SAAOJ,KAAK,IAAI,CAAT,GACHN,QADG,GAEHF,OAAO,CAAC,UAACc,MAAD,EAASC,UAAT,EAAmB;AACzB,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,QAAJ;;AACA,QAAMC,iBAAiB,GAAG;AACxB,UAAIC,SAAS,GAAG,KAAhB;AACAF,cAAQ,GAAGH,MAAM,CAACM,SAAP,CACTnB,wBAAwB,CACtBc,UADsB,EAEtB,UAACM,KAAD,EAAM;AAEJ,YAAIR,cAAJ,EAAoB;AAClBG,eAAK,GAAG,CAAR;AACD;;AACDD,kBAAU,CAACO,IAAX,CAAgBD,KAAhB;AACD,OARqB,EAUtBE,SAVsB,EAWtB,UAACC,GAAD,EAAI;AACF,YAAIR,KAAK,KAAKR,KAAd,EAAqB;AAEnB,cAAMiB,OAAK,GAAG;AACZ,gBAAIR,QAAJ,EAAc;AACZA,sBAAQ,CAACS,WAAT;AACAT,sBAAQ,GAAG,IAAX;AACAC,+BAAiB;AAClB,aAJD,MAIO;AACLC,uBAAS,GAAG,IAAZ;AACD;AACF,WARD;;AAUA,cAAIR,KAAK,IAAI,IAAb,EAAmB;AAIjB,gBAAMgB,QAAQ,GAAG,OAAOhB,KAAP,KAAiB,QAAjB,GAA4BR,KAAK,CAACQ,KAAD,CAAjC,GAA2CP,SAAS,CAACO,KAAK,CAACa,GAAD,EAAMR,KAAN,CAAN,CAArE;AACA,gBAAMY,oBAAkB,GAAG3B,wBAAwB,CACjDc,UADiD,EAEjD;AAIEa,kCAAkB,CAACF,WAAnB;AACAD,qBAAK;AACN,aARgD,EASjD;AAGEV,wBAAU,CAACc,QAAX;AACD,aAbgD,CAAnD;AAeAF,oBAAQ,CAACP,SAAT,CAAmBQ,oBAAnB;AACD,WArBD,MAqBO;AAELH,mBAAK;AACN;AACF,SArCD,MAqCO;AAGLV,oBAAU,CAACe,KAAX,CAAiBN,GAAjB;AACD;AACF,OAtDqB,CADf,CAAX;;AA0DA,UAAIL,SAAJ,EAAe;AACbF,gBAAQ,CAACS,WAAT;AACAT,gBAAQ,GAAG,IAAX;AACAC,yBAAiB;AAClB;AACF,KAjED;;AAkEAA,qBAAiB;AAClB,GAtEM,CAFX;AAyED","names":["operate","createOperatorSubscriber","identity","timer","innerFrom","retry","configOrCount","config","count","Infinity","_a","delay","_b","resetOnSuccess","source","subscriber","soFar","innerSub","subscribeForRetry","syncUnsub","subscribe","value","next","undefined","err","resub_1","unsubscribe","notifier","notifierSubscriber_1","complete","error"],"sources":["D:\\Web Data\\Personal-Website\\client\\node_modules\\rxjs\\src\\internal\\operators\\retry.ts"],"sourcesContent":["import { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { Subscription } from '../Subscription';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\n\n/**\n * The {@link retry} operator configuration object. `retry` either accepts a `number`\n * or an object described by this interface.\n */\nexport interface RetryConfig {\n  /**\n   * The maximum number of times to retry. If `count` is omitted, `retry` will try to\n   * resubscribe on errors infinite number of times.\n   */\n  count?: number;\n  /**\n   * The number of milliseconds to delay before retrying, OR a function to\n   * return a notifier for delaying. If a function is given, that function should\n   * return a notifier that, when it emits will retry the source. If the notifier\n   * completes _without_ emitting, the resulting observable will complete without error,\n   * if the notifier errors, the error will be pushed to the result.\n   */\n  delay?: number | ((error: any, retryCount: number) => ObservableInput<any>);\n  /**\n   * Whether or not to reset the retry counter when the retried subscription\n   * emits its first value.\n   */\n  resetOnSuccess?: boolean;\n}\n\nexport function retry<T>(count?: number): MonoTypeOperatorFunction<T>;\nexport function retry<T>(config: RetryConfig): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`.\n *\n * If the source Observable calls `error`, this method will resubscribe to the source Observable for a maximum of\n * `count` resubscriptions rather than propagating the `error` call.\n *\n * ![](retry.png)\n *\n * The number of retries is determined by the `count` parameter. It can be set either by passing a number to\n * `retry` function or by setting `count` property when `retry` is configured using {@link RetryConfig}. If\n * `count` is omitted, `retry` will try to resubscribe on errors infinite number of times.\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those\n * emitted during failed subscriptions. For example, if an Observable fails at first but emits `[1, 2]` then\n * succeeds the second time and emits: `[1, 2, 3, 4, 5, complete]` then the complete stream of emissions and\n * notifications would be: `[1, 2, 1, 2, 3, 4, 5, complete]`.\n *\n * ## Example\n *\n * ```ts\n * import { interval, mergeMap, throwError, of, retry } from 'rxjs';\n *\n * const source = interval(1000);\n * const result = source.pipe(\n *   mergeMap(val => val > 5 ? throwError(() => 'Error!') : of(val)),\n *   retry(2) // retry 2 times on error\n * );\n *\n * result.subscribe({\n *   next: value => console.log(value),\n *   error: err => console.log(`${ err }: Retried 2 times then quit!`)\n * });\n *\n * // Output:\n * // 0..1..2..3..4..5..\n * // 0..1..2..3..4..5..\n * // 0..1..2..3..4..5..\n * // 'Error!: Retried 2 times then quit!'\n * ```\n *\n * @see {@link retryWhen}\n *\n * @param configOrCount - Either number of retry attempts before failing or a {@link RetryConfig} object.\n * @return A function that returns an Observable that will resubscribe to the\n * source stream when the source stream errors, at most `count` times.\n */\nexport function retry<T>(configOrCount: number | RetryConfig = Infinity): MonoTypeOperatorFunction<T> {\n  let config: RetryConfig;\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount,\n    };\n  }\n  const { count = Infinity, delay, resetOnSuccess: resetOnSuccess = false } = config;\n\n  return count <= 0\n    ? identity\n    : operate((source, subscriber) => {\n        let soFar = 0;\n        let innerSub: Subscription | null;\n        const subscribeForRetry = () => {\n          let syncUnsub = false;\n          innerSub = source.subscribe(\n            createOperatorSubscriber(\n              subscriber,\n              (value) => {\n                // If we're resetting on success\n                if (resetOnSuccess) {\n                  soFar = 0;\n                }\n                subscriber.next(value);\n              },\n              // Completions are passed through to consumer.\n              undefined,\n              (err) => {\n                if (soFar++ < count) {\n                  // We are still under our retry count\n                  const resub = () => {\n                    if (innerSub) {\n                      innerSub.unsubscribe();\n                      innerSub = null;\n                      subscribeForRetry();\n                    } else {\n                      syncUnsub = true;\n                    }\n                  };\n\n                  if (delay != null) {\n                    // The user specified a retry delay.\n                    // They gave us a number, use a timer, otherwise, it's a function,\n                    // and we're going to call it to get a notifier.\n                    const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n                    const notifierSubscriber = createOperatorSubscriber(\n                      subscriber,\n                      () => {\n                        // After we get the first notification, we\n                        // unsubscribe from the notifer, because we don't want anymore\n                        // and we resubscribe to the source.\n                        notifierSubscriber.unsubscribe();\n                        resub();\n                      },\n                      () => {\n                        // The notifier completed without emitting.\n                        // The author is telling us they want to complete.\n                        subscriber.complete();\n                      }\n                    );\n                    notifier.subscribe(notifierSubscriber);\n                  } else {\n                    // There was no notifier given. Just resub immediately.\n                    resub();\n                  }\n                } else {\n                  // We're past our maximum number of retries.\n                  // Just send along the error.\n                  subscriber.error(err);\n                }\n              }\n            )\n          );\n          if (syncUnsub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            subscribeForRetry();\n          }\n        };\n        subscribeForRetry();\n      });\n}\n"]},"metadata":{},"sourceType":"module"}