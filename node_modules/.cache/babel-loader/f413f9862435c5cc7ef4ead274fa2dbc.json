{"ast":null,"code":"import { __asyncValues, __awaiter, __generator, __values } from \"tslib\";\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function innerFrom(input) {\n  if (input instanceof Observable) {\n    return input;\n  }\n\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromInteropObservable(input);\n    }\n\n    if (isArrayLike(input)) {\n      return fromArrayLike(input);\n    }\n\n    if (isPromise(input)) {\n      return fromPromise(input);\n    }\n\n    if (isAsyncIterable(input)) {\n      return fromAsyncIterable(input);\n    }\n\n    if (isIterable(input)) {\n      return fromIterable(input);\n    }\n\n    if (isReadableStreamLike(input)) {\n      return fromReadableStreamLike(input);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}\nexport function fromInteropObservable(obj) {\n  return new Observable(function (subscriber) {\n    var obs = obj[Symbol_observable]();\n\n    if (isFunction(obs.subscribe)) {\n      return obs.subscribe(subscriber);\n    }\n\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  });\n}\nexport function fromArrayLike(array) {\n  return new Observable(function (subscriber) {\n    for (var i = 0; i < array.length && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n\n    subscriber.complete();\n  });\n}\nexport function fromPromise(promise) {\n  return new Observable(function (subscriber) {\n    promise.then(function (value) {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    }, function (err) {\n      return subscriber.error(err);\n    }).then(null, reportUnhandledError);\n  });\n}\nexport function fromIterable(iterable) {\n  return new Observable(function (subscriber) {\n    var e_1, _a;\n\n    try {\n      for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {\n        var value = iterable_1_1.value;\n        subscriber.next(value);\n\n        if (subscriber.closed) {\n          return;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    subscriber.complete();\n  });\n}\nexport function fromAsyncIterable(asyncIterable) {\n  return new Observable(function (subscriber) {\n    process(asyncIterable, subscriber).catch(function (err) {\n      return subscriber.error(err);\n    });\n  });\n}\nexport function fromReadableStreamLike(readableStream) {\n  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\n\nfunction process(asyncIterable, subscriber) {\n  var asyncIterable_1, asyncIterable_1_1;\n\n  var e_2, _a;\n\n  return __awaiter(this, void 0, void 0, function () {\n    var value, e_2_1;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          _b.trys.push([0, 5, 6, 11]);\n\n          asyncIterable_1 = __asyncValues(asyncIterable);\n          _b.label = 1;\n\n        case 1:\n          return [4, asyncIterable_1.next()];\n\n        case 2:\n          if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];\n          value = asyncIterable_1_1.value;\n          subscriber.next(value);\n\n          if (subscriber.closed) {\n            return [2];\n          }\n\n          _b.label = 3;\n\n        case 3:\n          return [3, 1];\n\n        case 4:\n          return [3, 11];\n\n        case 5:\n          e_2_1 = _b.sent();\n          e_2 = {\n            error: e_2_1\n          };\n          return [3, 11];\n\n        case 6:\n          _b.trys.push([6,, 9, 10]);\n\n          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];\n          return [4, _a.call(asyncIterable_1)];\n\n        case 7:\n          _b.sent();\n\n          _b.label = 8;\n\n        case 8:\n          return [3, 10];\n\n        case 9:\n          if (e_2) throw e_2.error;\n          return [7];\n\n        case 10:\n          return [7];\n\n        case 11:\n          subscriber.complete();\n          return [2];\n      }\n    });\n  });\n}","map":{"version":3,"mappings":"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","names":["isArrayLike","isPromise","Observable","isInteropObservable","isAsyncIterable","createInvalidObservableTypeError","isIterable","isReadableStreamLike","readableStreamLikeToAsyncGenerator","isFunction","reportUnhandledError","observable","Symbol_observable","innerFrom","input","fromInteropObservable","fromArrayLike","fromPromise","fromAsyncIterable","fromIterable","fromReadableStreamLike","obj","subscriber","obs","subscribe","TypeError","array","i","length","closed","next","complete","promise","then","value","err","error","iterable","iterable_1_1","asyncIterable","process","catch","readableStream","asyncIterable_1"],"sources":["D:\\Web Data\\Personal-Website\\client\\node_modules\\rxjs\\src\\internal\\observable\\innerFrom.ts"],"sourcesContent":["import { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { Observable } from '../Observable';\nimport { ObservableInput, ReadableStreamLike } from '../types';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\nimport { Subscriber } from '../Subscriber';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\nexport function innerFrom<T>(input: ObservableInput<T>): Observable<T> {\n  if (input instanceof Observable) {\n    return input;\n  }\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromInteropObservable(input);\n    }\n    if (isArrayLike(input)) {\n      return fromArrayLike(input);\n    }\n    if (isPromise(input)) {\n      return fromPromise(input);\n    }\n    if (isAsyncIterable(input)) {\n      return fromAsyncIterable(input);\n    }\n    if (isIterable(input)) {\n      return fromIterable(input);\n    }\n    if (isReadableStreamLike(input)) {\n      return fromReadableStreamLike(input);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}\n\n/**\n * Creates an RxJS Observable from an object that implements `Symbol.observable`.\n * @param obj An object that properly implements `Symbol.observable`.\n */\nexport function fromInteropObservable<T>(obj: any) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    const obs = obj[Symbol_observable]();\n    if (isFunction(obs.subscribe)) {\n      return obs.subscribe(subscriber);\n    }\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  });\n}\n\n/**\n * Synchronously emits the values of an array like and completes.\n * This is exported because there are creation functions and operators that need to\n * make direct use of the same logic, and there's no reason to make them run through\n * `from` conditionals because we *know* they're dealing with an array.\n * @param array The array to emit values from\n */\nexport function fromArrayLike<T>(array: ArrayLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    // Loop over the array and emit each value. Note two things here:\n    // 1. We're making sure that the subscriber is not closed on each loop.\n    //    This is so we don't continue looping over a very large array after\n    //    something like a `take`, `takeWhile`, or other synchronous unsubscription\n    //    has already unsubscribed.\n    // 2. In this form, reentrant code can alter that array we're looping over.\n    //    This is a known issue, but considered an edge case. The alternative would\n    //    be to copy the array before executing the loop, but this has\n    //    performance implications.\n    for (let i = 0; i < array.length && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromPromise<T>(promise: PromiseLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    promise\n      .then(\n        (value) => {\n          if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n          }\n        },\n        (err: any) => subscriber.error(err)\n      )\n      .then(null, reportUnhandledError);\n  });\n}\n\nexport function fromIterable<T>(iterable: Iterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    for (const value of iterable) {\n      subscriber.next(value);\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    subscriber.complete();\n  });\n}\n\nexport function fromAsyncIterable<T>(asyncIterable: AsyncIterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    process(asyncIterable, subscriber).catch((err) => subscriber.error(err));\n  });\n}\n\nexport function fromReadableStreamLike<T>(readableStream: ReadableStreamLike<T>) {\n  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\n\nasync function process<T>(asyncIterable: AsyncIterable<T>, subscriber: Subscriber<T>) {\n  for await (const value of asyncIterable) {\n    subscriber.next(value);\n    // A side-effect may have closed our subscriber,\n    // check before the next iteration.\n    if (subscriber.closed) {\n      return;\n    }\n  }\n  subscriber.complete();\n}\n"]},"metadata":{},"sourceType":"module"}