{"ast":null,"code":"import { invariant } from 'hey-listen';\nimport * as React from 'react';\nimport { forwardRef, useRef, useEffect } from 'react';\nimport { ReorderContext } from '../../context/ReorderContext.mjs';\nimport { motion } from '../../render/dom/motion.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { checkReorder } from './utils/check-reorder.mjs';\n\nfunction ReorderGroup(_ref, externalRef) {\n  let {\n    children,\n    as = \"ul\",\n    axis = \"y\",\n    onReorder,\n    values,\n    ...props\n  } = _ref;\n  const Component = useConstant(() => motion(as));\n  const order = [];\n  const isReordering = useRef(false);\n  invariant(Boolean(values), \"Reorder.Group must be provided a values prop\");\n  const context = {\n    axis,\n    registerItem: (value, layout) => {\n      /**\n       * Ensure entries can't add themselves more than once\n       */\n      if (layout && order.findIndex(entry => value === entry.value) === -1) {\n        order.push({\n          value,\n          layout: layout[axis]\n        });\n        order.sort(compareMin);\n      }\n    },\n    updateOrder: (id, offset, velocity) => {\n      if (isReordering.current) return;\n      const newOrder = checkReorder(order, id, offset, velocity);\n\n      if (order !== newOrder) {\n        isReordering.current = true;\n        onReorder(newOrder.map(getValue).filter(value => values.indexOf(value) !== -1));\n      }\n    }\n  };\n  useEffect(() => {\n    isReordering.current = false;\n  });\n  return React.createElement(Component, { ...props,\n    ref: externalRef\n  }, React.createElement(ReorderContext.Provider, {\n    value: context\n  }, children));\n}\n\nconst Group = forwardRef(ReorderGroup);\n\nfunction getValue(item) {\n  return item.value;\n}\n\nfunction compareMin(a, b) {\n  return a.layout.min - b.layout.min;\n}\n\nexport { Group, ReorderGroup };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/components/Reorder/Group.mjs"],"names":["invariant","React","forwardRef","useRef","useEffect","ReorderContext","motion","useConstant","checkReorder","ReorderGroup","externalRef","children","as","axis","onReorder","values","props","Component","order","isReordering","Boolean","context","registerItem","value","layout","findIndex","entry","push","sort","compareMin","updateOrder","id","offset","velocity","current","newOrder","map","getValue","filter","indexOf","createElement","ref","Provider","Group","item","a","b","min"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,EAAqBC,MAArB,EAA6BC,SAA7B,QAA8C,OAA9C;AACA,SAASC,cAAT,QAA+B,kCAA/B;AACA,SAASC,MAAT,QAAuB,6BAAvB;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,YAAT,QAA6B,2BAA7B;;AAEA,SAASC,YAAT,OAAwFC,WAAxF,EAAqG;AAAA,MAA/E;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,EAAE,GAAG,IAAjB;AAAuBC,IAAAA,IAAI,GAAG,GAA9B;AAAmCC,IAAAA,SAAnC;AAA8CC,IAAAA,MAA9C;AAAsD,OAAGC;AAAzD,GAA+E;AACjG,QAAMC,SAAS,GAAGV,WAAW,CAAC,MAAMD,MAAM,CAACM,EAAD,CAAb,CAA7B;AACA,QAAMM,KAAK,GAAG,EAAd;AACA,QAAMC,YAAY,GAAGhB,MAAM,CAAC,KAAD,CAA3B;AACAH,EAAAA,SAAS,CAACoB,OAAO,CAACL,MAAD,CAAR,EAAkB,8CAAlB,CAAT;AACA,QAAMM,OAAO,GAAG;AACZR,IAAAA,IADY;AAEZS,IAAAA,YAAY,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC7B;AACZ;AACA;AACY,UAAIA,MAAM,IACNN,KAAK,CAACO,SAAN,CAAiBC,KAAD,IAAWH,KAAK,KAAKG,KAAK,CAACH,KAA3C,MAAsD,CAAC,CAD3D,EAC8D;AAC1DL,QAAAA,KAAK,CAACS,IAAN,CAAW;AAAEJ,UAAAA,KAAF;AAASC,UAAAA,MAAM,EAAEA,MAAM,CAACX,IAAD;AAAvB,SAAX;AACAK,QAAAA,KAAK,CAACU,IAAN,CAAWC,UAAX;AACH;AACJ,KAXW;AAYZC,IAAAA,WAAW,EAAE,CAACC,EAAD,EAAKC,MAAL,EAAaC,QAAb,KAA0B;AACnC,UAAId,YAAY,CAACe,OAAjB,EACI;AACJ,YAAMC,QAAQ,GAAG3B,YAAY,CAACU,KAAD,EAAQa,EAAR,EAAYC,MAAZ,EAAoBC,QAApB,CAA7B;;AACA,UAAIf,KAAK,KAAKiB,QAAd,EAAwB;AACpBhB,QAAAA,YAAY,CAACe,OAAb,GAAuB,IAAvB;AACApB,QAAAA,SAAS,CAACqB,QAAQ,CACbC,GADK,CACDC,QADC,EAELC,MAFK,CAEGf,KAAD,IAAWR,MAAM,CAACwB,OAAP,CAAehB,KAAf,MAA0B,CAAC,CAFxC,CAAD,CAAT;AAGH;AACJ;AAtBW,GAAhB;AAwBAnB,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,YAAY,CAACe,OAAb,GAAuB,KAAvB;AACH,GAFQ,CAAT;AAGA,SAAQjC,KAAK,CAACuC,aAAN,CAAoBvB,SAApB,EAA+B,EAAE,GAAGD,KAAL;AAAYyB,IAAAA,GAAG,EAAE/B;AAAjB,GAA/B,EACJT,KAAK,CAACuC,aAAN,CAAoBnC,cAAc,CAACqC,QAAnC,EAA6C;AAAEnB,IAAAA,KAAK,EAAEF;AAAT,GAA7C,EAAiEV,QAAjE,CADI,CAAR;AAEH;;AACD,MAAMgC,KAAK,GAAGzC,UAAU,CAACO,YAAD,CAAxB;;AACA,SAAS4B,QAAT,CAAkBO,IAAlB,EAAwB;AACpB,SAAOA,IAAI,CAACrB,KAAZ;AACH;;AACD,SAASM,UAAT,CAAoBgB,CAApB,EAAuBC,CAAvB,EAA0B;AACtB,SAAOD,CAAC,CAACrB,MAAF,CAASuB,GAAT,GAAeD,CAAC,CAACtB,MAAF,CAASuB,GAA/B;AACH;;AAED,SAASJ,KAAT,EAAgBlC,YAAhB","sourcesContent":["import { invariant } from 'hey-listen';\nimport * as React from 'react';\nimport { forwardRef, useRef, useEffect } from 'react';\nimport { ReorderContext } from '../../context/ReorderContext.mjs';\nimport { motion } from '../../render/dom/motion.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { checkReorder } from './utils/check-reorder.mjs';\n\nfunction ReorderGroup({ children, as = \"ul\", axis = \"y\", onReorder, values, ...props }, externalRef) {\n    const Component = useConstant(() => motion(as));\n    const order = [];\n    const isReordering = useRef(false);\n    invariant(Boolean(values), \"Reorder.Group must be provided a values prop\");\n    const context = {\n        axis,\n        registerItem: (value, layout) => {\n            /**\n             * Ensure entries can't add themselves more than once\n             */\n            if (layout &&\n                order.findIndex((entry) => value === entry.value) === -1) {\n                order.push({ value, layout: layout[axis] });\n                order.sort(compareMin);\n            }\n        },\n        updateOrder: (id, offset, velocity) => {\n            if (isReordering.current)\n                return;\n            const newOrder = checkReorder(order, id, offset, velocity);\n            if (order !== newOrder) {\n                isReordering.current = true;\n                onReorder(newOrder\n                    .map(getValue)\n                    .filter((value) => values.indexOf(value) !== -1));\n            }\n        },\n    };\n    useEffect(() => {\n        isReordering.current = false;\n    });\n    return (React.createElement(Component, { ...props, ref: externalRef },\n        React.createElement(ReorderContext.Provider, { value: context }, children)));\n}\nconst Group = forwardRef(ReorderGroup);\nfunction getValue(item) {\n    return item.value;\n}\nfunction compareMin(a, b) {\n    return a.layout.min - b.layout.min;\n}\n\nexport { Group, ReorderGroup };\n"]},"metadata":{},"sourceType":"module"}