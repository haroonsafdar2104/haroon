{"ast":null,"code":"import { time } from '@motionone/utils';\nimport { defaults } from './defaults.es.js';\nimport { calcDampingRatio } from './utils.es.js';\nimport { hasReachedTarget } from '../utils/has-reached-target.es.js';\nimport { calcGeneratorVelocity } from '../utils/velocity.es.js';\n\nconst spring = function () {\n  let {\n    stiffness = defaults.stiffness,\n    damping = defaults.damping,\n    mass = defaults.mass,\n    from = 0,\n    to = 1,\n    velocity = 0.0,\n    restSpeed = 2,\n    restDistance = 0.5\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  velocity = velocity ? time.s(velocity) : 0.0;\n  const state = {\n    done: false,\n    hasReachedTarget: false,\n    current: from,\n    target: to\n  };\n  const initialDelta = to - from;\n  const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n  const dampingRatio = calcDampingRatio(stiffness, damping, mass);\n  let resolveSpring;\n\n  if (dampingRatio < 1) {\n    const angularFreq = undampedAngularFreq * Math.sqrt(1 - dampingRatio * dampingRatio); // Underdamped spring (bouncy)\n\n    resolveSpring = t => to - Math.exp(-dampingRatio * undampedAngularFreq * t) * ((-velocity + dampingRatio * undampedAngularFreq * initialDelta) / angularFreq * Math.sin(angularFreq * t) + initialDelta * Math.cos(angularFreq * t));\n  } else {\n    // Critically damped spring\n    resolveSpring = t => {\n      return to - Math.exp(-undampedAngularFreq * t) * (initialDelta + (-velocity + undampedAngularFreq * initialDelta) * t);\n    };\n  }\n\n  return t => {\n    state.current = resolveSpring(t);\n    const currentVelocity = t === 0 ? velocity : calcGeneratorVelocity(resolveSpring, t, state.current);\n    const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n    const isBelowDisplacementThreshold = Math.abs(to - state.current) <= restDistance;\n    state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n    state.hasReachedTarget = hasReachedTarget(from, to, state.current);\n    return state;\n  };\n};\n\nexport { spring };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/@motionone/generators/dist/spring/index.es.js"],"names":["time","defaults","calcDampingRatio","hasReachedTarget","calcGeneratorVelocity","spring","stiffness","damping","mass","from","to","velocity","restSpeed","restDistance","s","state","done","current","target","initialDelta","undampedAngularFreq","Math","sqrt","dampingRatio","resolveSpring","angularFreq","t","exp","sin","cos","currentVelocity","isBelowVelocityThreshold","abs","isBelowDisplacementThreshold"],"mappings":"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","sourcesContent":["import { time } from '@motionone/utils';\nimport { defaults } from './defaults.es.js';\nimport { calcDampingRatio } from './utils.es.js';\nimport { hasReachedTarget } from '../utils/has-reached-target.es.js';\nimport { calcGeneratorVelocity } from '../utils/velocity.es.js';\n\nconst spring = ({ stiffness = defaults.stiffness, damping = defaults.damping, mass = defaults.mass, from = 0, to = 1, velocity = 0.0, restSpeed = 2, restDistance = 0.5, } = {}) => {\n    velocity = velocity ? time.s(velocity) : 0.0;\n    const state = {\n        done: false,\n        hasReachedTarget: false,\n        current: from,\n        target: to,\n    };\n    const initialDelta = to - from;\n    const undampedAngularFreq = Math.sqrt(stiffness / mass) / 1000;\n    const dampingRatio = calcDampingRatio(stiffness, damping, mass);\n    let resolveSpring;\n    if (dampingRatio < 1) {\n        const angularFreq = undampedAngularFreq * Math.sqrt(1 - dampingRatio * dampingRatio);\n        // Underdamped spring (bouncy)\n        resolveSpring = (t) => to -\n            Math.exp(-dampingRatio * undampedAngularFreq * t) *\n                (((-velocity + dampingRatio * undampedAngularFreq * initialDelta) /\n                    angularFreq) *\n                    Math.sin(angularFreq * t) +\n                    initialDelta * Math.cos(angularFreq * t));\n    }\n    else {\n        // Critically damped spring\n        resolveSpring = (t) => {\n            return (to -\n                Math.exp(-undampedAngularFreq * t) *\n                    (initialDelta + (-velocity + undampedAngularFreq * initialDelta) * t));\n        };\n    }\n    return (t) => {\n        state.current = resolveSpring(t);\n        const currentVelocity = t === 0\n            ? velocity\n            : calcGeneratorVelocity(resolveSpring, t, state.current);\n        const isBelowVelocityThreshold = Math.abs(currentVelocity) <= restSpeed;\n        const isBelowDisplacementThreshold = Math.abs(to - state.current) <= restDistance;\n        state.done = isBelowVelocityThreshold && isBelowDisplacementThreshold;\n        state.hasReachedTarget = hasReachedTarget(from, to, state.current);\n        return state;\n    };\n};\n\nexport { spring };\n"]},"metadata":{},"sourceType":"module"}