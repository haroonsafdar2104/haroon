{"ast":null,"code":"import sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\n\nconst animationTarget = 1000;\n\nfunction createProjectionNode(_ref) {\n  let {\n    attachResizeListener,\n    defaultParent,\n    measureScroll,\n    checkIsScrollRoot,\n    resetTransform\n  } = _ref;\n  return class ProjectionNode {\n    constructor(id) {\n      let latestValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      let parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n\n      this.isLayoutDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to actually\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n\n      this.eventHandlers = new Map(); // Note: Currently only running on root node\n\n      this.potentialNodes = new Map();\n\n      this.checkUpdateFailed = () => {\n        if (this.isUpdating) {\n          this.isUpdating = false;\n          this.clearAllSnapshots();\n        }\n      };\n\n      this.updateProjection = () => {\n        this.nodes.forEach(resolveTargetDelta);\n        this.nodes.forEach(calcProjection);\n      };\n\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n\n      this.sharedNodes = new Map();\n      this.id = id;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [...parent.path, parent] : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      id && this.root.registerPotentialNode(id, this);\n\n      for (let i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n\n    addEventListener(name, handler) {\n      if (!this.eventHandlers.has(name)) {\n        this.eventHandlers.set(name, new SubscriptionManager());\n      }\n\n      return this.eventHandlers.get(name).add(handler);\n    }\n\n    notifyListeners(name) {\n      const subscriptionManager = this.eventHandlers.get(name);\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n    }\n\n    hasListeners(name) {\n      return this.eventHandlers.has(name);\n    }\n\n    registerPotentialNode(id, node) {\n      this.potentialNodes.set(id, node);\n    }\n    /**\n     * Lifecycles\n     */\n\n\n    mount(instance) {\n      let isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var _a;\n\n      if (this.instance) return;\n      this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n      this.instance = instance;\n      const {\n        layoutId,\n        layout,\n        visualElement\n      } = this.options;\n\n      if (visualElement && !visualElement.getInstance()) {\n        visualElement.mount(instance);\n      }\n\n      this.root.nodes.add(this);\n      (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n      this.id && this.root.potentialNodes.delete(this.id);\n\n      if (isLayoutDirty && (layout || layoutId)) {\n        this.isLayoutDirty = true;\n      }\n\n      if (attachResizeListener) {\n        let unblockTimeout;\n\n        const resizeUnblockUpdate = () => this.root.updateBlockedByResize = false;\n\n        attachResizeListener(instance, () => {\n          this.root.updateBlockedByResize = true;\n          clearTimeout(unblockTimeout);\n          unblockTimeout = window.setTimeout(resizeUnblockUpdate, 250);\n\n          if (globalProjectionState.hasAnimatedSinceResize) {\n            globalProjectionState.hasAnimatedSinceResize = false;\n            this.nodes.forEach(finishAnimation);\n          }\n        });\n      }\n\n      if (layoutId) {\n        this.root.registerSharedNode(layoutId, this);\n      } // Only register the handler if it requires layout animation\n\n\n      if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n        this.addEventListener(\"didUpdate\", _ref2 => {\n          let {\n            delta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n            layout: newLayout\n          } = _ref2;\n\n          var _a, _b, _c, _d, _e;\n\n          if (this.isTreeAnimationBlocked()) {\n            this.target = undefined;\n            this.relativeTarget = undefined;\n            return;\n          } // TODO: Check here if an animation exists\n\n\n          const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n          const {\n            onLayoutAnimationStart,\n            onLayoutAnimationComplete\n          } = visualElement.getProps();\n          /**\n           * The target layout of the element might stay the same,\n           * but its position relative to its parent has changed.\n           */\n\n          const targetChanged = !this.targetLayout || !boxEquals(this.targetLayout, newLayout) || hasRelativeTargetChanged;\n          /**\n           * If the layout hasn't seemed to have changed, it might be that the\n           * element is visually in the same place in the document but its position\n           * relative to its parent has indeed changed. So here we check for that.\n           */\n\n          const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n\n          if (((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !this.currentAnimation)) {\n            if (this.resumeFrom) {\n              this.resumingFrom = this.resumeFrom;\n              this.resumingFrom.resumingFrom = undefined;\n            }\n\n            this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n            const animationOptions = { ...getValueTransition(layoutTransition, \"layout\"),\n              onPlay: onLayoutAnimationStart,\n              onComplete: onLayoutAnimationComplete\n            };\n\n            if (visualElement.shouldReduceMotion) {\n              animationOptions.delay = 0;\n              animationOptions.type = false;\n            }\n\n            this.startAnimation(animationOptions);\n          } else {\n            /**\n             * If the layout hasn't changed and we have an animation that hasn't started yet,\n             * finish it immediately. Otherwise it will be animating from a location\n             * that was probably never commited to screen and look like a jumpy box.\n             */\n            if (!hasLayoutChanged && this.animationProgress === 0) {\n              this.finishAnimation();\n            }\n\n            this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n          }\n\n          this.targetLayout = newLayout;\n        });\n      }\n    }\n\n    unmount() {\n      var _a, _b;\n\n      this.options.layoutId && this.willUpdate();\n      this.root.nodes.remove(this);\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n      (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n      this.instance = undefined;\n      cancelSync.preRender(this.updateProjection);\n    } // only on the root\n\n\n    blockUpdate() {\n      this.updateManuallyBlocked = true;\n    }\n\n    unblockUpdate() {\n      this.updateManuallyBlocked = false;\n    }\n\n    isUpdateBlocked() {\n      return this.updateManuallyBlocked || this.updateBlockedByResize;\n    }\n\n    isTreeAnimationBlocked() {\n      var _a;\n\n      return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n    } // Note: currently only running on root node\n\n\n    startUpdate() {\n      var _a;\n\n      if (this.isUpdateBlocked()) return;\n      this.isUpdating = true;\n      (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n    }\n\n    willUpdate() {\n      let shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var _a, _b, _c;\n\n      if (this.root.isUpdateBlocked()) {\n        (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n        return;\n      }\n\n      !this.root.isUpdating && this.root.startUpdate();\n      if (this.isLayoutDirty) return;\n      this.isLayoutDirty = true;\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        node.shouldResetTransform = true;\n        /**\n         * TODO: Check we haven't updated the scroll\n         * since the last didUpdate\n         */\n\n        node.updateScroll();\n      }\n\n      const {\n        layoutId,\n        layout\n      } = this.options;\n      if (layoutId === undefined && !layout) return;\n      const transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n      this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n      this.updateSnapshot();\n      shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n    } // Note: Currently only running on root node\n\n\n    didUpdate() {\n      const updateWasBlocked = this.isUpdateBlocked(); // When doing an instant transition, we skip the layout update,\n      // but should still clean up the measurements so that the next\n      // snapshot could be taken correctly.\n\n      if (updateWasBlocked) {\n        this.unblockUpdate();\n        this.clearAllSnapshots();\n        this.nodes.forEach(clearMeasurements);\n        return;\n      }\n\n      if (!this.isUpdating) return;\n      this.isUpdating = false;\n      /**\n       * Search for and mount newly-added projection elements.\n       *\n       * TODO: Every time a new component is rendered we could search up the tree for\n       * the closest mounted node and query from there rather than document.\n       */\n\n      if (this.potentialNodes.size) {\n        this.potentialNodes.forEach(mountNodeEarly);\n        this.potentialNodes.clear();\n      }\n      /**\n       * Write\n       */\n\n\n      this.nodes.forEach(resetTransformStyle);\n      /**\n       * Read ==================\n       */\n      // Update layout measurements of updated children\n\n      this.nodes.forEach(updateLayout);\n      /**\n       * Write\n       */\n      // Notify listeners that the layout is updated\n\n      this.nodes.forEach(notifyLayoutUpdate);\n      this.clearAllSnapshots(); // Flush any scheduled updates\n\n      flushSync.update();\n      flushSync.preRender();\n      flushSync.render();\n    }\n\n    clearAllSnapshots() {\n      this.nodes.forEach(clearSnapshot);\n      this.sharedNodes.forEach(removeLeadSnapshots);\n    }\n\n    scheduleUpdateProjection() {\n      sync.preRender(this.updateProjection, false, true);\n    }\n\n    scheduleCheckAfterUnmount() {\n      /**\n       * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n       * we manually call didUpdate to give a chance to the siblings to animate.\n       * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n       */\n      sync.postRender(() => {\n        if (this.isLayoutDirty) {\n          this.root.didUpdate();\n        } else {\n          this.root.checkUpdateFailed();\n        }\n      });\n    }\n    /**\n     * Update measurements\n     */\n\n\n    updateSnapshot() {\n      if (this.snapshot || !this.instance) return;\n      const measured = this.measure();\n      const layout = this.removeTransform(this.removeElementScroll(measured));\n      roundBox(layout);\n      this.snapshot = {\n        measured,\n        layout,\n        latestValues: {}\n      };\n    }\n\n    updateLayout() {\n      var _a;\n\n      if (!this.instance) return; // TODO: Incorporate into a forwarded scroll offset\n\n      this.updateScroll();\n\n      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n        return;\n      }\n      /**\n       * When a node is mounted, it simply resumes from the prevLead's\n       * snapshot instead of taking a new one, but the ancestors scroll\n       * might have updated while the prevLead is unmounted. We need to\n       * update the scroll again to make sure the layout we measure is\n       * up to date.\n       */\n\n\n      if (this.resumeFrom && !this.resumeFrom.instance) {\n        for (let i = 0; i < this.path.length; i++) {\n          const node = this.path[i];\n          node.updateScroll();\n        }\n      }\n\n      const measured = this.measure();\n      roundBox(measured);\n      const prevLayout = this.layout;\n      this.layout = {\n        measured,\n        actual: this.removeElementScroll(measured)\n      };\n      this.layoutCorrected = createBox();\n      this.isLayoutDirty = false;\n      this.projectionDelta = undefined;\n      this.notifyListeners(\"measure\", this.layout.actual);\n      (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n    }\n\n    updateScroll() {\n      if (this.options.layoutScroll && this.instance) {\n        this.isScrollRoot = checkIsScrollRoot(this.instance);\n        this.scroll = measureScroll(this.instance);\n      }\n    }\n\n    resetTransform() {\n      var _a;\n\n      if (!resetTransform) return;\n      const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n      const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n      const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n      const transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n      const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n\n      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n        resetTransform(this.instance, transformTemplateValue);\n        this.shouldResetTransform = false;\n        this.scheduleRender();\n      }\n    }\n\n    measure() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return createBox();\n      const box = visualElement.measureViewportBox(); // Remove viewport scroll to give page-relative coordinates\n\n      const {\n        scroll\n      } = this.root;\n\n      if (scroll) {\n        translateAxis(box.x, scroll.x);\n        translateAxis(box.y, scroll.y);\n      }\n\n      return box;\n    }\n\n    removeElementScroll(box) {\n      const boxWithoutScroll = createBox();\n      copyBoxInto(boxWithoutScroll, box);\n      /**\n       * Performance TODO: Keep a cumulative scroll offset down the tree\n       * rather than loop back up the path.\n       */\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        const {\n          scroll,\n          options,\n          isScrollRoot\n        } = node;\n\n        if (node !== this.root && scroll && options.layoutScroll) {\n          /**\n           * If this is a new scroll root, we want to remove all previous scrolls\n           * from the viewport box.\n           */\n          if (isScrollRoot) {\n            copyBoxInto(boxWithoutScroll, box);\n            const {\n              scroll: rootScroll\n            } = this.root;\n            /**\n             * Undo the application of page scroll that was originally added\n             * to the measured bounding box.\n             */\n\n            if (rootScroll) {\n              translateAxis(boxWithoutScroll.x, -rootScroll.x);\n              translateAxis(boxWithoutScroll.y, -rootScroll.y);\n            }\n          }\n\n          translateAxis(boxWithoutScroll.x, scroll.x);\n          translateAxis(boxWithoutScroll.y, scroll.y);\n        }\n      }\n\n      return boxWithoutScroll;\n    }\n\n    applyTransform(box) {\n      let transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      const withTransforms = createBox();\n      copyBoxInto(withTransforms, box);\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n\n        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n          transformBox(withTransforms, {\n            x: -node.scroll.x,\n            y: -node.scroll.y\n          });\n        }\n\n        if (!hasTransform(node.latestValues)) continue;\n        transformBox(withTransforms, node.latestValues);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        transformBox(withTransforms, this.latestValues);\n      }\n\n      return withTransforms;\n    }\n\n    removeTransform(box) {\n      var _a;\n\n      const boxWithoutTransform = createBox();\n      copyBoxInto(boxWithoutTransform, box);\n\n      for (let i = 0; i < this.path.length; i++) {\n        const node = this.path[i];\n        if (!node.instance) continue;\n        if (!hasTransform(node.latestValues)) continue;\n        hasScale(node.latestValues) && node.updateSnapshot();\n        const sourceBox = createBox();\n        const nodeBox = node.measure();\n        copyBoxInto(sourceBox, nodeBox);\n        removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        removeBoxTransforms(boxWithoutTransform, this.latestValues);\n      }\n\n      return boxWithoutTransform;\n    }\n    /**\n     *\n     */\n\n\n    setTargetDelta(delta) {\n      this.targetDelta = delta;\n      this.root.scheduleUpdateProjection();\n    }\n\n    setOptions(options) {\n      this.options = { ...this.options,\n        ...options,\n        crossfade: options.crossfade !== undefined ? options.crossfade : true\n      };\n    }\n\n    clearMeasurements() {\n      this.scroll = undefined;\n      this.layout = undefined;\n      this.snapshot = undefined;\n      this.prevTransformTemplateValue = undefined;\n      this.targetDelta = undefined;\n      this.target = undefined;\n      this.isLayoutDirty = false;\n    }\n    /**\n     * Frame calculations\n     */\n\n\n    resolveTargetDelta() {\n      var _a;\n\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If we have no layout, we can't perform projection, so early return\n       */\n\n      if (!this.layout || !(layout || layoutId)) return;\n      /**\n       * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n       * a relativeParent. This will allow a component to perform scale correction\n       * even if no animation has started.\n       */\n      // TODO If this is unsuccessful this currently happens every frame\n\n      if (!this.targetDelta && !this.relativeTarget) {\n        // TODO: This is a semi-repetition of further down this function, make DRY\n        this.relativeParent = this.getClosestProjectingParent();\n\n        if (this.relativeParent && this.relativeParent.layout) {\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        }\n      }\n      /**\n       * If we have no relative target or no target delta our target isn't valid\n       * for this frame.\n       */\n\n\n      if (!this.relativeTarget && !this.targetDelta) return;\n      /**\n       * Lazy-init target data structure\n       */\n\n      if (!this.target) {\n        this.target = createBox();\n        this.targetWithTransforms = createBox();\n      }\n      /**\n       * If we've got a relative box for this component, resolve it into a target relative to the parent.\n       */\n\n\n      if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n        /**\n         * If we've only got a targetDelta, resolve it into a target\n         */\n      } else if (this.targetDelta) {\n        if (Boolean(this.resumingFrom)) {\n          // TODO: This is creating a new object every frame\n          this.target = this.applyTransform(this.layout.actual);\n        } else {\n          copyBoxInto(this.target, this.layout.actual);\n        }\n\n        applyBoxDelta(this.target, this.targetDelta);\n      } else {\n        /**\n         * If no target, use own layout as target\n         */\n        copyBoxInto(this.target, this.layout.actual);\n      }\n      /**\n       * If we've been told to attempt to resolve a relative target, do so.\n       */\n\n\n      if (this.attemptToResolveRelativeTarget) {\n        this.attemptToResolveRelativeTarget = false;\n        this.relativeParent = this.getClosestProjectingParent();\n\n        if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        }\n      }\n    }\n\n    getClosestProjectingParent() {\n      if (!this.parent || hasTransform(this.parent.latestValues)) return undefined;\n\n      if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {\n        return this.parent;\n      } else {\n        return this.parent.getClosestProjectingParent();\n      }\n    }\n\n    calcProjection() {\n      var _a;\n\n      const {\n        layout,\n        layoutId\n      } = this.options;\n      /**\n       * If this section of the tree isn't animating we can\n       * delete our target sources for the following frame.\n       */\n\n      this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n\n      if (!this.isTreeAnimating) {\n        this.targetDelta = this.relativeTarget = undefined;\n      }\n\n      if (!this.layout || !(layout || layoutId)) return;\n      const lead = this.getLead();\n      /**\n       * Reset the corrected box with the latest values from box, as we're then going\n       * to perform mutative operations on it.\n       */\n\n      copyBoxInto(this.layoutCorrected, this.layout.actual);\n      /**\n       * Apply all the parent deltas to this box to produce the corrected box. This\n       * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n       */\n\n      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n      const {\n        target\n      } = lead;\n      if (!target) return;\n\n      if (!this.projectionDelta) {\n        this.projectionDelta = createDelta();\n        this.projectionDeltaWithTransform = createDelta();\n      }\n\n      const prevTreeScaleX = this.treeScale.x;\n      const prevTreeScaleY = this.treeScale.y;\n      const prevProjectionTransform = this.projectionTransform;\n      /**\n       * Update the delta between the corrected box and the target box before user-set transforms were applied.\n       * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n       * for our layout reprojection, but still allow them to be scaled correctly by the user.\n       * It might be that to simplify this we may want to accept that user-set scale is also corrected\n       * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n       * to allow people to choose whether these styles are corrected based on just the\n       * layout reprojection or the final bounding box.\n       */\n\n      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n\n      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n        this.hasProjected = true;\n        this.scheduleRender();\n        this.notifyListeners(\"projectionUpdate\", target);\n      }\n    }\n\n    hide() {\n      this.isVisible = false; // TODO: Schedule render\n    }\n\n    show() {\n      this.isVisible = true; // TODO: Schedule render\n    }\n\n    scheduleRender() {\n      let notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n      var _a, _b, _c;\n\n      (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n      notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n\n      if (this.resumingFrom && !this.resumingFrom.instance) {\n        this.resumingFrom = undefined;\n      }\n    }\n\n    setAnimationOrigin(delta) {\n      let hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var _a;\n\n      const snapshot = this.snapshot;\n      const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n      const mixedValues = { ...this.latestValues\n      };\n      const targetDelta = createDelta();\n      this.relativeTarget = this.relativeTargetOrigin = undefined;\n      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n      const relativeLayout = createBox();\n      const isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n      const isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n      const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n      this.animationProgress = 0;\n\n      this.mixTargetDelta = latest => {\n        var _a;\n\n        const progress = latest / 1000;\n        mixAxisDelta(targetDelta.x, delta.x, progress);\n        mixAxisDelta(targetDelta.y, delta.y, progress);\n        this.setTargetDelta(targetDelta);\n\n        if (this.relativeTarget && this.relativeTargetOrigin && this.layout && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n          calcRelativePosition(relativeLayout, this.layout.actual, this.relativeParent.layout.actual);\n          mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n        }\n\n        if (isSharedLayoutAnimation) {\n          this.animationValues = mixedValues;\n          mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n        }\n\n        this.root.scheduleUpdateProjection();\n        this.scheduleRender();\n        this.animationProgress = progress;\n      };\n\n      this.mixTargetDelta(0);\n    }\n\n    startAnimation(options) {\n      var _a, _b;\n\n      this.notifyListeners(\"animationStart\");\n      (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n\n      if (this.resumingFrom) {\n        (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n      }\n\n      if (this.pendingAnimation) {\n        cancelSync.update(this.pendingAnimation);\n        this.pendingAnimation = undefined;\n      }\n      /**\n       * Start the animation in the next frame to have a frame with progress 0,\n       * where the target is the same as when the animation started, so we can\n       * calculate the relative positions correctly for instant transitions.\n       */\n\n\n      this.pendingAnimation = sync.update(() => {\n        globalProjectionState.hasAnimatedSinceResize = true;\n        this.currentAnimation = animate(0, animationTarget, { ...options,\n          onUpdate: latest => {\n            var _a;\n\n            this.mixTargetDelta(latest);\n            (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n          },\n          onComplete: () => {\n            var _a;\n\n            (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n            this.completeAnimation();\n          }\n        });\n\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = this.currentAnimation;\n        }\n\n        this.pendingAnimation = undefined;\n      });\n    }\n\n    completeAnimation() {\n      var _a;\n\n      if (this.resumingFrom) {\n        this.resumingFrom.currentAnimation = undefined;\n        this.resumingFrom.preserveOpacity = undefined;\n      }\n\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n      this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n      this.notifyListeners(\"animationComplete\");\n    }\n\n    finishAnimation() {\n      var _a;\n\n      if (this.currentAnimation) {\n        (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n        this.currentAnimation.stop();\n      }\n\n      this.completeAnimation();\n    }\n\n    applyTransformsToTarget() {\n      const {\n        targetWithTransforms,\n        target,\n        layout,\n        latestValues\n      } = this.getLead();\n      if (!targetWithTransforms || !target || !layout) return;\n      copyBoxInto(targetWithTransforms, target);\n      /**\n       * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n       * This is the final box that we will then project into by calculating a transform delta and\n       * applying it to the corrected box.\n       */\n\n      transformBox(targetWithTransforms, latestValues);\n      /**\n       * Update the delta between the corrected box and the final target box, after\n       * user-set transforms are applied to it. This will be used by the renderer to\n       * create a transform style that will reproject the element from its actual layout\n       * into the desired bounding box.\n       */\n\n      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n    }\n\n    registerSharedNode(layoutId, node) {\n      var _a, _b, _c;\n\n      if (!this.sharedNodes.has(layoutId)) {\n        this.sharedNodes.set(layoutId, new NodeStack());\n      }\n\n      const stack = this.sharedNodes.get(layoutId);\n      stack.add(node);\n      node.promote({\n        transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n        preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n      });\n    }\n\n    isLead() {\n      const stack = this.getStack();\n      return stack ? stack.lead === this : true;\n    }\n\n    getLead() {\n      var _a;\n\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n    }\n\n    getPrevLead() {\n      var _a;\n\n      const {\n        layoutId\n      } = this.options;\n      return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n    }\n\n    getStack() {\n      const {\n        layoutId\n      } = this.options;\n      if (layoutId) return this.root.sharedNodes.get(layoutId);\n    }\n\n    promote() {\n      let {\n        needsReset,\n        transition,\n        preserveFollowOpacity\n      } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      const stack = this.getStack();\n      if (stack) stack.promote(this, preserveFollowOpacity);\n\n      if (needsReset) {\n        this.projectionDelta = undefined;\n        this.needsReset = true;\n      }\n\n      if (transition) this.setOptions({\n        transition\n      });\n    }\n\n    relegate() {\n      const stack = this.getStack();\n\n      if (stack) {\n        return stack.relegate(this);\n      } else {\n        return false;\n      }\n    }\n\n    resetRotation() {\n      const {\n        visualElement\n      } = this.options;\n      if (!visualElement) return; // If there's no detected rotation values, we can early return without a forced render.\n\n      let hasRotate = false; // Keep a record of all the values we've reset\n\n      const resetValues = {}; // Check the rotate value of all axes and reset to 0\n\n      for (let i = 0; i < transformAxes.length; i++) {\n        const axis = transformAxes[i];\n        const key = \"rotate\" + axis; // If this rotation doesn't exist as a motion value, then we don't\n        // need to reset it\n\n        if (!visualElement.getStaticValue(key)) {\n          continue;\n        }\n\n        hasRotate = true; // Record the rotation and then temporarily set it to 0\n\n        resetValues[key] = visualElement.getStaticValue(key);\n        visualElement.setStaticValue(key, 0);\n      } // If there's no rotation values, we don't need to do any more.\n\n\n      if (!hasRotate) return; // Force a render of this element to apply the transform with all rotations\n      // set to 0.\n\n      visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender(); // Put back all the values we reset\n\n      for (const key in resetValues) {\n        visualElement.setStaticValue(key, resetValues[key]);\n      } // Schedule a render for the next frame. This ensures we won't visually\n      // see the element with the reset rotate value applied.\n\n\n      visualElement.scheduleRender();\n    }\n\n    getProjectionStyles() {\n      let styleProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _a, _b, _c; // TODO: Return lifecycle-persistent object\n\n\n      const styles = {};\n      if (!this.instance || this.isSVG) return styles;\n\n      if (!this.isVisible) {\n        return {\n          visibility: \"hidden\"\n        };\n      } else {\n        styles.visibility = \"\";\n      }\n\n      const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n\n      if (this.needsReset) {\n        this.needsReset = false;\n        styles.opacity = \"\";\n        styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n        return styles;\n      }\n\n      const lead = this.getLead();\n\n      if (!this.projectionDelta || !this.layout || !lead.target) {\n        const emptyStyles = {};\n\n        if (this.options.layoutId) {\n          emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n          emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        }\n\n        if (this.hasProjected && !hasTransform(this.latestValues)) {\n          emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n          this.hasProjected = false;\n        }\n\n        return emptyStyles;\n      }\n\n      const valuesToRender = lead.animationValues || lead.latestValues;\n      this.applyTransformsToTarget();\n      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n\n      if (transformTemplate) {\n        styles.transform = transformTemplate(valuesToRender, styles.transform);\n      }\n\n      const {\n        x,\n        y\n      } = this.projectionDelta;\n      styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n\n      if (lead.animationValues) {\n        /**\n         * If the lead component is animating, assign this either the entering/leaving\n         * opacity\n         */\n        styles.opacity = lead === this ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n      } else {\n        /**\n         * Or we're not animating at all, set the lead component to its actual\n         * opacity and other components to hidden.\n         */\n        styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n      }\n      /**\n       * Apply scale correction\n       */\n\n\n      for (const key in scaleCorrectors) {\n        if (valuesToRender[key] === undefined) continue;\n        const {\n          correct,\n          applyTo\n        } = scaleCorrectors[key];\n        const corrected = correct(valuesToRender[key], lead);\n\n        if (applyTo) {\n          const num = applyTo.length;\n\n          for (let i = 0; i < num; i++) {\n            styles[applyTo[i]] = corrected;\n          }\n        } else {\n          styles[key] = corrected;\n        }\n      }\n      /**\n       * Disable pointer events on follow components. This is to ensure\n       * that if a follow component covers a lead component it doesn't block\n       * pointer events on the lead.\n       */\n\n\n      if (this.options.layoutId) {\n        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n      }\n\n      return styles;\n    }\n\n    clearSnapshot() {\n      this.resumeFrom = this.snapshot = undefined;\n    } // Only run on root\n\n\n    resetTree() {\n      this.root.nodes.forEach(node => {\n        var _a;\n\n        return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      });\n      this.root.nodes.forEach(clearMeasurements);\n      this.root.sharedNodes.clear();\n    }\n\n  };\n}\n\nfunction updateLayout(node) {\n  node.updateLayout();\n}\n\nfunction notifyLayoutUpdate(node) {\n  var _a, _b, _c;\n\n  const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    const {\n      actual: layout,\n      measured: measuredLayout\n    } = node.layout; // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n\n    if (node.options.animationType === \"size\") {\n      eachAxis(axis => {\n        const axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        const length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (node.options.animationType === \"position\") {\n      eachAxis(axis => {\n        const axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        const length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n\n    const layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layout);\n    const visualDelta = createDelta();\n\n    if (snapshot.isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layout);\n    }\n\n    const hasLayoutChanged = !isDeltaZero(layoutDelta);\n    let hasRelativeTargetChanged = false;\n\n    if (!node.resumeFrom) {\n      node.relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n\n      if (node.relativeParent && !node.relativeParent.resumeFrom) {\n        const {\n          snapshot: parentSnapshot,\n          layout: parentLayout\n        } = node.relativeParent;\n\n        if (parentSnapshot && parentLayout) {\n          const relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n          const relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.actual);\n\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n        }\n      }\n    }\n\n    node.notifyListeners(\"didUpdate\", {\n      layout,\n      snapshot,\n      delta: visualDelta,\n      layoutDelta,\n      hasLayoutChanged,\n      hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n\n\n  node.options.transition = undefined;\n}\n\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\n\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\n\nfunction resetTransformStyle(node) {\n  const {\n    visualElement\n  } = node.options;\n\n  if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notifyBeforeLayoutMeasure();\n  }\n\n  node.resetTransform();\n}\n\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\n\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\n\nfunction calcProjection(node) {\n  node.calcProjection();\n}\n\nfunction resetRotation(node) {\n  node.resetRotation();\n}\n\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\n\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\n\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\n\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\n\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\n\nconst defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\n\nfunction mountNodeEarly(node, id) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  let searchNode = node.root;\n\n  for (let i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n\n  const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  const element = searchElement.querySelector(`[data-projection-id=\"${id}\"]`);\n  if (element) node.mount(element, true);\n}\n\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\n\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"names":["sync","cancelSync","flushSync","mix","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","FlatTree","resolveMotionValue","globalProjectionState","transformAxes","animationTarget","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","constructor","id","latestValues","parent","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","length","addEventListener","name","handler","has","set","get","add","notifyListeners","subscriptionManager","args","notify","hasListeners","node","mount","instance","_a","SVGElement","tagName","layoutId","layout","visualElement","getInstance","delete","unblockTimeout","resizeUnblockUpdate","clearTimeout","window","setTimeout","hasAnimatedSinceResize","finishAnimation","registerSharedNode","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","_b","_c","_d","_e","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","onLayoutAnimationStart","onLayoutAnimationComplete","getProps","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","delay","type","startAnimation","isLead","onExitComplete","call","unmount","willUpdate","remove","getStack","preRender","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","shouldNotifyListeners","updateScroll","transformTemplate","prevTransformTemplateValue","updateSnapshot","didUpdate","updateWasBlocked","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measured","measure","removeTransform","removeElementScroll","roundBox","alwaysMeasureLayout","prevLayout","actual","layoutCorrected","projectionDelta","notifyLayoutMeasure","layoutScroll","isScrollRoot","scroll","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","box","measureViewportBox","boxWithoutScroll","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","Boolean","attemptToResolveRelativeTarget","pendingAnimation","lead","getLead","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","hide","show","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isShared","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","stack","promote","initialPromotionConfig","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasRotate","resetValues","axis","key","getStaticValue","setStaticValue","syncRender","getProjectionStyles","styleProp","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","transformOrigin","origin","opacityExit","correct","applyTo","corrected","num","resetTree","measuredLayout","animationType","axisSnapshot","min","max","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","notifyBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"mappings":"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","sourcesContent":["import sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(id, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to actually\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            this.updateProjection = () => {\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.id = id;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            id && this.root.registerPotentialNode(id, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(id, node) {\n            this.potentialNodes.set(id, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            var _a;\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.getInstance()) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.id && this.root.potentialNodes.delete(this.id);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let unblockTimeout;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    clearTimeout(unblockTimeout);\n                    unblockTimeout = window.setTimeout(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    var _a, _b, _c, _d, _e;\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            this.finishAnimation();\n                        }\n                        this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            var _a, _b, _c;\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                /**\n                 * TODO: Check we haven't updated the scroll\n                 * since the last didUpdate\n                 */\n                node.updateScroll();\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            const measured = this.measure();\n            const layout = this.removeTransform(this.removeElementScroll(measured));\n            roundBox(layout);\n            this.snapshot = {\n                measured,\n                layout,\n                latestValues: {},\n            };\n        }\n        updateLayout() {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const measured = this.measure();\n            roundBox(measured);\n            const prevLayout = this.layout;\n            this.layout = {\n                measured,\n                actual: this.removeElementScroll(measured),\n            };\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.actual);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n        }\n        updateScroll() {\n            if (this.options.layoutScroll && this.instance) {\n                this.isScrollRoot = checkIsScrollRoot(this.instance);\n                this.scroll = measureScroll(this.instance);\n            }\n        }\n        resetTransform() {\n            var _a;\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            const transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.x);\n                translateAxis(box.y, scroll.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options, isScrollRoot } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (isScrollRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.x);\n                    translateAxis(boxWithoutScroll.y, scroll.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.x,\n                        y: -node.scroll.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            var _a;\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measure();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        /**\n         *\n         */\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        /**\n         * Frame calculations\n         */\n        resolveTargetDelta() {\n            var _a;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent && this.relativeParent.layout) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.actual);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.actual);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.actual);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent &&\n                    Boolean(this.relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !this.relativeParent.options.layoutScroll &&\n                    this.relativeParent.target) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent || hasTransform(this.parent.latestValues))\n                return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        calcProjection() {\n            var _a;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            const lead = this.getLead();\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.actual);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a, _b, _c;\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            var _a;\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n            const isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = (latest) => {\n                var _a;\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, this.layout.actual, this.relativeParent.layout.actual);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(0);\n        }\n        startAnimation(options) {\n            var _a, _b;\n            this.notifyListeners(\"animationStart\");\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animate(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        var _a;\n                        this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    },\n                    onComplete: () => {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const { targetWithTransforms, target, layout, latestValues } = this.getLead();\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its actual layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            // Keep a record of all the values we've reset\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const axis = transformAxes[i];\n                const key = \"rotate\" + axis;\n                // If this rotation doesn't exist as a motion value, then we don't\n                // need to reset it\n                if (!visualElement.getStaticValue(key)) {\n                    continue;\n                }\n                hasRotate = true;\n                // Record the rotation and then temporarily set it to 0\n                resetValues[key] = visualElement.getStaticValue(key);\n                visualElement.setStaticValue(key, 0);\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b, _c;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its actual\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                const corrected = correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { actual: layout, measured: measuredLayout } = node.layout;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (node.options.animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (node.options.animationType === \"position\") {\n            eachAxis((axis) => {\n                const axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layout);\n        const visualDelta = createDelta();\n        if (snapshot.isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layout);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            node.relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (node.relativeParent && !node.relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = node.relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.actual);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notifyBeforeLayoutMeasure();\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, id) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${id}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };\n"]},"metadata":{},"sourceType":"module"}