{"ast":null,"code":"import { useEffect } from 'react';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\n/**\n * A hook that allows an element to be dragged.\n *\n * @internal\n */\n\nfunction useDrag(props) {\n  const {\n    dragControls: groupDragControls,\n    visualElement\n  } = props;\n  const dragControls = useConstant(() => new VisualElementDragControls(visualElement)); // If we've been provided a DragControls for manual control over the drag gesture,\n  // subscribe this component to it on mount.\n\n  useEffect(() => groupDragControls && groupDragControls.subscribe(dragControls), [dragControls, groupDragControls]); // Apply the event listeners to the element\n\n  useEffect(() => dragControls.addListeners(), [dragControls]);\n}\n\nexport { useDrag };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/gestures/drag/use-drag.mjs"],"names":["useEffect","VisualElementDragControls","useConstant","useDrag","props","dragControls","groupDragControls","visualElement","subscribe","addListeners"],"mappings":"AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,SAASC,yBAAT,QAA0C,iCAA1C;AACA,SAASC,WAAT,QAA4B,8BAA5B;AAEA;AACA;AACA;AACA;AACA;;AACA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACpB,QAAM;AAAEC,IAAAA,YAAY,EAAEC,iBAAhB;AAAmCC,IAAAA;AAAnC,MAAqDH,KAA3D;AACA,QAAMC,YAAY,GAAGH,WAAW,CAAC,MAAM,IAAID,yBAAJ,CAA8BM,aAA9B,CAAP,CAAhC,CAFoB,CAGpB;AACA;;AACAP,EAAAA,SAAS,CAAC,MAAMM,iBAAiB,IAAIA,iBAAiB,CAACE,SAAlB,CAA4BH,YAA5B,CAA5B,EAAuE,CAACA,YAAD,EAAeC,iBAAf,CAAvE,CAAT,CALoB,CAMpB;;AACAN,EAAAA,SAAS,CAAC,MAAMK,YAAY,CAACI,YAAb,EAAP,EAAoC,CAACJ,YAAD,CAApC,CAAT;AACH;;AAED,SAASF,OAAT","sourcesContent":["import { useEffect } from 'react';\nimport { VisualElementDragControls } from './VisualElementDragControls.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\n\n/**\n * A hook that allows an element to be dragged.\n *\n * @internal\n */\nfunction useDrag(props) {\n    const { dragControls: groupDragControls, visualElement } = props;\n    const dragControls = useConstant(() => new VisualElementDragControls(visualElement));\n    // If we've been provided a DragControls for manual control over the drag gesture,\n    // subscribe this component to it on mount.\n    useEffect(() => groupDragControls && groupDragControls.subscribe(dragControls), [dragControls, groupDragControls]);\n    // Apply the event listeners to the element\n    useEffect(() => dragControls.addListeners(), [dragControls]);\n}\n\nexport { useDrag };\n"]},"metadata":{},"sourceType":"module"}