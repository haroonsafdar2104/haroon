{"ast":null,"code":"import { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleAsyncIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n\n  return new Observable(function (subscriber) {\n    executeSchedule(subscriber, scheduler, function () {\n      var iterator = input[Symbol.asyncIterator]();\n      executeSchedule(subscriber, scheduler, function () {\n        iterator.next().then(function (result) {\n          if (result.done) {\n            subscriber.complete();\n          } else {\n            subscriber.next(result.value);\n          }\n        });\n      }, 0, true);\n    });\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,eAAT,QAAgC,yBAAhC;AAEA,OAAM,SAAUC,qBAAV,CAAmCC,KAAnC,EAA4DC,SAA5D,EAAoF;AACxF,MAAI,CAACD,KAAL,EAAY;AACV,UAAM,IAAIE,KAAJ,CAAU,yBAAV,CAAN;AACD;;AACD,SAAO,IAAIL,UAAJ,CAAkB,UAACM,UAAD,EAAW;AAClCL,mBAAe,CAACK,UAAD,EAAaF,SAAb,EAAwB;AACrC,UAAMG,QAAQ,GAAGJ,KAAK,CAACK,MAAM,CAACC,aAAR,CAAL,EAAjB;AACAR,qBAAe,CACbK,UADa,EAEbF,SAFa,EAGb;AACEG,gBAAQ,CAACG,IAAT,GAAgBC,IAAhB,CAAqB,UAACC,MAAD,EAAO;AAC1B,cAAIA,MAAM,CAACC,IAAX,EAAiB;AAGfP,sBAAU,CAACQ,QAAX;AACD,WAJD,MAIO;AACLR,sBAAU,CAACI,IAAX,CAAgBE,MAAM,CAACG,KAAvB;AACD;AACF,SARD;AASD,OAbY,EAcb,CAda,EAeb,IAfa,CAAf;AAiBD,KAnBc,CAAf;AAoBD,GArBM,CAAP;AAsBD","names":["Observable","executeSchedule","scheduleAsyncIterable","input","scheduler","Error","subscriber","iterator","Symbol","asyncIterator","next","then","result","done","complete","value"],"sources":["C:\\Users\\Admin\\Downloads\\portpoliopro-main\\client\\node_modules\\rxjs\\src\\internal\\scheduled\\scheduleAsyncIterable.ts"],"sourcesContent":["import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { executeSchedule } from '../util/executeSchedule';\n\nexport function scheduleAsyncIterable<T>(input: AsyncIterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>((subscriber) => {\n    executeSchedule(subscriber, scheduler, () => {\n      const iterator = input[Symbol.asyncIterator]();\n      executeSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          iterator.next().then((result) => {\n            if (result.done) {\n              // This will remove the subscriptions from\n              // the parent subscription.\n              subscriber.complete();\n            } else {\n              subscriber.next(result.value);\n            }\n          });\n        },\n        0,\n        true\n      );\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}