{"ast":null,"code":"import { getWindow } from 'ssr-window';\nexport default function getBreakpoint(breakpoints, base, containerEl) {\n  if (base === void 0) {\n    base = 'window';\n  }\n\n  if (!breakpoints || base === 'container' && !containerEl) return undefined;\n  let breakpoint = false;\n  const window = getWindow();\n  const currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;\n  const points = Object.keys(breakpoints).map(point => {\n    if (typeof point === 'string' && point.indexOf('@') === 0) {\n      const minRatio = parseFloat(point.substr(1));\n      const value = currentHeight * minRatio;\n      return {\n        value,\n        point\n      };\n    }\n\n    return {\n      value: point,\n      point\n    };\n  });\n  points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));\n\n  for (let i = 0; i < points.length; i += 1) {\n    const {\n      point,\n      value\n    } = points[i];\n\n    if (base === 'window') {\n      if (window.matchMedia(`(min-width: ${value}px)`).matches) {\n        breakpoint = point;\n      }\n    } else if (value <= containerEl.clientWidth) {\n      breakpoint = point;\n    }\n  }\n\n  return breakpoint || 'max';\n}","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/swiper/core/breakpoints/getBreakpoint.js"],"names":["getWindow","getBreakpoint","breakpoints","base","containerEl","undefined","breakpoint","window","currentHeight","innerHeight","clientHeight","points","Object","keys","map","point","indexOf","minRatio","parseFloat","substr","value","sort","a","b","parseInt","i","length","matchMedia","matches","clientWidth"],"mappings":"AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,eAAe,SAASC,aAAT,CAAuBC,WAAvB,EAAoCC,IAApC,EAA0CC,WAA1C,EAAuD;AACpE,MAAID,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnBA,IAAAA,IAAI,GAAG,QAAP;AACD;;AAED,MAAI,CAACD,WAAD,IAAgBC,IAAI,KAAK,WAAT,IAAwB,CAACC,WAA7C,EAA0D,OAAOC,SAAP;AAC1D,MAAIC,UAAU,GAAG,KAAjB;AACA,QAAMC,MAAM,GAAGP,SAAS,EAAxB;AACA,QAAMQ,aAAa,GAAGL,IAAI,KAAK,QAAT,GAAoBI,MAAM,CAACE,WAA3B,GAAyCL,WAAW,CAACM,YAA3E;AACA,QAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYX,WAAZ,EAAyBY,GAAzB,CAA6BC,KAAK,IAAI;AACnD,QAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,OAAN,CAAc,GAAd,MAAuB,CAAxD,EAA2D;AACzD,YAAMC,QAAQ,GAAGC,UAAU,CAACH,KAAK,CAACI,MAAN,CAAa,CAAb,CAAD,CAA3B;AACA,YAAMC,KAAK,GAAGZ,aAAa,GAAGS,QAA9B;AACA,aAAO;AACLG,QAAAA,KADK;AAELL,QAAAA;AAFK,OAAP;AAID;;AAED,WAAO;AACLK,MAAAA,KAAK,EAAEL,KADF;AAELA,MAAAA;AAFK,KAAP;AAID,GAdc,CAAf;AAeAJ,EAAAA,MAAM,CAACU,IAAP,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAUC,QAAQ,CAACF,CAAC,CAACF,KAAH,EAAU,EAAV,CAAR,GAAwBI,QAAQ,CAACD,CAAC,CAACH,KAAH,EAAU,EAAV,CAAtD;;AAEA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,MAAM,CAACe,MAA3B,EAAmCD,CAAC,IAAI,CAAxC,EAA2C;AACzC,UAAM;AACJV,MAAAA,KADI;AAEJK,MAAAA;AAFI,QAGFT,MAAM,CAACc,CAAD,CAHV;;AAKA,QAAItB,IAAI,KAAK,QAAb,EAAuB;AACrB,UAAII,MAAM,CAACoB,UAAP,CAAmB,eAAcP,KAAM,KAAvC,EAA6CQ,OAAjD,EAA0D;AACxDtB,QAAAA,UAAU,GAAGS,KAAb;AACD;AACF,KAJD,MAIO,IAAIK,KAAK,IAAIhB,WAAW,CAACyB,WAAzB,EAAsC;AAC3CvB,MAAAA,UAAU,GAAGS,KAAb;AACD;AACF;;AAED,SAAOT,UAAU,IAAI,KAArB;AACD","sourcesContent":["import { getWindow } from 'ssr-window';\nexport default function getBreakpoint(breakpoints, base, containerEl) {\n  if (base === void 0) {\n    base = 'window';\n  }\n\n  if (!breakpoints || base === 'container' && !containerEl) return undefined;\n  let breakpoint = false;\n  const window = getWindow();\n  const currentHeight = base === 'window' ? window.innerHeight : containerEl.clientHeight;\n  const points = Object.keys(breakpoints).map(point => {\n    if (typeof point === 'string' && point.indexOf('@') === 0) {\n      const minRatio = parseFloat(point.substr(1));\n      const value = currentHeight * minRatio;\n      return {\n        value,\n        point\n      };\n    }\n\n    return {\n      value: point,\n      point\n    };\n  });\n  points.sort((a, b) => parseInt(a.value, 10) - parseInt(b.value, 10));\n\n  for (let i = 0; i < points.length; i += 1) {\n    const {\n      point,\n      value\n    } = points[i];\n\n    if (base === 'window') {\n      if (window.matchMedia(`(min-width: ${value}px)`).matches) {\n        breakpoint = point;\n      }\n    } else if (value <= containerEl.clientWidth) {\n      breakpoint = point;\n    }\n  }\n\n  return breakpoint || 'max';\n}"]},"metadata":{},"sourceType":"module"}