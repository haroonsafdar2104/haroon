{"ast":null,"code":"import { __rest } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { isString, defaults, isEasingGenerator, defaultOffset, fillOffset, progress } from '@motionone/utils';\nimport { resolveOption } from '../utils/stagger.es.js';\nimport { animateStyle } from '../animate/animate-style.es.js';\nimport { withControls } from '../animate/utils/controls.es.js';\nimport { keyframesList } from '../animate/utils/keyframes.es.js';\nimport { getOptions } from '../animate/utils/options.es.js';\nimport { resolveElements } from '../utils/resolve-elements.es.js';\nimport { isTransform } from '../animate/utils/transforms.es.js';\nimport { calcNextTime } from './utils/calc-time.es.js';\nimport { addKeyframes } from './utils/edit.es.js';\nimport { compareByTime } from './utils/sort.es.js';\n\nfunction timeline(definition) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _a;\n\n  const animationDefinitions = createAnimationsFromTimeline(definition, options);\n  /**\n   * Create and start animations\n   */\n\n  const animationFactories = animationDefinitions.map(definition => animateStyle(...definition)).filter(Boolean);\n  return withControls(animationFactories, options, // Get the duration from the first animation definition\n  (_a = animationDefinitions[0]) === null || _a === void 0 ? void 0 : _a[3].duration);\n}\n\nfunction createAnimationsFromTimeline(definition) {\n  let _a = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var {\n    defaultOptions = {}\n  } = _a,\n      timelineOptions = __rest(_a, [\"defaultOptions\"]);\n\n  const animationDefinitions = [];\n  const elementSequences = new Map();\n  const elementCache = {};\n  const timeLabels = new Map();\n  let prevTime = 0;\n  let currentTime = 0;\n  let totalDuration = 0;\n  /**\n   * Build the timeline by mapping over the definition array and converting\n   * the definitions into keyframes and offsets with absolute time values.\n   * These will later get converted into relative offsets in a second pass.\n   */\n\n  for (let i = 0; i < definition.length; i++) {\n    const segment = definition[i];\n    /**\n     * If this is a timeline label, mark it and skip the rest of this iteration.\n     */\n\n    if (isString(segment)) {\n      timeLabels.set(segment, currentTime);\n      continue;\n    } else if (!Array.isArray(segment)) {\n      timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n      continue;\n    }\n\n    const [elementDefinition, keyframes, options = {}] = segment;\n    /**\n     * If a relative or absolute time value has been specified we need to resolve\n     * it in relation to the currentTime.\n     */\n\n    if (options.at !== undefined) {\n      currentTime = calcNextTime(currentTime, options.at, prevTime, timeLabels);\n    }\n    /**\n     * Keep track of the maximum duration in this definition. This will be\n     * applied to currentTime once the definition has been parsed.\n     */\n\n\n    let maxDuration = 0;\n    /**\n     * Find all the elements specified in the definition and parse value\n     * keyframes from their timeline definitions.\n     */\n\n    const elements = resolveElements(elementDefinition, elementCache);\n    const numElements = elements.length;\n\n    for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {\n      const element = elements[elementIndex];\n      const elementSequence = getElementSequence(element, elementSequences);\n\n      for (const key in keyframes) {\n        const valueSequence = getValueSequence(key, elementSequence);\n        let valueKeyframes = keyframesList(keyframes[key]);\n        const valueOptions = getOptions(options, key);\n        let {\n          duration = defaultOptions.duration || defaults.duration,\n          easing = defaultOptions.easing || defaults.easing\n        } = valueOptions;\n\n        if (isEasingGenerator(easing)) {\n          const valueIsTransform = isTransform(key);\n          invariant(valueKeyframes.length === 2 || !valueIsTransform, \"spring must be provided 2 keyframes within timeline\");\n          const custom = easing.createAnimation(valueKeyframes, // TODO We currently only support explicit keyframes\n          // so this doesn't currently read from the DOM\n          () => \"0\", valueIsTransform);\n          easing = custom.easing;\n          if (custom.keyframes !== undefined) valueKeyframes = custom.keyframes;\n          if (custom.duration !== undefined) duration = custom.duration;\n        }\n\n        const delay = resolveOption(options.delay, elementIndex, numElements) || 0;\n        const startTime = currentTime + delay;\n        const targetTime = startTime + duration;\n        /**\n         *\n         */\n\n        let {\n          offset = defaultOffset(valueKeyframes.length)\n        } = valueOptions;\n        /**\n         * If there's only one offset of 0, fill in a second with length 1\n         *\n         * TODO: Ensure there's a test that covers this removal\n         */\n\n        if (offset.length === 1 && offset[0] === 0) {\n          offset[1] = 1;\n        }\n        /**\n         * Fill out if offset if fewer offsets than keyframes\n         */\n\n\n        const remainder = length - valueKeyframes.length;\n        remainder > 0 && fillOffset(offset, remainder);\n        /**\n         * If only one value has been set, ie [1], push a null to the start of\n         * the keyframe array. This will let us mark a keyframe at this point\n         * that will later be hydrated with the previous value.\n         */\n\n        valueKeyframes.length === 1 && valueKeyframes.unshift(null);\n        /**\n         * Add keyframes, mapping offsets to absolute time.\n         */\n\n        addKeyframes(valueSequence, valueKeyframes, easing, offset, startTime, targetTime);\n        maxDuration = Math.max(delay + duration, maxDuration);\n        totalDuration = Math.max(targetTime, totalDuration);\n      }\n    }\n\n    prevTime = currentTime;\n    currentTime += maxDuration;\n  }\n  /**\n   * For every element and value combination create a new animation.\n   */\n\n\n  elementSequences.forEach((valueSequences, element) => {\n    for (const key in valueSequences) {\n      const valueSequence = valueSequences[key];\n      /**\n       * Arrange all the keyframes in ascending time order.\n       */\n\n      valueSequence.sort(compareByTime);\n      const keyframes = [];\n      const valueOffset = [];\n      const valueEasing = [];\n      /**\n       * For each keyframe, translate absolute times into\n       * relative offsets based on the total duration of the timeline.\n       */\n\n      for (let i = 0; i < valueSequence.length; i++) {\n        const {\n          at,\n          value,\n          easing\n        } = valueSequence[i];\n        keyframes.push(value);\n        valueOffset.push(progress(0, totalDuration, at));\n        valueEasing.push(easing || defaults.easing);\n      }\n      /**\n       * If the first keyframe doesn't land on offset: 0\n       * provide one by duplicating the initial keyframe. This ensures\n       * it snaps to the first keyframe when the animation starts.\n       */\n\n\n      if (valueOffset[0] !== 0) {\n        valueOffset.unshift(0);\n        keyframes.unshift(keyframes[0]);\n        valueEasing.unshift(\"linear\");\n      }\n      /**\n       * If the last keyframe doesn't land on offset: 1\n       * provide one with a null wildcard value. This will ensure it\n       * stays static until the end of the animation.\n       */\n\n\n      if (valueOffset[valueOffset.length - 1] !== 1) {\n        valueOffset.push(1);\n        keyframes.push(null);\n      }\n\n      animationDefinitions.push([element, key, keyframes, Object.assign(Object.assign(Object.assign({}, defaultOptions), {\n        duration: totalDuration,\n        easing: valueEasing,\n        offset: valueOffset\n      }), timelineOptions)]);\n    }\n  });\n  return animationDefinitions;\n}\n\nfunction getElementSequence(element, sequences) {\n  !sequences.has(element) && sequences.set(element, {});\n  return sequences.get(element);\n}\n\nfunction getValueSequence(name, sequences) {\n  if (!sequences[name]) sequences[name] = [];\n  return sequences[name];\n}\n\nexport { createAnimationsFromTimeline, timeline };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/@motionone/dom/dist/timeline/index.es.js"],"names":["__rest","invariant","isString","defaults","isEasingGenerator","defaultOffset","fillOffset","progress","resolveOption","animateStyle","withControls","keyframesList","getOptions","resolveElements","isTransform","calcNextTime","addKeyframes","compareByTime","timeline","definition","options","_a","animationDefinitions","createAnimationsFromTimeline","animationFactories","map","filter","Boolean","duration","defaultOptions","timelineOptions","elementSequences","Map","elementCache","timeLabels","prevTime","currentTime","totalDuration","i","length","segment","set","Array","isArray","name","at","elementDefinition","keyframes","undefined","maxDuration","elements","numElements","elementIndex","element","elementSequence","getElementSequence","key","valueSequence","getValueSequence","valueKeyframes","valueOptions","easing","valueIsTransform","custom","createAnimation","delay","startTime","targetTime","offset","remainder","unshift","Math","max","forEach","valueSequences","sort","valueOffset","valueEasing","value","push","Object","assign","sequences","has","get"],"mappings":"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","sourcesContent":["import { __rest } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { isString, defaults, isEasingGenerator, defaultOffset, fillOffset, progress } from '@motionone/utils';\nimport { resolveOption } from '../utils/stagger.es.js';\nimport { animateStyle } from '../animate/animate-style.es.js';\nimport { withControls } from '../animate/utils/controls.es.js';\nimport { keyframesList } from '../animate/utils/keyframes.es.js';\nimport { getOptions } from '../animate/utils/options.es.js';\nimport { resolveElements } from '../utils/resolve-elements.es.js';\nimport { isTransform } from '../animate/utils/transforms.es.js';\nimport { calcNextTime } from './utils/calc-time.es.js';\nimport { addKeyframes } from './utils/edit.es.js';\nimport { compareByTime } from './utils/sort.es.js';\n\nfunction timeline(definition, options = {}) {\n    var _a;\n    const animationDefinitions = createAnimationsFromTimeline(definition, options);\n    /**\n     * Create and start animations\n     */\n    const animationFactories = animationDefinitions\n        .map((definition) => animateStyle(...definition))\n        .filter(Boolean);\n    return withControls(animationFactories, options, \n    // Get the duration from the first animation definition\n    (_a = animationDefinitions[0]) === null || _a === void 0 ? void 0 : _a[3].duration);\n}\nfunction createAnimationsFromTimeline(definition, _a = {}) {\n    var { defaultOptions = {} } = _a, timelineOptions = __rest(_a, [\"defaultOptions\"]);\n    const animationDefinitions = [];\n    const elementSequences = new Map();\n    const elementCache = {};\n    const timeLabels = new Map();\n    let prevTime = 0;\n    let currentTime = 0;\n    let totalDuration = 0;\n    /**\n     * Build the timeline by mapping over the definition array and converting\n     * the definitions into keyframes and offsets with absolute time values.\n     * These will later get converted into relative offsets in a second pass.\n     */\n    for (let i = 0; i < definition.length; i++) {\n        const segment = definition[i];\n        /**\n         * If this is a timeline label, mark it and skip the rest of this iteration.\n         */\n        if (isString(segment)) {\n            timeLabels.set(segment, currentTime);\n            continue;\n        }\n        else if (!Array.isArray(segment)) {\n            timeLabels.set(segment.name, calcNextTime(currentTime, segment.at, prevTime, timeLabels));\n            continue;\n        }\n        const [elementDefinition, keyframes, options = {}] = segment;\n        /**\n         * If a relative or absolute time value has been specified we need to resolve\n         * it in relation to the currentTime.\n         */\n        if (options.at !== undefined) {\n            currentTime = calcNextTime(currentTime, options.at, prevTime, timeLabels);\n        }\n        /**\n         * Keep track of the maximum duration in this definition. This will be\n         * applied to currentTime once the definition has been parsed.\n         */\n        let maxDuration = 0;\n        /**\n         * Find all the elements specified in the definition and parse value\n         * keyframes from their timeline definitions.\n         */\n        const elements = resolveElements(elementDefinition, elementCache);\n        const numElements = elements.length;\n        for (let elementIndex = 0; elementIndex < numElements; elementIndex++) {\n            const element = elements[elementIndex];\n            const elementSequence = getElementSequence(element, elementSequences);\n            for (const key in keyframes) {\n                const valueSequence = getValueSequence(key, elementSequence);\n                let valueKeyframes = keyframesList(keyframes[key]);\n                const valueOptions = getOptions(options, key);\n                let { duration = defaultOptions.duration || defaults.duration, easing = defaultOptions.easing || defaults.easing, } = valueOptions;\n                if (isEasingGenerator(easing)) {\n                    const valueIsTransform = isTransform(key);\n                    invariant(valueKeyframes.length === 2 || !valueIsTransform, \"spring must be provided 2 keyframes within timeline\");\n                    const custom = easing.createAnimation(valueKeyframes, \n                    // TODO We currently only support explicit keyframes\n                    // so this doesn't currently read from the DOM\n                    () => \"0\", valueIsTransform);\n                    easing = custom.easing;\n                    if (custom.keyframes !== undefined)\n                        valueKeyframes = custom.keyframes;\n                    if (custom.duration !== undefined)\n                        duration = custom.duration;\n                }\n                const delay = resolveOption(options.delay, elementIndex, numElements) || 0;\n                const startTime = currentTime + delay;\n                const targetTime = startTime + duration;\n                /**\n                 *\n                 */\n                let { offset = defaultOffset(valueKeyframes.length) } = valueOptions;\n                /**\n                 * If there's only one offset of 0, fill in a second with length 1\n                 *\n                 * TODO: Ensure there's a test that covers this removal\n                 */\n                if (offset.length === 1 && offset[0] === 0) {\n                    offset[1] = 1;\n                }\n                /**\n                 * Fill out if offset if fewer offsets than keyframes\n                 */\n                const remainder = length - valueKeyframes.length;\n                remainder > 0 && fillOffset(offset, remainder);\n                /**\n                 * If only one value has been set, ie [1], push a null to the start of\n                 * the keyframe array. This will let us mark a keyframe at this point\n                 * that will later be hydrated with the previous value.\n                 */\n                valueKeyframes.length === 1 && valueKeyframes.unshift(null);\n                /**\n                 * Add keyframes, mapping offsets to absolute time.\n                 */\n                addKeyframes(valueSequence, valueKeyframes, easing, offset, startTime, targetTime);\n                maxDuration = Math.max(delay + duration, maxDuration);\n                totalDuration = Math.max(targetTime, totalDuration);\n            }\n        }\n        prevTime = currentTime;\n        currentTime += maxDuration;\n    }\n    /**\n     * For every element and value combination create a new animation.\n     */\n    elementSequences.forEach((valueSequences, element) => {\n        for (const key in valueSequences) {\n            const valueSequence = valueSequences[key];\n            /**\n             * Arrange all the keyframes in ascending time order.\n             */\n            valueSequence.sort(compareByTime);\n            const keyframes = [];\n            const valueOffset = [];\n            const valueEasing = [];\n            /**\n             * For each keyframe, translate absolute times into\n             * relative offsets based on the total duration of the timeline.\n             */\n            for (let i = 0; i < valueSequence.length; i++) {\n                const { at, value, easing } = valueSequence[i];\n                keyframes.push(value);\n                valueOffset.push(progress(0, totalDuration, at));\n                valueEasing.push(easing || defaults.easing);\n            }\n            /**\n             * If the first keyframe doesn't land on offset: 0\n             * provide one by duplicating the initial keyframe. This ensures\n             * it snaps to the first keyframe when the animation starts.\n             */\n            if (valueOffset[0] !== 0) {\n                valueOffset.unshift(0);\n                keyframes.unshift(keyframes[0]);\n                valueEasing.unshift(\"linear\");\n            }\n            /**\n             * If the last keyframe doesn't land on offset: 1\n             * provide one with a null wildcard value. This will ensure it\n             * stays static until the end of the animation.\n             */\n            if (valueOffset[valueOffset.length - 1] !== 1) {\n                valueOffset.push(1);\n                keyframes.push(null);\n            }\n            animationDefinitions.push([\n                element,\n                key,\n                keyframes,\n                Object.assign(Object.assign(Object.assign({}, defaultOptions), { duration: totalDuration, easing: valueEasing, offset: valueOffset }), timelineOptions),\n            ]);\n        }\n    });\n    return animationDefinitions;\n}\nfunction getElementSequence(element, sequences) {\n    !sequences.has(element) && sequences.set(element, {});\n    return sequences.get(element);\n}\nfunction getValueSequence(name, sequences) {\n    if (!sequences[name])\n        sequences[name] = [];\n    return sequences[name];\n}\n\nexport { createAnimationsFromTimeline, timeline };\n"]},"metadata":{},"sourceType":"module"}