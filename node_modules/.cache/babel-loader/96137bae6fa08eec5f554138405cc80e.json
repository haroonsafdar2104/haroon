{"ast":null,"code":"import { reduce } from './reduce';\nimport { isFunction } from '../util/isFunction';\nexport function max(comparer) {\n  return reduce(isFunction(comparer) ? function (x, y) {\n    return comparer(x, y) > 0 ? x : y;\n  } : function (x, y) {\n    return x > y ? x : y;\n  });\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,UAAvB;AAEA,SAASC,UAAT,QAA2B,oBAA3B;AAgDA,OAAM,SAAUC,GAAV,CAAiBC,QAAjB,EAAkD;AACtD,SAAOH,MAAM,CAACC,UAAU,CAACE,QAAD,CAAV,GAAuB,UAACC,CAAD,EAAIC,CAAJ,EAAK;AAAK,WAACF,QAAQ,CAACC,CAAD,EAAIC,CAAJ,CAAR,GAAiB,CAAjB,GAAqBD,CAArB,GAAyBC,CAA1B;AAA4B,GAA7D,GAAgE,UAACD,CAAD,EAAIC,CAAJ,EAAK;AAAK,WAACD,CAAC,GAAGC,CAAJ,GAAQD,CAAR,GAAYC,CAAb;AAAe,GAA1F,CAAb;AACD","names":["reduce","isFunction","max","comparer","x","y"],"sources":["C:\\Users\\Admin\\Downloads\\portpoliopro-main\\client\\node_modules\\rxjs\\src\\internal\\operators\\max.ts"],"sourcesContent":["import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * ![](max.png)\n *\n * ## Examples\n *\n * Get the maximal value of a series of numbers\n *\n * ```ts\n * import { of, max } from 'rxjs';\n *\n * of(5, 4, 7, 2, 8)\n *   .pipe(max())\n *   .subscribe(x => console.log(x));\n *\n * // Outputs\n * // 8\n * ```\n *\n * Use a comparer function to get the maximal item\n *\n * ```ts\n * import { of, max } from 'rxjs';\n *\n * of(\n *   { age: 7, name: 'Foo' },\n *   { age: 5, name: 'Bar' },\n *   { age: 9, name: 'Beer' }\n * ).pipe(\n *   max((a, b) => a.age < b.age ? -1 : 1)\n * )\n * .subscribe(x => console.log(x.name));\n *\n * // Outputs\n * // 'Beer'\n * ```\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return A function that returns an Observable that emits item with the\n * largest value.\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  return reduce(isFunction(comparer) ? (x, y) => (comparer(x, y) > 0 ? x : y) : (x, y) => (x > y ? x : y));\n}\n"]},"metadata":{},"sourceType":"module"}