{"ast":null,"code":"var identityProjection = \"translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)\";\n\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n  /**\n   * The translations we use to calculate are always relative to the viewport coordinate space.\n   * But when we apply scales, we also scale the coordinate space of an element and its children.\n   * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n   * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n   */\n  var xTranslate = delta.x.translate / treeScale.x;\n  var yTranslate = delta.y.translate / treeScale.y;\n  var transform = \"translate3d(\".concat(xTranslate, \"px, \").concat(yTranslate, \"px, 0) \");\n  /**\n   * Apply scale correction for the tree transform.\n   * This will apply scale to the screen-orientated axes.\n   */\n\n  transform += \"scale(\".concat(1 / treeScale.x, \", \").concat(1 / treeScale.y, \") \");\n\n  if (latestTransform) {\n    var rotate = latestTransform.rotate,\n        rotateX = latestTransform.rotateX,\n        rotateY = latestTransform.rotateY;\n    if (rotate) transform += \"rotate(\".concat(rotate, \"deg) \");\n    if (rotateX) transform += \"rotateX(\".concat(rotateX, \"deg) \");\n    if (rotateY) transform += \"rotateY(\".concat(rotateY, \"deg) \");\n  }\n  /**\n   * Apply scale to match the size of the element to the size we want it.\n   * This will apply scale to the element-orientated axes.\n   */\n\n\n  var elementScaleX = delta.x.scale * treeScale.x;\n  var elementScaleY = delta.y.scale * treeScale.y;\n  transform += \"scale(\".concat(elementScaleX, \", \").concat(elementScaleY, \")\");\n  return transform === identityProjection ? \"none\" : transform;\n}\n\nexport { buildProjectionTransform, identityProjection };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/projection/styles/transform.mjs"],"names":["identityProjection","buildProjectionTransform","delta","treeScale","latestTransform","xTranslate","x","translate","yTranslate","y","transform","rotate","rotateX","rotateY","elementScaleX","scale","elementScaleY"],"mappings":"AAAA,IAAMA,kBAAkB,GAAG,kDAA3B;;AACA,SAASC,wBAAT,CAAkCC,KAAlC,EAAyCC,SAAzC,EAAoDC,eAApD,EAAqE;AACjE;AACJ;AACA;AACA;AACA;AACA;AACI,MAAMC,UAAU,GAAGH,KAAK,CAACI,CAAN,CAAQC,SAAR,GAAoBJ,SAAS,CAACG,CAAjD;AACA,MAAME,UAAU,GAAGN,KAAK,CAACO,CAAN,CAAQF,SAAR,GAAoBJ,SAAS,CAACM,CAAjD;AACA,MAAIC,SAAS,yBAAkBL,UAAlB,iBAAmCG,UAAnC,YAAb;AACA;AACJ;AACA;AACA;;AACIE,EAAAA,SAAS,oBAAa,IAAIP,SAAS,CAACG,CAA3B,eAAiC,IAAIH,SAAS,CAACM,CAA/C,OAAT;;AACA,MAAIL,eAAJ,EAAqB;AACjB,QAAQO,MAAR,GAAqCP,eAArC,CAAQO,MAAR;AAAA,QAAgBC,OAAhB,GAAqCR,eAArC,CAAgBQ,OAAhB;AAAA,QAAyBC,OAAzB,GAAqCT,eAArC,CAAyBS,OAAzB;AACA,QAAIF,MAAJ,EACID,SAAS,qBAAcC,MAAd,UAAT;AACJ,QAAIC,OAAJ,EACIF,SAAS,sBAAeE,OAAf,UAAT;AACJ,QAAIC,OAAJ,EACIH,SAAS,sBAAeG,OAAf,UAAT;AACP;AACD;AACJ;AACA;AACA;;;AACI,MAAMC,aAAa,GAAGZ,KAAK,CAACI,CAAN,CAAQS,KAAR,GAAgBZ,SAAS,CAACG,CAAhD;AACA,MAAMU,aAAa,GAAGd,KAAK,CAACO,CAAN,CAAQM,KAAR,GAAgBZ,SAAS,CAACM,CAAhD;AACAC,EAAAA,SAAS,oBAAaI,aAAb,eAA+BE,aAA/B,MAAT;AACA,SAAON,SAAS,KAAKV,kBAAd,GAAmC,MAAnC,GAA4CU,SAAnD;AACH;;AAED,SAAST,wBAAT,EAAmCD,kBAAnC","sourcesContent":["const identityProjection = \"translate3d(0px, 0px, 0) scale(1, 1) scale(1, 1)\";\nfunction buildProjectionTransform(delta, treeScale, latestTransform) {\n    /**\n     * The translations we use to calculate are always relative to the viewport coordinate space.\n     * But when we apply scales, we also scale the coordinate space of an element and its children.\n     * For instance if we have a treeScale (the culmination of all parent scales) of 0.5 and we need\n     * to move an element 100 pixels, we actually need to move it 200 in within that scaled space.\n     */\n    const xTranslate = delta.x.translate / treeScale.x;\n    const yTranslate = delta.y.translate / treeScale.y;\n    let transform = `translate3d(${xTranslate}px, ${yTranslate}px, 0) `;\n    /**\n     * Apply scale correction for the tree transform.\n     * This will apply scale to the screen-orientated axes.\n     */\n    transform += `scale(${1 / treeScale.x}, ${1 / treeScale.y}) `;\n    if (latestTransform) {\n        const { rotate, rotateX, rotateY } = latestTransform;\n        if (rotate)\n            transform += `rotate(${rotate}deg) `;\n        if (rotateX)\n            transform += `rotateX(${rotateX}deg) `;\n        if (rotateY)\n            transform += `rotateY(${rotateY}deg) `;\n    }\n    /**\n     * Apply scale to match the size of the element to the size we want it.\n     * This will apply scale to the element-orientated axes.\n     */\n    const elementScaleX = delta.x.scale * treeScale.x;\n    const elementScaleY = delta.y.scale * treeScale.y;\n    transform += `scale(${elementScaleX}, ${elementScaleY})`;\n    return transform === identityProjection ? \"none\" : transform;\n}\n\nexport { buildProjectionTransform, identityProjection };\n"]},"metadata":{},"sourceType":"module"}