{"ast":null,"code":"import _objectWithoutProperties from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"transitionEnd\", \"transition\"];\nimport { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction makeState(_ref, props, context, presenceContext) {\n  var scrapeMotionValuesFromProps = _ref.scrapeMotionValuesFromProps,\n      createRenderState = _ref.createRenderState,\n      onMount = _ref.onMount;\n  var state = {\n    latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n    renderState: createRenderState()\n  };\n\n  if (onMount) {\n    state.mount = function (instance) {\n      return onMount(props, instance, state);\n    };\n  }\n\n  return state;\n}\n\nvar makeUseVisualState = function makeUseVisualState(config) {\n  return function (props, isStatic) {\n    var context = useContext(MotionContext);\n    var presenceContext = useContext(PresenceContext);\n\n    var make = function make() {\n      return makeState(config, props, context, presenceContext);\n    };\n\n    return isStatic ? make() : useConstant(make);\n  };\n};\n\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n  var values = {};\n  var motionValues = scrapeMotionValues(props);\n\n  for (var key in motionValues) {\n    values[key] = resolveMotionValue(motionValues[key]);\n  }\n\n  var initial = props.initial,\n      animate = props.animate;\n  var isControllingVariants$1 = isControllingVariants(props);\n  var isVariantNode$1 = isVariantNode(props);\n\n  if (context && isVariantNode$1 && !isControllingVariants$1 && props.inherit !== false) {\n    if (initial === undefined) initial = context.initial;\n    if (animate === undefined) animate = context.animate;\n  }\n\n  var isInitialAnimationBlocked = presenceContext ? presenceContext.initial === false : false;\n  isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n  var variantToSet = isInitialAnimationBlocked ? animate : initial;\n\n  if (variantToSet && typeof variantToSet !== \"boolean\" && !isAnimationControls(variantToSet)) {\n    var list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n    list.forEach(function (definition) {\n      var resolved = resolveVariantFromProps(props, definition);\n      if (!resolved) return;\n\n      var transitionEnd = resolved.transitionEnd,\n          transition = resolved.transition,\n          target = _objectWithoutProperties(resolved, _excluded);\n\n      for (var _key in target) {\n        var valueTarget = target[_key];\n\n        if (Array.isArray(valueTarget)) {\n          /**\n           * Take final keyframe if the initial animation is blocked because\n           * we want to initialise at the end of that blocked animation.\n           */\n          var index = isInitialAnimationBlocked ? valueTarget.length - 1 : 0;\n          valueTarget = valueTarget[index];\n        }\n\n        if (valueTarget !== null) {\n          values[_key] = valueTarget;\n        }\n      }\n\n      for (var _key2 in transitionEnd) {\n        values[_key2] = transitionEnd[_key2];\n      }\n    });\n  }\n\n  return values;\n}\n\nexport { makeUseVisualState };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.mjs"],"names":["useContext","isAnimationControls","PresenceContext","resolveVariantFromProps","useConstant","resolveMotionValue","MotionContext","isControllingVariants","isVariantNode","makeState","props","context","presenceContext","scrapeMotionValuesFromProps","createRenderState","onMount","state","latestValues","makeLatestValues","renderState","mount","instance","makeUseVisualState","config","isStatic","make","scrapeMotionValues","values","motionValues","key","initial","animate","isControllingVariants$1","isVariantNode$1","inherit","undefined","isInitialAnimationBlocked","variantToSet","list","Array","isArray","forEach","definition","resolved","transitionEnd","transition","target","valueTarget","index","length"],"mappings":"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","sourcesContent":["import { useContext } from 'react';\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { PresenceContext } from '../../context/PresenceContext.mjs';\nimport { resolveVariantFromProps } from '../../render/utils/resolve-variants.mjs';\nimport { useConstant } from '../../utils/use-constant.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { MotionContext } from '../../context/MotionContext/index.mjs';\nimport { isControllingVariants, isVariantNode } from '../../render/utils/is-controlling-variants.mjs';\n\nfunction makeState({ scrapeMotionValuesFromProps, createRenderState, onMount, }, props, context, presenceContext) {\n    const state = {\n        latestValues: makeLatestValues(props, context, presenceContext, scrapeMotionValuesFromProps),\n        renderState: createRenderState(),\n    };\n    if (onMount) {\n        state.mount = (instance) => onMount(props, instance, state);\n    }\n    return state;\n}\nconst makeUseVisualState = (config) => (props, isStatic) => {\n    const context = useContext(MotionContext);\n    const presenceContext = useContext(PresenceContext);\n    const make = () => makeState(config, props, context, presenceContext);\n    return isStatic ? make() : useConstant(make);\n};\nfunction makeLatestValues(props, context, presenceContext, scrapeMotionValues) {\n    const values = {};\n    const motionValues = scrapeMotionValues(props);\n    for (const key in motionValues) {\n        values[key] = resolveMotionValue(motionValues[key]);\n    }\n    let { initial, animate } = props;\n    const isControllingVariants$1 = isControllingVariants(props);\n    const isVariantNode$1 = isVariantNode(props);\n    if (context &&\n        isVariantNode$1 &&\n        !isControllingVariants$1 &&\n        props.inherit !== false) {\n        if (initial === undefined)\n            initial = context.initial;\n        if (animate === undefined)\n            animate = context.animate;\n    }\n    let isInitialAnimationBlocked = presenceContext\n        ? presenceContext.initial === false\n        : false;\n    isInitialAnimationBlocked = isInitialAnimationBlocked || initial === false;\n    const variantToSet = isInitialAnimationBlocked ? animate : initial;\n    if (variantToSet &&\n        typeof variantToSet !== \"boolean\" &&\n        !isAnimationControls(variantToSet)) {\n        const list = Array.isArray(variantToSet) ? variantToSet : [variantToSet];\n        list.forEach((definition) => {\n            const resolved = resolveVariantFromProps(props, definition);\n            if (!resolved)\n                return;\n            const { transitionEnd, transition, ...target } = resolved;\n            for (const key in target) {\n                let valueTarget = target[key];\n                if (Array.isArray(valueTarget)) {\n                    /**\n                     * Take final keyframe if the initial animation is blocked because\n                     * we want to initialise at the end of that blocked animation.\n                     */\n                    const index = isInitialAnimationBlocked\n                        ? valueTarget.length - 1\n                        : 0;\n                    valueTarget = valueTarget[index];\n                }\n                if (valueTarget !== null) {\n                    values[key] = valueTarget;\n                }\n            }\n            for (const key in transitionEnd)\n                values[key] = transitionEnd[key];\n        });\n    }\n    return values;\n}\n\nexport { makeUseVisualState };\n"]},"metadata":{},"sourceType":"module"}