{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { map } from \"../operators/map\";\nvar isArray = Array.isArray;\n\nfunction callOrApply(fn, args) {\n  return isArray(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);\n}\n\nexport function mapOneOrManyArgs(fn) {\n  return map(function (args) {\n    return callOrApply(fn, args);\n  });\n}","map":{"version":3,"mappings":";AACA,SAASA,GAAT,QAAoB,kBAApB;AAEQ,WAAO,GAAKC,KAAK,QAAjB;;AAER,SAASC,WAAT,CAA2BC,EAA3B,EAAwDC,IAAxD,EAAmE;AAC/D,SAAOC,OAAO,CAACD,IAAD,CAAP,GAAgBD,EAAE,MAAF,CAAE,MAAF,EAAEG,yBAAIF,IAAJ,EAAF,CAAhB,GAA8BD,EAAE,CAACC,IAAD,CAAvC;AACH;;AAMD,OAAM,SAAUG,gBAAV,CAAiCJ,EAAjC,EAA4D;AAC9D,SAAOH,GAAG,CAAC,gBAAI;AAAI,sBAAW,CAACG,EAAD,EAAKC,IAAL,CAAX;AAAqB,GAA9B,CAAV;AACH","names":["map","Array","callOrApply","fn","args","isArray","__spreadArray","mapOneOrManyArgs"],"sources":["C:\\Users\\Admin\\Downloads\\portpoliopro-main\\client\\node_modules\\rxjs\\src\\internal\\util\\mapOneOrManyArgs.ts"],"sourcesContent":["import { OperatorFunction } from \"../types\";\nimport { map } from \"../operators/map\";\n\nconst { isArray } = Array;\n\nfunction callOrApply<T, R>(fn: ((...values: T[]) => R), args: T|T[]): R {\n    return isArray(args) ? fn(...args) : fn(args);\n}\n\n/**\n * Used in several -- mostly deprecated -- situations where we need to \n * apply a list of arguments or a single argument to a result selector.\n */\nexport function mapOneOrManyArgs<T, R>(fn: ((...values: T[]) => R)): OperatorFunction<T|T[], R> {\n    return map(args => callOrApply(fn, args))\n}"]},"metadata":{},"sourceType":"module"}