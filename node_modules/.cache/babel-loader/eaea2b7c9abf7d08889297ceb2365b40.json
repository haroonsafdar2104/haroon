{"ast":null,"code":"import { mix, progress, clamp } from 'popmotion';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\n\nfunction applyConstraints(point, _ref, elastic) {\n  let {\n    min,\n    max\n  } = _ref;\n\n  if (min !== undefined && point < min) {\n    // If we have a min point defined, and this is outside of that, constrain\n    point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n  } else if (max !== undefined && point > max) {\n    // If we have a max point defined, and this is outside of that, constrain\n    point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n  }\n\n  return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\n\n\nfunction calcRelativeAxisConstraints(axis, min, max) {\n  return {\n    min: min !== undefined ? axis.min + min : undefined,\n    max: max !== undefined ? axis.max + max - (axis.max - axis.min) : undefined\n  };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\n\n\nfunction calcRelativeConstraints(layoutBox, _ref2) {\n  let {\n    top,\n    left,\n    bottom,\n    right\n  } = _ref2;\n  return {\n    x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n    y: calcRelativeAxisConstraints(layoutBox.y, top, bottom)\n  };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\n\n\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n  let min = constraintsAxis.min - layoutAxis.min;\n  let max = constraintsAxis.max - layoutAxis.max; // If the constraints axis is actually smaller than the layout axis then we can\n  // flip the constraints\n\n  if (constraintsAxis.max - constraintsAxis.min < layoutAxis.max - layoutAxis.min) {\n    [min, max] = [max, min];\n  }\n\n  return {\n    min,\n    max\n  };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\n\n\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n  return {\n    x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n    y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y)\n  };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\n\n\nfunction calcOrigin(source, target) {\n  let origin = 0.5;\n  const sourceLength = calcLength(source);\n  const targetLength = calcLength(target);\n\n  if (targetLength > sourceLength) {\n    origin = progress(target.min, target.max - sourceLength, source.min);\n  } else if (sourceLength > targetLength) {\n    origin = progress(source.min, source.max - targetLength, target.min);\n  }\n\n  return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\n\n\nfunction rebaseAxisConstraints(layout, constraints) {\n  const relativeConstraints = {};\n\n  if (constraints.min !== undefined) {\n    relativeConstraints.min = constraints.min - layout.min;\n  }\n\n  if (constraints.max !== undefined) {\n    relativeConstraints.max = constraints.max - layout.min;\n  }\n\n  return relativeConstraints;\n}\n\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\n\nfunction resolveDragElastic() {\n  let dragElastic = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultElastic;\n\n  if (dragElastic === false) {\n    dragElastic = 0;\n  } else if (dragElastic === true) {\n    dragElastic = defaultElastic;\n  }\n\n  return {\n    x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n    y: resolveAxisElastic(dragElastic, \"top\", \"bottom\")\n  };\n}\n\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n  return {\n    min: resolvePointElastic(dragElastic, minLabel),\n    max: resolvePointElastic(dragElastic, maxLabel)\n  };\n}\n\nfunction resolvePointElastic(dragElastic, label) {\n  var _a;\n\n  return typeof dragElastic === \"number\" ? dragElastic : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.mjs"],"names":["mix","progress","clamp","calcLength","applyConstraints","point","elastic","min","max","undefined","Math","calcRelativeAxisConstraints","axis","calcRelativeConstraints","layoutBox","top","left","bottom","right","x","y","calcViewportAxisConstraints","layoutAxis","constraintsAxis","calcViewportConstraints","constraintsBox","calcOrigin","source","target","origin","sourceLength","targetLength","rebaseAxisConstraints","layout","constraints","relativeConstraints","defaultElastic","resolveDragElastic","dragElastic","resolveAxisElastic","minLabel","maxLabel","resolvePointElastic","label","_a"],"mappings":"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","sourcesContent":["import { mix, progress, clamp } from 'popmotion';\nimport { calcLength } from '../../../projection/geometry/delta-calc.mjs';\n\n/**\n * Apply constraints to a point. These constraints are both physical along an\n * axis, and an elastic factor that determines how much to constrain the point\n * by if it does lie outside the defined parameters.\n */\nfunction applyConstraints(point, { min, max }, elastic) {\n    if (min !== undefined && point < min) {\n        // If we have a min point defined, and this is outside of that, constrain\n        point = elastic ? mix(min, point, elastic.min) : Math.max(point, min);\n    }\n    else if (max !== undefined && point > max) {\n        // If we have a max point defined, and this is outside of that, constrain\n        point = elastic ? mix(max, point, elastic.max) : Math.min(point, max);\n    }\n    return point;\n}\n/**\n * Calculate constraints in terms of the viewport when defined relatively to the\n * measured axis. This is measured from the nearest edge, so a max constraint of 200\n * on an axis with a max value of 300 would return a constraint of 500 - axis length\n */\nfunction calcRelativeAxisConstraints(axis, min, max) {\n    return {\n        min: min !== undefined ? axis.min + min : undefined,\n        max: max !== undefined\n            ? axis.max + max - (axis.max - axis.min)\n            : undefined,\n    };\n}\n/**\n * Calculate constraints in terms of the viewport when\n * defined relatively to the measured bounding box.\n */\nfunction calcRelativeConstraints(layoutBox, { top, left, bottom, right }) {\n    return {\n        x: calcRelativeAxisConstraints(layoutBox.x, left, right),\n        y: calcRelativeAxisConstraints(layoutBox.y, top, bottom),\n    };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative axis\n */\nfunction calcViewportAxisConstraints(layoutAxis, constraintsAxis) {\n    let min = constraintsAxis.min - layoutAxis.min;\n    let max = constraintsAxis.max - layoutAxis.max;\n    // If the constraints axis is actually smaller than the layout axis then we can\n    // flip the constraints\n    if (constraintsAxis.max - constraintsAxis.min <\n        layoutAxis.max - layoutAxis.min) {\n        [min, max] = [max, min];\n    }\n    return { min, max };\n}\n/**\n * Calculate viewport constraints when defined as another viewport-relative box\n */\nfunction calcViewportConstraints(layoutBox, constraintsBox) {\n    return {\n        x: calcViewportAxisConstraints(layoutBox.x, constraintsBox.x),\n        y: calcViewportAxisConstraints(layoutBox.y, constraintsBox.y),\n    };\n}\n/**\n * Calculate a transform origin relative to the source axis, between 0-1, that results\n * in an asthetically pleasing scale/transform needed to project from source to target.\n */\nfunction calcOrigin(source, target) {\n    let origin = 0.5;\n    const sourceLength = calcLength(source);\n    const targetLength = calcLength(target);\n    if (targetLength > sourceLength) {\n        origin = progress(target.min, target.max - sourceLength, source.min);\n    }\n    else if (sourceLength > targetLength) {\n        origin = progress(source.min, source.max - targetLength, target.min);\n    }\n    return clamp(0, 1, origin);\n}\n/**\n * Rebase the calculated viewport constraints relative to the layout.min point.\n */\nfunction rebaseAxisConstraints(layout, constraints) {\n    const relativeConstraints = {};\n    if (constraints.min !== undefined) {\n        relativeConstraints.min = constraints.min - layout.min;\n    }\n    if (constraints.max !== undefined) {\n        relativeConstraints.max = constraints.max - layout.min;\n    }\n    return relativeConstraints;\n}\nconst defaultElastic = 0.35;\n/**\n * Accepts a dragElastic prop and returns resolved elastic values for each axis.\n */\nfunction resolveDragElastic(dragElastic = defaultElastic) {\n    if (dragElastic === false) {\n        dragElastic = 0;\n    }\n    else if (dragElastic === true) {\n        dragElastic = defaultElastic;\n    }\n    return {\n        x: resolveAxisElastic(dragElastic, \"left\", \"right\"),\n        y: resolveAxisElastic(dragElastic, \"top\", \"bottom\"),\n    };\n}\nfunction resolveAxisElastic(dragElastic, minLabel, maxLabel) {\n    return {\n        min: resolvePointElastic(dragElastic, minLabel),\n        max: resolvePointElastic(dragElastic, maxLabel),\n    };\n}\nfunction resolvePointElastic(dragElastic, label) {\n    var _a;\n    return typeof dragElastic === \"number\"\n        ? dragElastic\n        : (_a = dragElastic[label]) !== null && _a !== void 0 ? _a : 0;\n}\n\nexport { applyConstraints, calcOrigin, calcRelativeAxisConstraints, calcRelativeConstraints, calcViewportAxisConstraints, calcViewportConstraints, defaultElastic, rebaseAxisConstraints, resolveAxisElastic, resolveDragElastic, resolvePointElastic };\n"]},"metadata":{},"sourceType":"module"}