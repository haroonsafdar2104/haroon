{"ast":null,"code":"import _slicedToArray from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\n\nfunction useMotionValue(initial) {\n  var value = useConstant(function () {\n    return motionValue(initial);\n  });\n  /**\n   * If this motion value is being used in static mode, like on\n   * the Framer canvas, force components to rerender when the motion\n   * value is updated.\n   */\n\n  var _useContext = useContext(MotionConfigContext),\n      isStatic = _useContext.isStatic;\n\n  if (isStatic) {\n    var _useState = useState(initial),\n        _useState2 = _slicedToArray(_useState, 2),\n        setLatest = _useState2[1];\n\n    useEffect(function () {\n      return value.onChange(setLatest);\n    }, []);\n  }\n\n  return value;\n}\n\nexport { useMotionValue };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/value/use-motion-value.mjs"],"names":["useContext","useState","useEffect","motionValue","MotionConfigContext","useConstant","useMotionValue","initial","value","isStatic","setLatest","onChange"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,SAA/B,QAAgD,OAAhD;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,mBAAT,QAAoC,oCAApC;AACA,SAASC,WAAT,QAA4B,2BAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CAAwBC,OAAxB,EAAiC;AAC7B,MAAMC,KAAK,GAAGH,WAAW,CAAC;AAAA,WAAMF,WAAW,CAACI,OAAD,CAAjB;AAAA,GAAD,CAAzB;AACA;AACJ;AACA;AACA;AACA;;AACI,oBAAqBP,UAAU,CAACI,mBAAD,CAA/B;AAAA,MAAQK,QAAR,eAAQA,QAAR;;AACA,MAAIA,QAAJ,EAAc;AACV,oBAAsBR,QAAQ,CAACM,OAAD,CAA9B;AAAA;AAAA,QAASG,SAAT;;AACAR,IAAAA,SAAS,CAAC;AAAA,aAAMM,KAAK,CAACG,QAAN,CAAeD,SAAf,CAAN;AAAA,KAAD,EAAkC,EAAlC,CAAT;AACH;;AACD,SAAOF,KAAP;AACH;;AAED,SAASF,cAAT","sourcesContent":["import { useContext, useState, useEffect } from 'react';\nimport { motionValue } from './index.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\nimport { useConstant } from '../utils/use-constant.mjs';\n\n/**\n * Creates a `MotionValue` to track the state and velocity of a value.\n *\n * Usually, these are created automatically. For advanced use-cases, like use with `useTransform`, you can create `MotionValue`s externally and pass them into the animated component via the `style` prop.\n *\n * ```jsx\n * export const MyComponent = () => {\n *   const scale = useMotionValue(1)\n *\n *   return <motion.div style={{ scale }} />\n * }\n * ```\n *\n * @param initial - The initial state.\n *\n * @public\n */\nfunction useMotionValue(initial) {\n    const value = useConstant(() => motionValue(initial));\n    /**\n     * If this motion value is being used in static mode, like on\n     * the Framer canvas, force components to rerender when the motion\n     * value is updated.\n     */\n    const { isStatic } = useContext(MotionConfigContext);\n    if (isStatic) {\n        const [, setLatest] = useState(initial);\n        useEffect(() => value.onChange(setLatest), []);\n    }\n    return value;\n}\n\nexport { useMotionValue };\n"]},"metadata":{},"sourceType":"module"}