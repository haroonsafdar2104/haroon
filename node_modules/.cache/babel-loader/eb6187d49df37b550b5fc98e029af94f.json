{"ast":null,"code":"import _classCallCheck from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nvar NodeStack = /*#__PURE__*/function () {\n  function NodeStack() {\n    _classCallCheck(this, NodeStack);\n\n    this.members = [];\n  }\n\n  _createClass(NodeStack, [{\n    key: \"add\",\n    value: function add(node) {\n      addUniqueItem(this.members, node);\n      node.scheduleRender();\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(node) {\n      removeItem(this.members, node);\n\n      if (node === this.prevLead) {\n        this.prevLead = undefined;\n      }\n\n      if (node === this.lead) {\n        var prevLead = this.members[this.members.length - 1];\n\n        if (prevLead) {\n          this.promote(prevLead);\n        }\n      }\n    }\n  }, {\n    key: \"relegate\",\n    value: function relegate(node) {\n      var indexOfNode = this.members.findIndex(function (member) {\n        return node === member;\n      });\n      if (indexOfNode === 0) return false;\n      /**\n       * Find the next projection node that is present\n       */\n\n      var prevLead;\n\n      for (var i = indexOfNode; i >= 0; i--) {\n        var member = this.members[i];\n\n        if (member.isPresent !== false) {\n          prevLead = member;\n          break;\n        }\n      }\n\n      if (prevLead) {\n        this.promote(prevLead);\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"promote\",\n    value: function promote(node, preserveFollowOpacity) {\n      var _a;\n\n      var prevLead = this.lead;\n      if (node === prevLead) return;\n      this.prevLead = prevLead;\n      this.lead = node;\n      node.show();\n\n      if (prevLead) {\n        prevLead.instance && prevLead.scheduleRender();\n        node.scheduleRender();\n        node.resumeFrom = prevLead;\n\n        if (preserveFollowOpacity) {\n          node.resumeFrom.preserveOpacity = true;\n        }\n\n        if (prevLead.snapshot) {\n          node.snapshot = prevLead.snapshot;\n          node.snapshot.latestValues = prevLead.animationValues || prevLead.latestValues;\n          node.snapshot.isShared = true;\n        }\n\n        if ((_a = node.root) === null || _a === void 0 ? void 0 : _a.isUpdating) {\n          node.isLayoutDirty = true;\n        }\n\n        var crossfade = node.options.crossfade;\n\n        if (crossfade === false) {\n          prevLead.hide();\n        }\n        /**\n         * TODO:\n         *   - Test border radius when previous node was deleted\n         *   - boxShadow mixing\n         *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n         *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n         *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n         * ---\n         *   - Crossfade opacity of root nodes\n         *   - layoutId changes after animation\n         *   - layoutId changes mid animation\n         */\n\n      }\n    }\n  }, {\n    key: \"exitAnimationComplete\",\n    value: function exitAnimationComplete() {\n      this.members.forEach(function (node) {\n        var _a, _b, _c, _d, _e;\n\n        (_b = (_a = node.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n        (_e = (_c = node.resumingFrom) === null || _c === void 0 ? void 0 : (_d = _c.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d);\n      });\n    }\n  }, {\n    key: \"scheduleRender\",\n    value: function scheduleRender() {\n      this.members.forEach(function (node) {\n        node.instance && node.scheduleRender(false);\n      });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n\n  }, {\n    key: \"removeLeadSnapshot\",\n    value: function removeLeadSnapshot() {\n      if (this.lead && this.lead.snapshot) {\n        this.lead.snapshot = undefined;\n      }\n    }\n  }]);\n\n  return NodeStack;\n}();\n\nexport { NodeStack };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/projection/shared/stack.mjs"],"names":["addUniqueItem","removeItem","NodeStack","members","node","scheduleRender","prevLead","undefined","lead","length","promote","indexOfNode","findIndex","member","i","isPresent","preserveFollowOpacity","_a","show","instance","resumeFrom","preserveOpacity","snapshot","latestValues","animationValues","isShared","root","isUpdating","isLayoutDirty","crossfade","options","hide","forEach","_b","_c","_d","_e","onExitComplete","call","resumingFrom"],"mappings":"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","sourcesContent":["import { addUniqueItem, removeItem } from '../../utils/array.mjs';\n\nclass NodeStack {\n    constructor() {\n        this.members = [];\n    }\n    add(node) {\n        addUniqueItem(this.members, node);\n        node.scheduleRender();\n    }\n    remove(node) {\n        removeItem(this.members, node);\n        if (node === this.prevLead) {\n            this.prevLead = undefined;\n        }\n        if (node === this.lead) {\n            const prevLead = this.members[this.members.length - 1];\n            if (prevLead) {\n                this.promote(prevLead);\n            }\n        }\n    }\n    relegate(node) {\n        const indexOfNode = this.members.findIndex((member) => node === member);\n        if (indexOfNode === 0)\n            return false;\n        /**\n         * Find the next projection node that is present\n         */\n        let prevLead;\n        for (let i = indexOfNode; i >= 0; i--) {\n            const member = this.members[i];\n            if (member.isPresent !== false) {\n                prevLead = member;\n                break;\n            }\n        }\n        if (prevLead) {\n            this.promote(prevLead);\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    promote(node, preserveFollowOpacity) {\n        var _a;\n        const prevLead = this.lead;\n        if (node === prevLead)\n            return;\n        this.prevLead = prevLead;\n        this.lead = node;\n        node.show();\n        if (prevLead) {\n            prevLead.instance && prevLead.scheduleRender();\n            node.scheduleRender();\n            node.resumeFrom = prevLead;\n            if (preserveFollowOpacity) {\n                node.resumeFrom.preserveOpacity = true;\n            }\n            if (prevLead.snapshot) {\n                node.snapshot = prevLead.snapshot;\n                node.snapshot.latestValues =\n                    prevLead.animationValues || prevLead.latestValues;\n                node.snapshot.isShared = true;\n            }\n            if ((_a = node.root) === null || _a === void 0 ? void 0 : _a.isUpdating) {\n                node.isLayoutDirty = true;\n            }\n            const { crossfade } = node.options;\n            if (crossfade === false) {\n                prevLead.hide();\n            }\n            /**\n             * TODO:\n             *   - Test border radius when previous node was deleted\n             *   - boxShadow mixing\n             *   - Shared between element A in scrolled container and element B (scroll stays the same or changes)\n             *   - Shared between element A in transformed container and element B (transform stays the same or changes)\n             *   - Shared between element A in scrolled page and element B (scroll stays the same or changes)\n             * ---\n             *   - Crossfade opacity of root nodes\n             *   - layoutId changes after animation\n             *   - layoutId changes mid animation\n             */\n        }\n    }\n    exitAnimationComplete() {\n        this.members.forEach((node) => {\n            var _a, _b, _c, _d, _e;\n            (_b = (_a = node.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n            (_e = (_c = node.resumingFrom) === null || _c === void 0 ? void 0 : (_d = _c.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d);\n        });\n    }\n    scheduleRender() {\n        this.members.forEach((node) => {\n            node.instance && node.scheduleRender(false);\n        });\n    }\n    /**\n     * Clear any leads that have been removed this render to prevent them from being\n     * used in future animations and to prevent memory leaks\n     */\n    removeLeadSnapshot() {\n        if (this.lead && this.lead.snapshot) {\n            this.lead.snapshot = undefined;\n        }\n    }\n}\n\nexport { NodeStack };\n"]},"metadata":{},"sourceType":"module"}