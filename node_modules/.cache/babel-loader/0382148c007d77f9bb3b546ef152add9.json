{"ast":null,"code":"import { time } from '@motionone/utils';\nimport { calcGeneratorVelocity } from '../utils/velocity.es.js';\nimport { spring } from '../spring/index.es.js';\n\nconst glide = _ref => {\n  let {\n    from = 0,\n    velocity = 0.0,\n    power = 0.8,\n    decay = 0.325,\n    bounceDamping,\n    bounceStiffness,\n    changeTarget,\n    min,\n    max,\n    restDistance = 0.5,\n    restSpeed\n  } = _ref;\n  decay = time.ms(decay);\n  const state = {\n    hasReachedTarget: false,\n    done: false,\n    current: from,\n    target: from\n  };\n\n  const isOutOfBounds = v => min !== undefined && v < min || max !== undefined && v > max;\n\n  const nearestBoundary = v => {\n    if (min === undefined) return max;\n    if (max === undefined) return min;\n    return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n  };\n\n  let amplitude = power * velocity;\n  const ideal = from + amplitude;\n  const target = changeTarget === undefined ? ideal : changeTarget(ideal);\n  state.target = target;\n  /**\n   * If the target has changed we need to re-calculate the amplitude, otherwise\n   * the animation will start from the wrong position.\n   */\n\n  if (target !== ideal) amplitude = target - from;\n\n  const calcDelta = t => -amplitude * Math.exp(-t / decay);\n\n  const calcLatest = t => target + calcDelta(t);\n\n  const applyFriction = t => {\n    const delta = calcDelta(t);\n    const latest = calcLatest(t);\n    state.done = Math.abs(delta) <= restDistance;\n    state.current = state.done ? target : latest;\n  };\n  /**\n   * Ideally this would resolve for t in a stateless way, we could\n   * do that by always precalculating the animation but as we know\n   * this will be done anyway we can assume that spring will\n   * be discovered during that.\n   */\n\n\n  let timeReachedBoundary;\n  let spring$1;\n\n  const checkCatchBoundary = t => {\n    if (!isOutOfBounds(state.current)) return;\n    timeReachedBoundary = t;\n    spring$1 = spring({\n      from: state.current,\n      to: nearestBoundary(state.current),\n      velocity: calcGeneratorVelocity(calcLatest, t, state.current),\n      damping: bounceDamping,\n      stiffness: bounceStiffness,\n      restDistance,\n      restSpeed\n    });\n  };\n\n  checkCatchBoundary(0);\n  return t => {\n    /**\n     * We need to resolve the friction to figure out if we need a\n     * spring but we don't want to do this twice per frame. So here\n     * we flag if we updated for this frame and later if we did\n     * we can skip doing it again.\n     */\n    let hasUpdatedFrame = false;\n\n    if (!spring$1 && timeReachedBoundary === undefined) {\n      hasUpdatedFrame = true;\n      applyFriction(t);\n      checkCatchBoundary(t);\n    }\n    /**\n     * If we have a spring and the provided t is beyond the moment the friction\n     * animation crossed the min/max boundary, use the spring.\n     */\n\n\n    if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n      state.hasReachedTarget = true;\n      return spring$1(t - timeReachedBoundary);\n    } else {\n      state.hasReachedTarget = false;\n      !hasUpdatedFrame && applyFriction(t);\n      return state;\n    }\n  };\n};\n\nexport { glide };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/@motionone/generators/dist/glide/index.es.js"],"names":["time","calcGeneratorVelocity","spring","glide","from","velocity","power","decay","bounceDamping","bounceStiffness","changeTarget","min","max","restDistance","restSpeed","ms","state","hasReachedTarget","done","current","target","isOutOfBounds","v","undefined","nearestBoundary","Math","abs","amplitude","ideal","calcDelta","t","exp","calcLatest","applyFriction","delta","latest","timeReachedBoundary","spring$1","checkCatchBoundary","to","damping","stiffness","hasUpdatedFrame"],"mappings":"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","sourcesContent":["import { time } from '@motionone/utils';\nimport { calcGeneratorVelocity } from '../utils/velocity.es.js';\nimport { spring } from '../spring/index.es.js';\n\nconst glide = ({ from = 0, velocity = 0.0, power = 0.8, decay = 0.325, bounceDamping, bounceStiffness, changeTarget, min, max, restDistance = 0.5, restSpeed, }) => {\n    decay = time.ms(decay);\n    const state = {\n        hasReachedTarget: false,\n        done: false,\n        current: from,\n        target: from,\n    };\n    const isOutOfBounds = (v) => (min !== undefined && v < min) || (max !== undefined && v > max);\n    const nearestBoundary = (v) => {\n        if (min === undefined)\n            return max;\n        if (max === undefined)\n            return min;\n        return Math.abs(min - v) < Math.abs(max - v) ? min : max;\n    };\n    let amplitude = power * velocity;\n    const ideal = from + amplitude;\n    const target = changeTarget === undefined ? ideal : changeTarget(ideal);\n    state.target = target;\n    /**\n     * If the target has changed we need to re-calculate the amplitude, otherwise\n     * the animation will start from the wrong position.\n     */\n    if (target !== ideal)\n        amplitude = target - from;\n    const calcDelta = (t) => -amplitude * Math.exp(-t / decay);\n    const calcLatest = (t) => target + calcDelta(t);\n    const applyFriction = (t) => {\n        const delta = calcDelta(t);\n        const latest = calcLatest(t);\n        state.done = Math.abs(delta) <= restDistance;\n        state.current = state.done ? target : latest;\n    };\n    /**\n     * Ideally this would resolve for t in a stateless way, we could\n     * do that by always precalculating the animation but as we know\n     * this will be done anyway we can assume that spring will\n     * be discovered during that.\n     */\n    let timeReachedBoundary;\n    let spring$1;\n    const checkCatchBoundary = (t) => {\n        if (!isOutOfBounds(state.current))\n            return;\n        timeReachedBoundary = t;\n        spring$1 = spring({\n            from: state.current,\n            to: nearestBoundary(state.current),\n            velocity: calcGeneratorVelocity(calcLatest, t, state.current),\n            damping: bounceDamping,\n            stiffness: bounceStiffness,\n            restDistance,\n            restSpeed,\n        });\n    };\n    checkCatchBoundary(0);\n    return (t) => {\n        /**\n         * We need to resolve the friction to figure out if we need a\n         * spring but we don't want to do this twice per frame. So here\n         * we flag if we updated for this frame and later if we did\n         * we can skip doing it again.\n         */\n        let hasUpdatedFrame = false;\n        if (!spring$1 && timeReachedBoundary === undefined) {\n            hasUpdatedFrame = true;\n            applyFriction(t);\n            checkCatchBoundary(t);\n        }\n        /**\n         * If we have a spring and the provided t is beyond the moment the friction\n         * animation crossed the min/max boundary, use the spring.\n         */\n        if (timeReachedBoundary !== undefined && t > timeReachedBoundary) {\n            state.hasReachedTarget = true;\n            return spring$1(t - timeReachedBoundary);\n        }\n        else {\n            state.hasReachedTarget = false;\n            !hasUpdatedFrame && applyFriction(t);\n            return state;\n        }\n    };\n};\n\nexport { glide };\n"]},"metadata":{},"sourceType":"module"}