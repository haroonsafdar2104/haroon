{"ast":null,"code":"import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nconst names = [\"LayoutMeasure\", \"BeforeLayoutMeasure\", \"LayoutUpdate\", \"ViewportBoxUpdate\", \"Update\", \"Render\", \"AnimationComplete\", \"LayoutAnimationComplete\", \"AnimationStart\", \"LayoutAnimationStart\", \"SetAxisTarget\", \"Unmount\"];\n\nfunction createLifecycles() {\n  const managers = names.map(() => new SubscriptionManager());\n  const propSubscriptions = {};\n  const lifecycles = {\n    clearAllListeners: () => managers.forEach(manager => manager.clear()),\n    updatePropListeners: props => {\n      names.forEach(name => {\n        var _a;\n\n        const on = \"on\" + name;\n        const propListener = props[on]; // Unsubscribe existing subscription\n\n        (_a = propSubscriptions[name]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions); // Add new subscription\n\n        if (propListener) {\n          propSubscriptions[name] = lifecycles[on](propListener);\n        }\n      });\n    }\n  };\n  managers.forEach((manager, i) => {\n    lifecycles[\"on\" + names[i]] = handler => manager.add(handler);\n\n    lifecycles[\"notify\" + names[i]] = function () {\n      return manager.notify(...arguments);\n    };\n  });\n  return lifecycles;\n}\n\nexport { createLifecycles };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/render/utils/lifecycles.mjs"],"names":["SubscriptionManager","names","createLifecycles","managers","map","propSubscriptions","lifecycles","clearAllListeners","forEach","manager","clear","updatePropListeners","props","name","_a","on","propListener","call","i","handler","add","notify"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,sCAApC;AAEA,MAAMC,KAAK,GAAG,CACV,eADU,EAEV,qBAFU,EAGV,cAHU,EAIV,mBAJU,EAKV,QALU,EAMV,QANU,EAOV,mBAPU,EAQV,yBARU,EASV,gBATU,EAUV,sBAVU,EAWV,eAXU,EAYV,SAZU,CAAd;;AAcA,SAASC,gBAAT,GAA4B;AACxB,QAAMC,QAAQ,GAAGF,KAAK,CAACG,GAAN,CAAU,MAAM,IAAIJ,mBAAJ,EAAhB,CAAjB;AACA,QAAMK,iBAAiB,GAAG,EAA1B;AACA,QAAMC,UAAU,GAAG;AACfC,IAAAA,iBAAiB,EAAE,MAAMJ,QAAQ,CAACK,OAAT,CAAkBC,OAAD,IAAaA,OAAO,CAACC,KAAR,EAA9B,CADV;AAEfC,IAAAA,mBAAmB,EAAGC,KAAD,IAAW;AAC5BX,MAAAA,KAAK,CAACO,OAAN,CAAeK,IAAD,IAAU;AACpB,YAAIC,EAAJ;;AACA,cAAMC,EAAE,GAAG,OAAOF,IAAlB;AACA,cAAMG,YAAY,GAAGJ,KAAK,CAACG,EAAD,CAA1B,CAHoB,CAIpB;;AACA,SAACD,EAAE,GAAGT,iBAAiB,CAACQ,IAAD,CAAvB,MAAmC,IAAnC,IAA2CC,EAAE,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,EAAE,CAACG,IAAH,CAAQZ,iBAAR,CAApE,CALoB,CAMpB;;AACA,YAAIW,YAAJ,EAAkB;AACdX,UAAAA,iBAAiB,CAACQ,IAAD,CAAjB,GAA0BP,UAAU,CAACS,EAAD,CAAV,CAAeC,YAAf,CAA1B;AACH;AACJ,OAVD;AAWH;AAdc,GAAnB;AAgBAb,EAAAA,QAAQ,CAACK,OAAT,CAAiB,CAACC,OAAD,EAAUS,CAAV,KAAgB;AAC7BZ,IAAAA,UAAU,CAAC,OAAOL,KAAK,CAACiB,CAAD,CAAb,CAAV,GAA+BC,OAAD,IAAaV,OAAO,CAACW,GAAR,CAAYD,OAAZ,CAA3C;;AACAb,IAAAA,UAAU,CAAC,WAAWL,KAAK,CAACiB,CAAD,CAAjB,CAAV,GAAkC;AAAA,aAAaT,OAAO,CAACY,MAAR,CAAe,YAAf,CAAb;AAAA,KAAlC;AACH,GAHD;AAIA,SAAOf,UAAP;AACH;;AAED,SAASJ,gBAAT","sourcesContent":["import { SubscriptionManager } from '../../utils/subscription-manager.mjs';\n\nconst names = [\n    \"LayoutMeasure\",\n    \"BeforeLayoutMeasure\",\n    \"LayoutUpdate\",\n    \"ViewportBoxUpdate\",\n    \"Update\",\n    \"Render\",\n    \"AnimationComplete\",\n    \"LayoutAnimationComplete\",\n    \"AnimationStart\",\n    \"LayoutAnimationStart\",\n    \"SetAxisTarget\",\n    \"Unmount\",\n];\nfunction createLifecycles() {\n    const managers = names.map(() => new SubscriptionManager());\n    const propSubscriptions = {};\n    const lifecycles = {\n        clearAllListeners: () => managers.forEach((manager) => manager.clear()),\n        updatePropListeners: (props) => {\n            names.forEach((name) => {\n                var _a;\n                const on = \"on\" + name;\n                const propListener = props[on];\n                // Unsubscribe existing subscription\n                (_a = propSubscriptions[name]) === null || _a === void 0 ? void 0 : _a.call(propSubscriptions);\n                // Add new subscription\n                if (propListener) {\n                    propSubscriptions[name] = lifecycles[on](propListener);\n                }\n            });\n        },\n    };\n    managers.forEach((manager, i) => {\n        lifecycles[\"on\" + names[i]] = (handler) => manager.add(handler);\n        lifecycles[\"notify\" + names[i]] = (...args) => manager.notify(...args);\n    });\n    return lifecycles;\n}\n\nexport { createLifecycles };\n"]},"metadata":{},"sourceType":"module"}