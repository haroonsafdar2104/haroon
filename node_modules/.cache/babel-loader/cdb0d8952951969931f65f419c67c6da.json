{"ast":null,"code":"import _objectSpread from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { startAnimation } from '../../animation/utils/transitions.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\nimport { mix } from 'popmotion';\nimport { percent } from 'style-value-types';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\nvar elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: AnyPointerEvent\n\nvar VisualElementDragControls = /*#__PURE__*/function () {\n  function VisualElementDragControls(visualElement) {\n    _classCallCheck(this, VisualElementDragControls);\n\n    // This is a reference to the global drag gesture lock, ensuring only one component\n    // can \"capture\" the drag of one or both axes.\n    // TODO: Look into moving this into pansession?\n    this.openGlobalLock = null;\n    this.isDragging = false;\n    this.currentDirection = null;\n    this.originPoint = {\n      x: 0,\n      y: 0\n    };\n    /**\n     * The permitted boundaries of travel, in pixels.\n     */\n\n    this.constraints = false;\n    this.hasMutatedConstraints = false;\n    /**\n     * The per-axis resolved elastic values.\n     */\n\n    this.elastic = createBox();\n    this.visualElement = visualElement;\n  }\n\n  _createClass(VisualElementDragControls, [{\n    key: \"start\",\n    value: function start(originEvent) {\n      var _this = this;\n\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref$snapToCursor = _ref.snapToCursor,\n          snapToCursor = _ref$snapToCursor === void 0 ? false : _ref$snapToCursor;\n\n      /**\n       * Don't start dragging if this component is exiting\n       */\n      if (this.visualElement.isPresent === false) return;\n\n      var onSessionStart = function onSessionStart(event) {\n        // Stop any animations on both axis values immediately. This allows the user to throw and catch\n        // the component.\n        _this.stopAnimation();\n\n        if (snapToCursor) {\n          _this.snapToCursor(extractEventInfo(event, \"page\").point);\n        }\n      };\n\n      var onStart = function onStart(event, info) {\n        var _a; // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n\n\n        var _this$getProps = _this.getProps(),\n            drag = _this$getProps.drag,\n            dragPropagation = _this$getProps.dragPropagation,\n            onDragStart = _this$getProps.onDragStart;\n\n        if (drag && !dragPropagation) {\n          if (_this.openGlobalLock) _this.openGlobalLock();\n          _this.openGlobalLock = getGlobalLock(drag); // If we don 't have the lock, don't start dragging\n\n          if (!_this.openGlobalLock) return;\n        }\n\n        _this.isDragging = true;\n        _this.currentDirection = null;\n\n        _this.resolveConstraints();\n\n        if (_this.visualElement.projection) {\n          _this.visualElement.projection.isAnimationBlocked = true;\n          _this.visualElement.projection.target = undefined;\n        }\n        /**\n         * Record gesture origin\n         */\n\n\n        eachAxis(function (axis) {\n          var _a, _b;\n\n          var current = _this.getAxisMotionValue(axis).get() || 0;\n          /**\n           * If the MotionValue is a percentage value convert to px\n           */\n\n          if (percent.test(current)) {\n            var measuredAxis = (_b = (_a = _this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.actual[axis];\n\n            if (measuredAxis) {\n              var length = calcLength(measuredAxis);\n              current = length * (parseFloat(current) / 100);\n            }\n          }\n\n          _this.originPoint[axis] = current;\n        }); // Fire onDragStart event\n\n        onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n        (_a = _this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\n      };\n\n      var onMove = function onMove(event, info) {\n        // latestPointerEvent = event\n        var _this$getProps2 = _this.getProps(),\n            dragPropagation = _this$getProps2.dragPropagation,\n            dragDirectionLock = _this$getProps2.dragDirectionLock,\n            onDirectionLock = _this$getProps2.onDirectionLock,\n            onDrag = _this$getProps2.onDrag; // If we didn't successfully receive the gesture lock, early return.\n\n\n        if (!dragPropagation && !_this.openGlobalLock) return;\n        var offset = info.offset; // Attempt to detect drag direction if directionLock is true\n\n        if (dragDirectionLock && _this.currentDirection === null) {\n          _this.currentDirection = getCurrentDirection(offset); // If we've successfully set a direction, notify listener\n\n          if (_this.currentDirection !== null) {\n            onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(_this.currentDirection);\n          }\n\n          return;\n        } // Update each point with the latest position\n\n\n        _this.updateAxis(\"x\", info.point, offset);\n\n        _this.updateAxis(\"y\", info.point, offset);\n        /**\n         * Ideally we would leave the renderer to fire naturally at the end of\n         * this frame but if the element is about to change layout as the result\n         * of a re-render we want to ensure the browser can read the latest\n         * bounding box to ensure the pointer and element don't fall out of sync.\n         */\n\n\n        _this.visualElement.syncRender();\n        /**\n         * This must fire after the syncRender call as it might trigger a state\n         * change which itself might trigger a layout update.\n         */\n\n\n        onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n      };\n\n      var onSessionEnd = function onSessionEnd(event, info) {\n        return _this.stop(event, info);\n      };\n\n      this.panSession = new PanSession(originEvent, {\n        onSessionStart: onSessionStart,\n        onStart: onStart,\n        onMove: onMove,\n        onSessionEnd: onSessionEnd\n      }, {\n        transformPagePoint: this.visualElement.getTransformPagePoint()\n      });\n    }\n  }, {\n    key: \"stop\",\n    value: function stop(event, info) {\n      var isDragging = this.isDragging;\n      this.cancel();\n      if (!isDragging) return;\n      var velocity = info.velocity;\n      this.startAnimation(velocity);\n\n      var _this$getProps3 = this.getProps(),\n          onDragEnd = _this$getProps3.onDragEnd;\n\n      onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n    }\n  }, {\n    key: \"cancel\",\n    value: function cancel() {\n      var _a, _b;\n\n      this.isDragging = false;\n\n      if (this.visualElement.projection) {\n        this.visualElement.projection.isAnimationBlocked = false;\n      }\n\n      (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n      this.panSession = undefined;\n\n      var _this$getProps4 = this.getProps(),\n          dragPropagation = _this$getProps4.dragPropagation;\n\n      if (!dragPropagation && this.openGlobalLock) {\n        this.openGlobalLock();\n        this.openGlobalLock = null;\n      }\n\n      (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n    }\n  }, {\n    key: \"updateAxis\",\n    value: function updateAxis(axis, _point, offset) {\n      var _this$getProps5 = this.getProps(),\n          drag = _this$getProps5.drag; // If we're not dragging this axis, do an early return.\n\n\n      if (!offset || !shouldDrag(axis, drag, this.currentDirection)) return;\n      var axisValue = this.getAxisMotionValue(axis);\n      var next = this.originPoint[axis] + offset[axis]; // Apply constraints\n\n      if (this.constraints && this.constraints[axis]) {\n        next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n      }\n\n      axisValue.set(next);\n    }\n  }, {\n    key: \"resolveConstraints\",\n    value: function resolveConstraints() {\n      var _this2 = this;\n\n      var _this$getProps6 = this.getProps(),\n          dragConstraints = _this$getProps6.dragConstraints,\n          dragElastic = _this$getProps6.dragElastic;\n\n      var _ref2 = this.visualElement.projection || {},\n          layout = _ref2.layout;\n\n      var prevConstraints = this.constraints;\n\n      if (dragConstraints && isRefObject(dragConstraints)) {\n        if (!this.constraints) {\n          this.constraints = this.resolveRefConstraints();\n        }\n      } else {\n        if (dragConstraints && layout) {\n          this.constraints = calcRelativeConstraints(layout.actual, dragConstraints);\n        } else {\n          this.constraints = false;\n        }\n      }\n\n      this.elastic = resolveDragElastic(dragElastic);\n      /**\n       * If we're outputting to external MotionValues, we want to rebase the measured constraints\n       * from viewport-relative to component-relative.\n       */\n\n      if (prevConstraints !== this.constraints && layout && this.constraints && !this.hasMutatedConstraints) {\n        eachAxis(function (axis) {\n          if (_this2.getAxisMotionValue(axis)) {\n            _this2.constraints[axis] = rebaseAxisConstraints(layout.actual[axis], _this2.constraints[axis]);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"resolveRefConstraints\",\n    value: function resolveRefConstraints() {\n      var _this$getProps7 = this.getProps(),\n          constraints = _this$getProps7.dragConstraints,\n          onMeasureDragConstraints = _this$getProps7.onMeasureDragConstraints;\n\n      if (!constraints || !isRefObject(constraints)) return false;\n      var constraintsElement = constraints.current;\n      invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n      var projection = this.visualElement.projection; // TODO\n\n      if (!projection || !projection.layout) return false;\n      var constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n      var measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);\n      /**\n       * If there's an onMeasureDragConstraints listener we call it and\n       * if different constraints are returned, set constraints to that\n       */\n\n      if (onMeasureDragConstraints) {\n        var userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n        this.hasMutatedConstraints = !!userConstraints;\n\n        if (userConstraints) {\n          measuredConstraints = convertBoundingBoxToBox(userConstraints);\n        }\n      }\n\n      return measuredConstraints;\n    }\n  }, {\n    key: \"startAnimation\",\n    value: function startAnimation(velocity) {\n      var _this3 = this;\n\n      var _this$getProps8 = this.getProps(),\n          drag = _this$getProps8.drag,\n          dragMomentum = _this$getProps8.dragMomentum,\n          dragElastic = _this$getProps8.dragElastic,\n          dragTransition = _this$getProps8.dragTransition,\n          dragSnapToOrigin = _this$getProps8.dragSnapToOrigin,\n          onDragTransitionEnd = _this$getProps8.onDragTransitionEnd;\n\n      var constraints = this.constraints || {};\n      var momentumAnimations = eachAxis(function (axis) {\n        var _a;\n\n        if (!shouldDrag(axis, drag, _this3.currentDirection)) {\n          return;\n        }\n\n        var transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n        if (dragSnapToOrigin) transition = {\n          min: 0,\n          max: 0\n        };\n        /**\n         * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n         * of spring animations so we should look into adding a disable spring option to `inertia`.\n         * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n         * using the value of `dragElastic`.\n         */\n\n        var bounceStiffness = dragElastic ? 200 : 1000000;\n        var bounceDamping = dragElastic ? 40 : 10000000;\n\n        var inertia = _objectSpread(_objectSpread({\n          type: \"inertia\",\n          velocity: dragMomentum ? velocity[axis] : 0,\n          bounceStiffness: bounceStiffness,\n          bounceDamping: bounceDamping,\n          timeConstant: 750,\n          restDelta: 1,\n          restSpeed: 10\n        }, dragTransition), transition); // If we're not animating on an externally-provided `MotionValue` we can use the\n        // component's animation controls which will handle interactions with whileHover (etc),\n        // otherwise we just have to animate the `MotionValue` itself.\n\n\n        return _this3.startAxisValueAnimation(axis, inertia);\n      }); // Run all animations and then resolve the new drag constraints.\n\n      return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n  }, {\n    key: \"startAxisValueAnimation\",\n    value: function startAxisValueAnimation(axis, transition) {\n      var axisValue = this.getAxisMotionValue(axis);\n      return startAnimation(axis, axisValue, 0, transition);\n    }\n  }, {\n    key: \"stopAnimation\",\n    value: function stopAnimation() {\n      var _this4 = this;\n\n      eachAxis(function (axis) {\n        return _this4.getAxisMotionValue(axis).stop();\n      });\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n\n  }, {\n    key: \"getAxisMotionValue\",\n    value: function getAxisMotionValue(axis) {\n      var _a, _b;\n\n      var dragKey = \"_drag\" + axis.toUpperCase();\n      var externalMotionValue = this.visualElement.getProps()[dragKey];\n      return externalMotionValue ? externalMotionValue : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);\n    }\n  }, {\n    key: \"snapToCursor\",\n    value: function snapToCursor(point) {\n      var _this5 = this;\n\n      eachAxis(function (axis) {\n        var _this5$getProps = _this5.getProps(),\n            drag = _this5$getProps.drag; // If we're not dragging this axis, do an early return.\n\n\n        if (!shouldDrag(axis, drag, _this5.currentDirection)) return;\n        var projection = _this5.visualElement.projection;\n\n        var axisValue = _this5.getAxisMotionValue(axis);\n\n        if (projection && projection.layout) {\n          var _projection$layout$ac = projection.layout.actual[axis],\n              min = _projection$layout$ac.min,\n              max = _projection$layout$ac.max;\n          axisValue.set(point[axis] - mix(min, max, 0.5));\n        }\n      });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n\n  }, {\n    key: \"scalePositionWithinConstraints\",\n    value: function scalePositionWithinConstraints() {\n      var _this6 = this;\n\n      var _a;\n\n      var _this$getProps9 = this.getProps(),\n          drag = _this$getProps9.drag,\n          dragConstraints = _this$getProps9.dragConstraints;\n\n      var projection = this.visualElement.projection;\n      if (!isRefObject(dragConstraints) || !projection || !this.constraints) return;\n      /**\n       * Stop current animations as there can be visual glitching if we try to do\n       * this mid-animation\n       */\n\n      this.stopAnimation();\n      /**\n       * Record the relative position of the dragged element relative to the\n       * constraints box and save as a progress value.\n       */\n\n      var boxProgress = {\n        x: 0,\n        y: 0\n      };\n      eachAxis(function (axis) {\n        var axisValue = _this6.getAxisMotionValue(axis);\n\n        if (axisValue) {\n          var latest = axisValue.get();\n          boxProgress[axis] = calcOrigin({\n            min: latest,\n            max: latest\n          }, _this6.constraints[axis]);\n        }\n      });\n      /**\n       * Update the layout of this element and resolve the latest drag constraints\n       */\n\n      var _this$visualElement$g = this.visualElement.getProps(),\n          transformTemplate = _this$visualElement$g.transformTemplate;\n\n      this.visualElement.getInstance().style.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n      (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n      projection.updateLayout();\n      this.resolveConstraints();\n      /**\n       * For each axis, calculate the current progress of the layout axis\n       * within the new constraints.\n       */\n\n      eachAxis(function (axis) {\n        if (!shouldDrag(axis, drag, null)) return;\n        /**\n         * Calculate a new transform based on the previous box progress\n         */\n\n        var axisValue = _this6.getAxisMotionValue(axis);\n\n        var _this6$constraints$ax = _this6.constraints[axis],\n            min = _this6$constraints$ax.min,\n            max = _this6$constraints$ax.max;\n        axisValue.set(mix(min, max, boxProgress[axis]));\n      });\n    }\n  }, {\n    key: \"addListeners\",\n    value: function addListeners() {\n      var _this7 = this;\n\n      var _a;\n\n      elementDragControls.set(this.visualElement, this);\n      var element = this.visualElement.getInstance();\n      /**\n       * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n       */\n\n      var stopPointerListener = addPointerEvent(element, \"pointerdown\", function (event) {\n        var _this7$getProps = _this7.getProps(),\n            drag = _this7$getProps.drag,\n            _this7$getProps$dragL = _this7$getProps.dragListener,\n            dragListener = _this7$getProps$dragL === void 0 ? true : _this7$getProps$dragL;\n\n        drag && dragListener && _this7.start(event);\n      });\n\n      var measureDragConstraints = function measureDragConstraints() {\n        var _this7$getProps2 = _this7.getProps(),\n            dragConstraints = _this7$getProps2.dragConstraints;\n\n        if (isRefObject(dragConstraints)) {\n          _this7.constraints = _this7.resolveRefConstraints();\n        }\n      };\n\n      var projection = this.visualElement.projection;\n      var stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n\n      if (projection && !projection.layout) {\n        (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n        projection.updateLayout();\n      }\n\n      measureDragConstraints();\n      /**\n       * Attach a window resize listener to scale the draggable target within its defined\n       * constraints as the window resizes.\n       */\n\n      var stopResizeListener = addDomEvent(window, \"resize\", function () {\n        return _this7.scalePositionWithinConstraints();\n      });\n      /**\n       * If the element's layout changes, calculate the delta and apply that to\n       * the drag gesture's origin point.\n       */\n\n      var stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", function (_ref3) {\n        var delta = _ref3.delta,\n            hasLayoutChanged = _ref3.hasLayoutChanged;\n\n        if (_this7.isDragging && hasLayoutChanged) {\n          eachAxis(function (axis) {\n            var motionValue = _this7.getAxisMotionValue(axis);\n\n            if (!motionValue) return;\n            _this7.originPoint[axis] += delta[axis].translate;\n            motionValue.set(motionValue.get() + delta[axis].translate);\n          });\n\n          _this7.visualElement.syncRender();\n        }\n      });\n      return function () {\n        stopResizeListener();\n        stopPointerListener();\n        stopMeasureLayoutListener();\n        stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n      };\n    }\n  }, {\n    key: \"getProps\",\n    value: function getProps() {\n      var props = this.visualElement.getProps();\n      var _props$drag = props.drag,\n          drag = _props$drag === void 0 ? false : _props$drag,\n          _props$dragDirectionL = props.dragDirectionLock,\n          dragDirectionLock = _props$dragDirectionL === void 0 ? false : _props$dragDirectionL,\n          _props$dragPropagatio = props.dragPropagation,\n          dragPropagation = _props$dragPropagatio === void 0 ? false : _props$dragPropagatio,\n          _props$dragConstraint = props.dragConstraints,\n          dragConstraints = _props$dragConstraint === void 0 ? false : _props$dragConstraint,\n          _props$dragElastic = props.dragElastic,\n          dragElastic = _props$dragElastic === void 0 ? defaultElastic : _props$dragElastic,\n          _props$dragMomentum = props.dragMomentum,\n          dragMomentum = _props$dragMomentum === void 0 ? true : _props$dragMomentum;\n      return _objectSpread(_objectSpread({}, props), {}, {\n        drag: drag,\n        dragDirectionLock: dragDirectionLock,\n        dragPropagation: dragPropagation,\n        dragConstraints: dragConstraints,\n        dragElastic: dragElastic,\n        dragMomentum: dragMomentum\n      });\n    }\n  }]);\n\n  return VisualElementDragControls;\n}();\n\nfunction shouldDrag(direction, drag, currentDirection) {\n  return (drag === true || drag === direction) && (currentDirection === null || currentDirection === direction);\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\n\n\nfunction getCurrentDirection(offset) {\n  var lockThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n  var direction = null;\n\n  if (Math.abs(offset.y) > lockThreshold) {\n    direction = \"y\";\n  } else if (Math.abs(offset.x) > lockThreshold) {\n    direction = \"x\";\n  }\n\n  return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.mjs"],"names":["invariant","PanSession","getGlobalLock","isRefObject","addPointerEvent","applyConstraints","calcRelativeConstraints","resolveDragElastic","rebaseAxisConstraints","calcViewportConstraints","calcOrigin","defaultElastic","AnimationType","createBox","eachAxis","measurePageBox","extractEventInfo","startAnimation","convertBoxToBoundingBox","convertBoundingBoxToBox","addDomEvent","mix","percent","calcLength","elementDragControls","WeakMap","VisualElementDragControls","visualElement","openGlobalLock","isDragging","currentDirection","originPoint","x","y","constraints","hasMutatedConstraints","elastic","originEvent","snapToCursor","isPresent","onSessionStart","event","stopAnimation","point","onStart","info","_a","getProps","drag","dragPropagation","onDragStart","resolveConstraints","projection","isAnimationBlocked","target","undefined","axis","_b","current","getAxisMotionValue","get","test","measuredAxis","layout","actual","length","parseFloat","animationState","setActive","Drag","onMove","dragDirectionLock","onDirectionLock","onDrag","offset","getCurrentDirection","updateAxis","syncRender","onSessionEnd","stop","panSession","transformPagePoint","getTransformPagePoint","cancel","velocity","onDragEnd","end","_point","shouldDrag","axisValue","next","set","dragConstraints","dragElastic","prevConstraints","resolveRefConstraints","onMeasureDragConstraints","constraintsElement","constraintsBox","root","measuredConstraints","userConstraints","dragMomentum","dragTransition","dragSnapToOrigin","onDragTransitionEnd","momentumAnimations","transition","min","max","bounceStiffness","bounceDamping","inertia","type","timeConstant","restDelta","restSpeed","startAxisValueAnimation","Promise","all","then","dragKey","toUpperCase","externalMotionValue","getValue","initial","boxProgress","latest","transformTemplate","getInstance","style","transform","updateScroll","updateLayout","element","stopPointerListener","dragListener","start","measureDragConstraints","stopMeasureLayoutListener","addEventListener","stopResizeListener","window","scalePositionWithinConstraints","stopLayoutUpdateListener","delta","hasLayoutChanged","motionValue","translate","props","direction","lockThreshold","Math","abs"],"mappings":"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","sourcesContent":["import { invariant } from 'hey-listen';\nimport { PanSession } from '../PanSession.mjs';\nimport { getGlobalLock } from './utils/lock.mjs';\nimport { isRefObject } from '../../utils/is-ref-object.mjs';\nimport { addPointerEvent } from '../../events/use-pointer-event.mjs';\nimport { applyConstraints, calcRelativeConstraints, resolveDragElastic, rebaseAxisConstraints, calcViewportConstraints, calcOrigin, defaultElastic } from './utils/constraints.mjs';\nimport { AnimationType } from '../../render/utils/types.mjs';\nimport { createBox } from '../../projection/geometry/models.mjs';\nimport { eachAxis } from '../../projection/utils/each-axis.mjs';\nimport { measurePageBox } from '../../projection/utils/measure.mjs';\nimport { extractEventInfo } from '../../events/event-info.mjs';\nimport { startAnimation } from '../../animation/utils/transitions.mjs';\nimport { convertBoxToBoundingBox, convertBoundingBoxToBox } from '../../projection/geometry/conversion.mjs';\nimport { addDomEvent } from '../../events/use-dom-event.mjs';\nimport { mix } from 'popmotion';\nimport { percent } from 'style-value-types';\nimport { calcLength } from '../../projection/geometry/delta-calc.mjs';\n\nconst elementDragControls = new WeakMap();\n/**\n *\n */\n// let latestPointerEvent: AnyPointerEvent\nclass VisualElementDragControls {\n    constructor(visualElement) {\n        // This is a reference to the global drag gesture lock, ensuring only one component\n        // can \"capture\" the drag of one or both axes.\n        // TODO: Look into moving this into pansession?\n        this.openGlobalLock = null;\n        this.isDragging = false;\n        this.currentDirection = null;\n        this.originPoint = { x: 0, y: 0 };\n        /**\n         * The permitted boundaries of travel, in pixels.\n         */\n        this.constraints = false;\n        this.hasMutatedConstraints = false;\n        /**\n         * The per-axis resolved elastic values.\n         */\n        this.elastic = createBox();\n        this.visualElement = visualElement;\n    }\n    start(originEvent, { snapToCursor = false } = {}) {\n        /**\n         * Don't start dragging if this component is exiting\n         */\n        if (this.visualElement.isPresent === false)\n            return;\n        const onSessionStart = (event) => {\n            // Stop any animations on both axis values immediately. This allows the user to throw and catch\n            // the component.\n            this.stopAnimation();\n            if (snapToCursor) {\n                this.snapToCursor(extractEventInfo(event, \"page\").point);\n            }\n        };\n        const onStart = (event, info) => {\n            var _a;\n            // Attempt to grab the global drag gesture lock - maybe make this part of PanSession\n            const { drag, dragPropagation, onDragStart } = this.getProps();\n            if (drag && !dragPropagation) {\n                if (this.openGlobalLock)\n                    this.openGlobalLock();\n                this.openGlobalLock = getGlobalLock(drag);\n                // If we don 't have the lock, don't start dragging\n                if (!this.openGlobalLock)\n                    return;\n            }\n            this.isDragging = true;\n            this.currentDirection = null;\n            this.resolveConstraints();\n            if (this.visualElement.projection) {\n                this.visualElement.projection.isAnimationBlocked = true;\n                this.visualElement.projection.target = undefined;\n            }\n            /**\n             * Record gesture origin\n             */\n            eachAxis((axis) => {\n                var _a, _b;\n                let current = this.getAxisMotionValue(axis).get() || 0;\n                /**\n                 * If the MotionValue is a percentage value convert to px\n                 */\n                if (percent.test(current)) {\n                    const measuredAxis = (_b = (_a = this.visualElement.projection) === null || _a === void 0 ? void 0 : _a.layout) === null || _b === void 0 ? void 0 : _b.actual[axis];\n                    if (measuredAxis) {\n                        const length = calcLength(measuredAxis);\n                        current = length * (parseFloat(current) / 100);\n                    }\n                }\n                this.originPoint[axis] = current;\n            });\n            // Fire onDragStart event\n            onDragStart === null || onDragStart === void 0 ? void 0 : onDragStart(event, info);\n            (_a = this.visualElement.animationState) === null || _a === void 0 ? void 0 : _a.setActive(AnimationType.Drag, true);\n        };\n        const onMove = (event, info) => {\n            // latestPointerEvent = event\n            const { dragPropagation, dragDirectionLock, onDirectionLock, onDrag, } = this.getProps();\n            // If we didn't successfully receive the gesture lock, early return.\n            if (!dragPropagation && !this.openGlobalLock)\n                return;\n            const { offset } = info;\n            // Attempt to detect drag direction if directionLock is true\n            if (dragDirectionLock && this.currentDirection === null) {\n                this.currentDirection = getCurrentDirection(offset);\n                // If we've successfully set a direction, notify listener\n                if (this.currentDirection !== null) {\n                    onDirectionLock === null || onDirectionLock === void 0 ? void 0 : onDirectionLock(this.currentDirection);\n                }\n                return;\n            }\n            // Update each point with the latest position\n            this.updateAxis(\"x\", info.point, offset);\n            this.updateAxis(\"y\", info.point, offset);\n            /**\n             * Ideally we would leave the renderer to fire naturally at the end of\n             * this frame but if the element is about to change layout as the result\n             * of a re-render we want to ensure the browser can read the latest\n             * bounding box to ensure the pointer and element don't fall out of sync.\n             */\n            this.visualElement.syncRender();\n            /**\n             * This must fire after the syncRender call as it might trigger a state\n             * change which itself might trigger a layout update.\n             */\n            onDrag === null || onDrag === void 0 ? void 0 : onDrag(event, info);\n        };\n        const onSessionEnd = (event, info) => this.stop(event, info);\n        this.panSession = new PanSession(originEvent, {\n            onSessionStart,\n            onStart,\n            onMove,\n            onSessionEnd,\n        }, { transformPagePoint: this.visualElement.getTransformPagePoint() });\n    }\n    stop(event, info) {\n        const isDragging = this.isDragging;\n        this.cancel();\n        if (!isDragging)\n            return;\n        const { velocity } = info;\n        this.startAnimation(velocity);\n        const { onDragEnd } = this.getProps();\n        onDragEnd === null || onDragEnd === void 0 ? void 0 : onDragEnd(event, info);\n    }\n    cancel() {\n        var _a, _b;\n        this.isDragging = false;\n        if (this.visualElement.projection) {\n            this.visualElement.projection.isAnimationBlocked = false;\n        }\n        (_a = this.panSession) === null || _a === void 0 ? void 0 : _a.end();\n        this.panSession = undefined;\n        const { dragPropagation } = this.getProps();\n        if (!dragPropagation && this.openGlobalLock) {\n            this.openGlobalLock();\n            this.openGlobalLock = null;\n        }\n        (_b = this.visualElement.animationState) === null || _b === void 0 ? void 0 : _b.setActive(AnimationType.Drag, false);\n    }\n    updateAxis(axis, _point, offset) {\n        const { drag } = this.getProps();\n        // If we're not dragging this axis, do an early return.\n        if (!offset || !shouldDrag(axis, drag, this.currentDirection))\n            return;\n        const axisValue = this.getAxisMotionValue(axis);\n        let next = this.originPoint[axis] + offset[axis];\n        // Apply constraints\n        if (this.constraints && this.constraints[axis]) {\n            next = applyConstraints(next, this.constraints[axis], this.elastic[axis]);\n        }\n        axisValue.set(next);\n    }\n    resolveConstraints() {\n        const { dragConstraints, dragElastic } = this.getProps();\n        const { layout } = this.visualElement.projection || {};\n        const prevConstraints = this.constraints;\n        if (dragConstraints && isRefObject(dragConstraints)) {\n            if (!this.constraints) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        }\n        else {\n            if (dragConstraints && layout) {\n                this.constraints = calcRelativeConstraints(layout.actual, dragConstraints);\n            }\n            else {\n                this.constraints = false;\n            }\n        }\n        this.elastic = resolveDragElastic(dragElastic);\n        /**\n         * If we're outputting to external MotionValues, we want to rebase the measured constraints\n         * from viewport-relative to component-relative.\n         */\n        if (prevConstraints !== this.constraints &&\n            layout &&\n            this.constraints &&\n            !this.hasMutatedConstraints) {\n            eachAxis((axis) => {\n                if (this.getAxisMotionValue(axis)) {\n                    this.constraints[axis] = rebaseAxisConstraints(layout.actual[axis], this.constraints[axis]);\n                }\n            });\n        }\n    }\n    resolveRefConstraints() {\n        const { dragConstraints: constraints, onMeasureDragConstraints } = this.getProps();\n        if (!constraints || !isRefObject(constraints))\n            return false;\n        const constraintsElement = constraints.current;\n        invariant(constraintsElement !== null, \"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.\");\n        const { projection } = this.visualElement;\n        // TODO\n        if (!projection || !projection.layout)\n            return false;\n        const constraintsBox = measurePageBox(constraintsElement, projection.root, this.visualElement.getTransformPagePoint());\n        let measuredConstraints = calcViewportConstraints(projection.layout.actual, constraintsBox);\n        /**\n         * If there's an onMeasureDragConstraints listener we call it and\n         * if different constraints are returned, set constraints to that\n         */\n        if (onMeasureDragConstraints) {\n            const userConstraints = onMeasureDragConstraints(convertBoxToBoundingBox(measuredConstraints));\n            this.hasMutatedConstraints = !!userConstraints;\n            if (userConstraints) {\n                measuredConstraints = convertBoundingBoxToBox(userConstraints);\n            }\n        }\n        return measuredConstraints;\n    }\n    startAnimation(velocity) {\n        const { drag, dragMomentum, dragElastic, dragTransition, dragSnapToOrigin, onDragTransitionEnd, } = this.getProps();\n        const constraints = this.constraints || {};\n        const momentumAnimations = eachAxis((axis) => {\n            var _a;\n            if (!shouldDrag(axis, drag, this.currentDirection)) {\n                return;\n            }\n            let transition = (_a = constraints === null || constraints === void 0 ? void 0 : constraints[axis]) !== null && _a !== void 0 ? _a : {};\n            if (dragSnapToOrigin)\n                transition = { min: 0, max: 0 };\n            /**\n             * Overdamp the boundary spring if `dragElastic` is disabled. There's still a frame\n             * of spring animations so we should look into adding a disable spring option to `inertia`.\n             * We could do something here where we affect the `bounceStiffness` and `bounceDamping`\n             * using the value of `dragElastic`.\n             */\n            const bounceStiffness = dragElastic ? 200 : 1000000;\n            const bounceDamping = dragElastic ? 40 : 10000000;\n            const inertia = {\n                type: \"inertia\",\n                velocity: dragMomentum ? velocity[axis] : 0,\n                bounceStiffness,\n                bounceDamping,\n                timeConstant: 750,\n                restDelta: 1,\n                restSpeed: 10,\n                ...dragTransition,\n                ...transition,\n            };\n            // If we're not animating on an externally-provided `MotionValue` we can use the\n            // component's animation controls which will handle interactions with whileHover (etc),\n            // otherwise we just have to animate the `MotionValue` itself.\n            return this.startAxisValueAnimation(axis, inertia);\n        });\n        // Run all animations and then resolve the new drag constraints.\n        return Promise.all(momentumAnimations).then(onDragTransitionEnd);\n    }\n    startAxisValueAnimation(axis, transition) {\n        const axisValue = this.getAxisMotionValue(axis);\n        return startAnimation(axis, axisValue, 0, transition);\n    }\n    stopAnimation() {\n        eachAxis((axis) => this.getAxisMotionValue(axis).stop());\n    }\n    /**\n     * Drag works differently depending on which props are provided.\n     *\n     * - If _dragX and _dragY are provided, we output the gesture delta directly to those motion values.\n     * - Otherwise, we apply the delta to the x/y motion values.\n     */\n    getAxisMotionValue(axis) {\n        var _a, _b;\n        const dragKey = \"_drag\" + axis.toUpperCase();\n        const externalMotionValue = this.visualElement.getProps()[dragKey];\n        return externalMotionValue\n            ? externalMotionValue\n            : this.visualElement.getValue(axis, (_b = (_a = this.visualElement.getProps().initial) === null || _a === void 0 ? void 0 : _a[axis]) !== null && _b !== void 0 ? _b : 0);\n    }\n    snapToCursor(point) {\n        eachAxis((axis) => {\n            const { drag } = this.getProps();\n            // If we're not dragging this axis, do an early return.\n            if (!shouldDrag(axis, drag, this.currentDirection))\n                return;\n            const { projection } = this.visualElement;\n            const axisValue = this.getAxisMotionValue(axis);\n            if (projection && projection.layout) {\n                const { min, max } = projection.layout.actual[axis];\n                axisValue.set(point[axis] - mix(min, max, 0.5));\n            }\n        });\n    }\n    /**\n     * When the viewport resizes we want to check if the measured constraints\n     * have changed and, if so, reposition the element within those new constraints\n     * relative to where it was before the resize.\n     */\n    scalePositionWithinConstraints() {\n        var _a;\n        const { drag, dragConstraints } = this.getProps();\n        const { projection } = this.visualElement;\n        if (!isRefObject(dragConstraints) || !projection || !this.constraints)\n            return;\n        /**\n         * Stop current animations as there can be visual glitching if we try to do\n         * this mid-animation\n         */\n        this.stopAnimation();\n        /**\n         * Record the relative position of the dragged element relative to the\n         * constraints box and save as a progress value.\n         */\n        const boxProgress = { x: 0, y: 0 };\n        eachAxis((axis) => {\n            const axisValue = this.getAxisMotionValue(axis);\n            if (axisValue) {\n                const latest = axisValue.get();\n                boxProgress[axis] = calcOrigin({ min: latest, max: latest }, this.constraints[axis]);\n            }\n        });\n        /**\n         * Update the layout of this element and resolve the latest drag constraints\n         */\n        const { transformTemplate } = this.visualElement.getProps();\n        this.visualElement.getInstance().style.transform = transformTemplate\n            ? transformTemplate({}, \"\")\n            : \"none\";\n        (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n        projection.updateLayout();\n        this.resolveConstraints();\n        /**\n         * For each axis, calculate the current progress of the layout axis\n         * within the new constraints.\n         */\n        eachAxis((axis) => {\n            if (!shouldDrag(axis, drag, null))\n                return;\n            /**\n             * Calculate a new transform based on the previous box progress\n             */\n            const axisValue = this.getAxisMotionValue(axis);\n            const { min, max } = this.constraints[axis];\n            axisValue.set(mix(min, max, boxProgress[axis]));\n        });\n    }\n    addListeners() {\n        var _a;\n        elementDragControls.set(this.visualElement, this);\n        const element = this.visualElement.getInstance();\n        /**\n         * Attach a pointerdown event listener on this DOM element to initiate drag tracking.\n         */\n        const stopPointerListener = addPointerEvent(element, \"pointerdown\", (event) => {\n            const { drag, dragListener = true } = this.getProps();\n            drag && dragListener && this.start(event);\n        });\n        const measureDragConstraints = () => {\n            const { dragConstraints } = this.getProps();\n            if (isRefObject(dragConstraints)) {\n                this.constraints = this.resolveRefConstraints();\n            }\n        };\n        const { projection } = this.visualElement;\n        const stopMeasureLayoutListener = projection.addEventListener(\"measure\", measureDragConstraints);\n        if (projection && !projection.layout) {\n            (_a = projection.root) === null || _a === void 0 ? void 0 : _a.updateScroll();\n            projection.updateLayout();\n        }\n        measureDragConstraints();\n        /**\n         * Attach a window resize listener to scale the draggable target within its defined\n         * constraints as the window resizes.\n         */\n        const stopResizeListener = addDomEvent(window, \"resize\", () => this.scalePositionWithinConstraints());\n        /**\n         * If the element's layout changes, calculate the delta and apply that to\n         * the drag gesture's origin point.\n         */\n        const stopLayoutUpdateListener = projection.addEventListener(\"didUpdate\", (({ delta, hasLayoutChanged }) => {\n            if (this.isDragging && hasLayoutChanged) {\n                eachAxis((axis) => {\n                    const motionValue = this.getAxisMotionValue(axis);\n                    if (!motionValue)\n                        return;\n                    this.originPoint[axis] += delta[axis].translate;\n                    motionValue.set(motionValue.get() + delta[axis].translate);\n                });\n                this.visualElement.syncRender();\n            }\n        }));\n        return () => {\n            stopResizeListener();\n            stopPointerListener();\n            stopMeasureLayoutListener();\n            stopLayoutUpdateListener === null || stopLayoutUpdateListener === void 0 ? void 0 : stopLayoutUpdateListener();\n        };\n    }\n    getProps() {\n        const props = this.visualElement.getProps();\n        const { drag = false, dragDirectionLock = false, dragPropagation = false, dragConstraints = false, dragElastic = defaultElastic, dragMomentum = true, } = props;\n        return {\n            ...props,\n            drag,\n            dragDirectionLock,\n            dragPropagation,\n            dragConstraints,\n            dragElastic,\n            dragMomentum,\n        };\n    }\n}\nfunction shouldDrag(direction, drag, currentDirection) {\n    return ((drag === true || drag === direction) &&\n        (currentDirection === null || currentDirection === direction));\n}\n/**\n * Based on an x/y offset determine the current drag direction. If both axis' offsets are lower\n * than the provided threshold, return `null`.\n *\n * @param offset - The x/y offset from origin.\n * @param lockThreshold - (Optional) - the minimum absolute offset before we can determine a drag direction.\n */\nfunction getCurrentDirection(offset, lockThreshold = 10) {\n    let direction = null;\n    if (Math.abs(offset.y) > lockThreshold) {\n        direction = \"y\";\n    }\n    else if (Math.abs(offset.x) > lockThreshold) {\n        direction = \"x\";\n    }\n    return direction;\n}\n\nexport { VisualElementDragControls, elementDragControls };\n"]},"metadata":{},"sourceType":"module"}