{"ast":null,"code":"import { calcGeneratorVelocity, pregenerateKeyframes } from '@motionone/generators';\n\nfunction createGeneratorEasing(createGenerator) {\n  var keyframesCache = new WeakMap();\n  return function () {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var generatorCache = new Map();\n\n    var getGenerator = function getGenerator() {\n      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 100;\n      var velocity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var isScale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n      var key = \"\".concat(from, \"-\").concat(to, \"-\").concat(velocity, \"-\").concat(isScale);\n\n      if (!generatorCache.has(key)) {\n        generatorCache.set(key, createGenerator(Object.assign({\n          from: from,\n          to: to,\n          velocity: velocity,\n          restSpeed: isScale ? 0.05 : 2,\n          restDistance: isScale ? 0.01 : 0.5\n        }, options)));\n      }\n\n      return generatorCache.get(key);\n    };\n\n    var getKeyframes = function getKeyframes(generator) {\n      if (!keyframesCache.has(generator)) {\n        keyframesCache.set(generator, pregenerateKeyframes(generator));\n      }\n\n      return keyframesCache.get(generator);\n    };\n\n    return {\n      createAnimation: function createAnimation(keyframes, getOrigin, canUseGenerator, name, motionValue) {\n        var _a, _b;\n\n        var settings;\n        var numKeyframes = keyframes.length;\n        var shouldUseGenerator = canUseGenerator && numKeyframes <= 2 && keyframes.every(isNumberOrNull);\n\n        if (shouldUseGenerator) {\n          var target = keyframes[numKeyframes - 1];\n          var unresolvedOrigin = numKeyframes === 1 ? null : keyframes[0];\n          var velocity = 0;\n          var origin = 0;\n          var prevGenerator = motionValue === null || motionValue === void 0 ? void 0 : motionValue.generator;\n\n          if (prevGenerator) {\n            /**\n             * If we have a generator for this value we can use it to resolve\n             * the animations's current value and velocity.\n             */\n            var animation = motionValue.animation,\n                generatorStartTime = motionValue.generatorStartTime;\n            var startTime = (animation === null || animation === void 0 ? void 0 : animation.startTime) || generatorStartTime || 0;\n            var currentTime = (animation === null || animation === void 0 ? void 0 : animation.currentTime) || performance.now() - startTime;\n            var prevGeneratorCurrent = prevGenerator(currentTime).current;\n            origin = (_a = unresolvedOrigin) !== null && _a !== void 0 ? _a : prevGeneratorCurrent;\n\n            if (numKeyframes === 1 || numKeyframes === 2 && keyframes[0] === null) {\n              velocity = calcGeneratorVelocity(function (t) {\n                return prevGenerator(t).current;\n              }, currentTime, prevGeneratorCurrent);\n            }\n          } else {\n            origin = (_b = unresolvedOrigin) !== null && _b !== void 0 ? _b : parseFloat(getOrigin());\n          }\n\n          var generator = getGenerator(origin, target, velocity, name === null || name === void 0 ? void 0 : name.includes(\"scale\"));\n          var keyframesMetadata = getKeyframes(generator);\n          settings = Object.assign(Object.assign({}, keyframesMetadata), {\n            easing: \"linear\"\n          }); // TODO Add test for this\n\n          if (motionValue) {\n            motionValue.generator = generator;\n            motionValue.generatorStartTime = performance.now();\n          }\n        } else {\n          var _keyframesMetadata = getKeyframes(getGenerator(0, 100));\n\n          settings = {\n            easing: \"ease\",\n            duration: _keyframesMetadata.overshootDuration\n          };\n        }\n\n        return settings;\n      }\n    };\n  };\n}\n\nvar isNumberOrNull = function isNumberOrNull(value) {\n  return typeof value !== \"string\";\n};\n\nexport { createGeneratorEasing };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/@motionone/dom/dist/easing/create-generator-easing.es.js"],"names":["calcGeneratorVelocity","pregenerateKeyframes","createGeneratorEasing","createGenerator","keyframesCache","WeakMap","options","generatorCache","Map","getGenerator","from","to","velocity","isScale","key","has","set","Object","assign","restSpeed","restDistance","get","getKeyframes","generator","createAnimation","keyframes","getOrigin","canUseGenerator","name","motionValue","_a","_b","settings","numKeyframes","length","shouldUseGenerator","every","isNumberOrNull","target","unresolvedOrigin","origin","prevGenerator","animation","generatorStartTime","startTime","currentTime","performance","now","prevGeneratorCurrent","current","t","parseFloat","includes","keyframesMetadata","easing","duration","overshootDuration","value"],"mappings":"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","sourcesContent":["import { calcGeneratorVelocity, pregenerateKeyframes } from '@motionone/generators';\n\nfunction createGeneratorEasing(createGenerator) {\n    const keyframesCache = new WeakMap();\n    return (options = {}) => {\n        const generatorCache = new Map();\n        const getGenerator = (from = 0, to = 100, velocity = 0, isScale = false) => {\n            const key = `${from}-${to}-${velocity}-${isScale}`;\n            if (!generatorCache.has(key)) {\n                generatorCache.set(key, createGenerator(Object.assign({ from,\n                    to,\n                    velocity, restSpeed: isScale ? 0.05 : 2, restDistance: isScale ? 0.01 : 0.5 }, options)));\n            }\n            return generatorCache.get(key);\n        };\n        const getKeyframes = (generator) => {\n            if (!keyframesCache.has(generator)) {\n                keyframesCache.set(generator, pregenerateKeyframes(generator));\n            }\n            return keyframesCache.get(generator);\n        };\n        return {\n            createAnimation: (keyframes, getOrigin, canUseGenerator, name, motionValue) => {\n                var _a, _b;\n                let settings;\n                const numKeyframes = keyframes.length;\n                let shouldUseGenerator = canUseGenerator &&\n                    numKeyframes <= 2 &&\n                    keyframes.every(isNumberOrNull);\n                if (shouldUseGenerator) {\n                    const target = keyframes[numKeyframes - 1];\n                    const unresolvedOrigin = numKeyframes === 1 ? null : keyframes[0];\n                    let velocity = 0;\n                    let origin = 0;\n                    const prevGenerator = motionValue === null || motionValue === void 0 ? void 0 : motionValue.generator;\n                    if (prevGenerator) {\n                        /**\n                         * If we have a generator for this value we can use it to resolve\n                         * the animations's current value and velocity.\n                         */\n                        const { animation, generatorStartTime } = motionValue;\n                        const startTime = (animation === null || animation === void 0 ? void 0 : animation.startTime) || generatorStartTime || 0;\n                        const currentTime = (animation === null || animation === void 0 ? void 0 : animation.currentTime) || performance.now() - startTime;\n                        const prevGeneratorCurrent = prevGenerator(currentTime).current;\n                        origin = (_a = unresolvedOrigin) !== null && _a !== void 0 ? _a : prevGeneratorCurrent;\n                        if (numKeyframes === 1 ||\n                            (numKeyframes === 2 && keyframes[0] === null)) {\n                            velocity = calcGeneratorVelocity((t) => prevGenerator(t).current, currentTime, prevGeneratorCurrent);\n                        }\n                    }\n                    else {\n                        origin = (_b = unresolvedOrigin) !== null && _b !== void 0 ? _b : parseFloat(getOrigin());\n                    }\n                    const generator = getGenerator(origin, target, velocity, name === null || name === void 0 ? void 0 : name.includes(\"scale\"));\n                    const keyframesMetadata = getKeyframes(generator);\n                    settings = Object.assign(Object.assign({}, keyframesMetadata), { easing: \"linear\" });\n                    // TODO Add test for this\n                    if (motionValue) {\n                        motionValue.generator = generator;\n                        motionValue.generatorStartTime = performance.now();\n                    }\n                }\n                else {\n                    const keyframesMetadata = getKeyframes(getGenerator(0, 100));\n                    settings = {\n                        easing: \"ease\",\n                        duration: keyframesMetadata.overshootDuration,\n                    };\n                }\n                return settings;\n            },\n        };\n    };\n}\nconst isNumberOrNull = (value) => typeof value !== \"string\";\n\nexport { createGeneratorEasing };\n"]},"metadata":{},"sourceType":"module"}