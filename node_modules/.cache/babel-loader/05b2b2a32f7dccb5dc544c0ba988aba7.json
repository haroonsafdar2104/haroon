{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\nvar ReplaySubject = function (_super) {\n  __extends(ReplaySubject, _super);\n\n  function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {\n    if (_bufferSize === void 0) {\n      _bufferSize = Infinity;\n    }\n\n    if (_windowTime === void 0) {\n      _windowTime = Infinity;\n    }\n\n    if (_timestampProvider === void 0) {\n      _timestampProvider = dateTimestampProvider;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this._bufferSize = _bufferSize;\n    _this._windowTime = _windowTime;\n    _this._timestampProvider = _timestampProvider;\n    _this._buffer = [];\n    _this._infiniteTimeWindow = true;\n    _this._infiniteTimeWindow = _windowTime === Infinity;\n    _this._bufferSize = Math.max(1, _bufferSize);\n    _this._windowTime = Math.max(1, _windowTime);\n    return _this;\n  }\n\n  ReplaySubject.prototype.next = function (value) {\n    var _a = this,\n        isStopped = _a.isStopped,\n        _buffer = _a._buffer,\n        _infiniteTimeWindow = _a._infiniteTimeWindow,\n        _timestampProvider = _a._timestampProvider,\n        _windowTime = _a._windowTime;\n\n    if (!isStopped) {\n      _buffer.push(value);\n\n      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n    }\n\n    this._trimBuffer();\n\n    _super.prototype.next.call(this, value);\n  };\n\n  ReplaySubject.prototype._subscribe = function (subscriber) {\n    this._throwIfClosed();\n\n    this._trimBuffer();\n\n    var subscription = this._innerSubscribe(subscriber);\n\n    var _a = this,\n        _infiniteTimeWindow = _a._infiniteTimeWindow,\n        _buffer = _a._buffer;\n\n    var copy = _buffer.slice();\n\n    for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n      subscriber.next(copy[i]);\n    }\n\n    this._checkFinalizedStatuses(subscriber);\n\n    return subscription;\n  };\n\n  ReplaySubject.prototype._trimBuffer = function () {\n    var _a = this,\n        _bufferSize = _a._bufferSize,\n        _timestampProvider = _a._timestampProvider,\n        _buffer = _a._buffer,\n        _infiniteTimeWindow = _a._infiniteTimeWindow;\n\n    var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n\n    if (!_infiniteTimeWindow) {\n      var now = _timestampProvider.now();\n\n      var last = 0;\n\n      for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n        last = i;\n      }\n\n      last && _buffer.splice(0, last + 1);\n    }\n  };\n\n  return ReplaySubject;\n}(Subject);\n\nexport { ReplaySubject };","map":{"version":3,"mappings":"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","names":["Subject","dateTimestampProvider","__extends","_bufferSize","_windowTime","_timestampProvider","_super","_this","_infiniteTimeWindow","Infinity","Math","max","ReplaySubject","value","isStopped","_buffer","push","now","_trimBuffer","next","call","subscriber","_throwIfClosed","subscription","_innerSubscribe","copy","slice","i","length","closed","_checkFinalizedStatuses","adjustedBufferSize","splice","last"],"sources":["C:\\Users\\Admin\\Downloads\\portpoliopro-main\\client\\node_modules\\rxjs\\src\\internal\\ReplaySubject.ts"],"sourcesContent":["import { Subject } from './Subject';\nimport { TimestampProvider } from './types';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\n/**\n * A variant of {@link Subject} that \"replays\" old values to new subscribers by emitting them when they first subscribe.\n *\n * `ReplaySubject` has an internal buffer that will store a specified number of values that it has observed. Like `Subject`,\n * `ReplaySubject` \"observes\" values by having them passed to its `next` method. When it observes a value, it will store that\n * value for a time determined by the configuration of the `ReplaySubject`, as passed to its constructor.\n *\n * When a new subscriber subscribes to the `ReplaySubject` instance, it will synchronously emit all values in its buffer in\n * a First-In-First-Out (FIFO) manner. The `ReplaySubject` will also complete, if it has observed completion; and it will\n * error if it has observed an error.\n *\n * There are two main configuration items to be concerned with:\n *\n * 1. `bufferSize` - This will determine how many items are stored in the buffer, defaults to infinite.\n * 2. `windowTime` - The amount of time to hold a value in the buffer before removing it from the buffer.\n *\n * Both configurations may exist simultaneously. So if you would like to buffer a maximum of 3 values, as long as the values\n * are less than 2 seconds old, you could do so with a `new ReplaySubject(3, 2000)`.\n *\n * ### Differences with BehaviorSubject\n *\n * `BehaviorSubject` is similar to `new ReplaySubject(1)`, with a couple fo exceptions:\n *\n * 1. `BehaviorSubject` comes \"primed\" with a single value upon construction.\n * 2. `ReplaySubject` will replay values, even after observing an error, where `BehaviorSubject` will not.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n * @see {@link shareReplay}\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _buffer: (T | number)[] = [];\n  private _infiniteTimeWindow = true;\n\n  /**\n   * @param bufferSize The size of the buffer to replay on subscription\n   * @param windowTime The amount of time the buffered items will say buffered\n   * @param timestampProvider An object with a `now()` method that provides the current timestamp. This is used to\n   * calculate the amount of time something has been buffered.\n   */\n  constructor(\n    private _bufferSize = Infinity,\n    private _windowTime = Infinity,\n    private _timestampProvider: TimestampProvider = dateTimestampProvider\n  ) {\n    super();\n    this._infiniteTimeWindow = _windowTime === Infinity;\n    this._bufferSize = Math.max(1, _bufferSize);\n    this._windowTime = Math.max(1, _windowTime);\n  }\n\n  next(value: T): void {\n    const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n    if (!isStopped) {\n      _buffer.push(value);\n      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n    }\n    this._trimBuffer();\n    super.next(value);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._trimBuffer();\n\n    const subscription = this._innerSubscribe(subscriber);\n\n    const { _infiniteTimeWindow, _buffer } = this;\n    // We use a copy here, so reentrant code does not mutate our array while we're\n    // emitting it to a new subscriber.\n    const copy = _buffer.slice();\n    for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n      subscriber.next(copy[i] as T);\n    }\n\n    this._checkFinalizedStatuses(subscriber);\n\n    return subscription;\n  }\n\n  private _trimBuffer() {\n    const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n    // If we don't have an infinite buffer size, and we're over the length,\n    // use splice to truncate the old buffer values off. Note that we have to\n    // double the size for instances where we're not using an infinite time window\n    // because we're storing the values and the timestamps in the same array.\n    const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n\n    // Now, if we're not in an infinite time window, remove all values where the time is\n    // older than what is allowed.\n    if (!_infiniteTimeWindow) {\n      const now = _timestampProvider.now();\n      let last = 0;\n      // Search the array for the first timestamp that isn't expired and\n      // truncate the buffer up to that point.\n      for (let i = 1; i < _buffer.length && (_buffer[i] as number) <= now; i += 2) {\n        last = i;\n      }\n      last && _buffer.splice(0, last + 1);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}