{"ast":null,"code":"import { isObject, extend } from './utils.js';\n\nfunction updateSwiper(_ref) {\n  let {\n    swiper,\n    slides,\n    passedParams,\n    changedParams,\n    nextEl,\n    prevEl,\n    scrollbarEl,\n    paginationEl\n  } = _ref;\n  const updateParams = changedParams.filter(key => key !== 'children' && key !== 'direction');\n  const {\n    params: currentParams,\n    pagination,\n    navigation,\n    scrollbar,\n    virtual,\n    thumbs\n  } = swiper;\n  let needThumbsInit;\n  let needControllerInit;\n  let needPaginationInit;\n  let needScrollbarInit;\n  let needNavigationInit;\n\n  if (changedParams.includes('thumbs') && passedParams.thumbs && passedParams.thumbs.swiper && currentParams.thumbs && !currentParams.thumbs.swiper) {\n    needThumbsInit = true;\n  }\n\n  if (changedParams.includes('controller') && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control) {\n    needControllerInit = true;\n  }\n\n  if (changedParams.includes('pagination') && passedParams.pagination && (passedParams.pagination.el || paginationEl) && (currentParams.pagination || currentParams.pagination === false) && pagination && !pagination.el) {\n    needPaginationInit = true;\n  }\n\n  if (changedParams.includes('scrollbar') && passedParams.scrollbar && (passedParams.scrollbar.el || scrollbarEl) && (currentParams.scrollbar || currentParams.scrollbar === false) && scrollbar && !scrollbar.el) {\n    needScrollbarInit = true;\n  }\n\n  if (changedParams.includes('navigation') && passedParams.navigation && (passedParams.navigation.prevEl || prevEl) && (passedParams.navigation.nextEl || nextEl) && (currentParams.navigation || currentParams.navigation === false) && navigation && !navigation.prevEl && !navigation.nextEl) {\n    needNavigationInit = true;\n  }\n\n  const destroyModule = mod => {\n    if (!swiper[mod]) return;\n    swiper[mod].destroy();\n\n    if (mod === 'navigation') {\n      currentParams[mod].prevEl = undefined;\n      currentParams[mod].nextEl = undefined;\n      swiper[mod].prevEl = undefined;\n      swiper[mod].nextEl = undefined;\n    } else {\n      currentParams[mod].el = undefined;\n      swiper[mod].el = undefined;\n    }\n  };\n\n  updateParams.forEach(key => {\n    if (isObject(currentParams[key]) && isObject(passedParams[key])) {\n      extend(currentParams[key], passedParams[key]);\n    } else {\n      const newValue = passedParams[key];\n\n      if ((newValue === true || newValue === false) && (key === 'navigation' || key === 'pagination' || key === 'scrollbar')) {\n        if (newValue === false) {\n          destroyModule(key);\n        }\n      } else {\n        currentParams[key] = passedParams[key];\n      }\n    }\n  });\n\n  if (updateParams.includes('controller') && !needControllerInit && swiper.controller && swiper.controller.control && currentParams.controller && currentParams.controller.control) {\n    swiper.controller.control = currentParams.controller.control;\n  }\n\n  if (changedParams.includes('children') && slides && virtual && currentParams.virtual.enabled) {\n    virtual.slides = slides;\n    virtual.update(true);\n  } else if (changedParams.includes('children') && swiper.lazy && swiper.params.lazy.enabled) {\n    swiper.lazy.load();\n  }\n\n  if (needThumbsInit) {\n    const initialized = thumbs.init();\n    if (initialized) thumbs.update(true);\n  }\n\n  if (needControllerInit) {\n    swiper.controller.control = currentParams.controller.control;\n  }\n\n  if (needPaginationInit) {\n    if (paginationEl) currentParams.pagination.el = paginationEl;\n    pagination.init();\n    pagination.render();\n    pagination.update();\n  }\n\n  if (needScrollbarInit) {\n    if (scrollbarEl) currentParams.scrollbar.el = scrollbarEl;\n    scrollbar.init();\n    scrollbar.updateSize();\n    scrollbar.setTranslate();\n  }\n\n  if (needNavigationInit) {\n    if (nextEl) currentParams.navigation.nextEl = nextEl;\n    if (prevEl) currentParams.navigation.prevEl = prevEl;\n    navigation.init();\n    navigation.update();\n  }\n\n  if (changedParams.includes('allowSlideNext')) {\n    swiper.allowSlideNext = passedParams.allowSlideNext;\n  }\n\n  if (changedParams.includes('allowSlidePrev')) {\n    swiper.allowSlidePrev = passedParams.allowSlidePrev;\n  }\n\n  if (changedParams.includes('direction')) {\n    swiper.changeDirection(passedParams.direction, false);\n  }\n\n  swiper.update();\n}\n\nexport { updateSwiper };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/swiper/components-shared/update-swiper.js"],"names":["isObject","extend","updateSwiper","_ref","swiper","slides","passedParams","changedParams","nextEl","prevEl","scrollbarEl","paginationEl","updateParams","filter","key","params","currentParams","pagination","navigation","scrollbar","virtual","thumbs","needThumbsInit","needControllerInit","needPaginationInit","needScrollbarInit","needNavigationInit","includes","controller","control","el","destroyModule","mod","destroy","undefined","forEach","newValue","enabled","update","lazy","load","initialized","init","render","updateSize","setTranslate","allowSlideNext","allowSlidePrev","changeDirection","direction"],"mappings":"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","sourcesContent":["import { isObject, extend } from './utils.js';\n\nfunction updateSwiper(_ref) {\n  let {\n    swiper,\n    slides,\n    passedParams,\n    changedParams,\n    nextEl,\n    prevEl,\n    scrollbarEl,\n    paginationEl\n  } = _ref;\n  const updateParams = changedParams.filter(key => key !== 'children' && key !== 'direction');\n  const {\n    params: currentParams,\n    pagination,\n    navigation,\n    scrollbar,\n    virtual,\n    thumbs\n  } = swiper;\n  let needThumbsInit;\n  let needControllerInit;\n  let needPaginationInit;\n  let needScrollbarInit;\n  let needNavigationInit;\n\n  if (changedParams.includes('thumbs') && passedParams.thumbs && passedParams.thumbs.swiper && currentParams.thumbs && !currentParams.thumbs.swiper) {\n    needThumbsInit = true;\n  }\n\n  if (changedParams.includes('controller') && passedParams.controller && passedParams.controller.control && currentParams.controller && !currentParams.controller.control) {\n    needControllerInit = true;\n  }\n\n  if (changedParams.includes('pagination') && passedParams.pagination && (passedParams.pagination.el || paginationEl) && (currentParams.pagination || currentParams.pagination === false) && pagination && !pagination.el) {\n    needPaginationInit = true;\n  }\n\n  if (changedParams.includes('scrollbar') && passedParams.scrollbar && (passedParams.scrollbar.el || scrollbarEl) && (currentParams.scrollbar || currentParams.scrollbar === false) && scrollbar && !scrollbar.el) {\n    needScrollbarInit = true;\n  }\n\n  if (changedParams.includes('navigation') && passedParams.navigation && (passedParams.navigation.prevEl || prevEl) && (passedParams.navigation.nextEl || nextEl) && (currentParams.navigation || currentParams.navigation === false) && navigation && !navigation.prevEl && !navigation.nextEl) {\n    needNavigationInit = true;\n  }\n\n  const destroyModule = mod => {\n    if (!swiper[mod]) return;\n    swiper[mod].destroy();\n\n    if (mod === 'navigation') {\n      currentParams[mod].prevEl = undefined;\n      currentParams[mod].nextEl = undefined;\n      swiper[mod].prevEl = undefined;\n      swiper[mod].nextEl = undefined;\n    } else {\n      currentParams[mod].el = undefined;\n      swiper[mod].el = undefined;\n    }\n  };\n\n  updateParams.forEach(key => {\n    if (isObject(currentParams[key]) && isObject(passedParams[key])) {\n      extend(currentParams[key], passedParams[key]);\n    } else {\n      const newValue = passedParams[key];\n\n      if ((newValue === true || newValue === false) && (key === 'navigation' || key === 'pagination' || key === 'scrollbar')) {\n        if (newValue === false) {\n          destroyModule(key);\n        }\n      } else {\n        currentParams[key] = passedParams[key];\n      }\n    }\n  });\n\n  if (updateParams.includes('controller') && !needControllerInit && swiper.controller && swiper.controller.control && currentParams.controller && currentParams.controller.control) {\n    swiper.controller.control = currentParams.controller.control;\n  }\n\n  if (changedParams.includes('children') && slides && virtual && currentParams.virtual.enabled) {\n    virtual.slides = slides;\n    virtual.update(true);\n  } else if (changedParams.includes('children') && swiper.lazy && swiper.params.lazy.enabled) {\n    swiper.lazy.load();\n  }\n\n  if (needThumbsInit) {\n    const initialized = thumbs.init();\n    if (initialized) thumbs.update(true);\n  }\n\n  if (needControllerInit) {\n    swiper.controller.control = currentParams.controller.control;\n  }\n\n  if (needPaginationInit) {\n    if (paginationEl) currentParams.pagination.el = paginationEl;\n    pagination.init();\n    pagination.render();\n    pagination.update();\n  }\n\n  if (needScrollbarInit) {\n    if (scrollbarEl) currentParams.scrollbar.el = scrollbarEl;\n    scrollbar.init();\n    scrollbar.updateSize();\n    scrollbar.setTranslate();\n  }\n\n  if (needNavigationInit) {\n    if (nextEl) currentParams.navigation.nextEl = nextEl;\n    if (prevEl) currentParams.navigation.prevEl = prevEl;\n    navigation.init();\n    navigation.update();\n  }\n\n  if (changedParams.includes('allowSlideNext')) {\n    swiper.allowSlideNext = passedParams.allowSlideNext;\n  }\n\n  if (changedParams.includes('allowSlidePrev')) {\n    swiper.allowSlidePrev = passedParams.allowSlidePrev;\n  }\n\n  if (changedParams.includes('direction')) {\n    swiper.changeDirection(passedParams.direction, false);\n  }\n\n  swiper.update();\n}\n\nexport { updateSwiper };"]},"metadata":{},"sourceType":"module"}