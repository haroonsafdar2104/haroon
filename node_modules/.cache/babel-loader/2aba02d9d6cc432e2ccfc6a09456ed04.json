{"ast":null,"code":"var isArray = Array.isArray;\nvar getPrototypeOf = Object.getPrototypeOf,\n    objectProto = Object.prototype,\n    getKeys = Object.keys;\nexport function argsArgArrayOrObject(args) {\n  if (args.length === 1) {\n    var first_1 = args[0];\n\n    if (isArray(first_1)) {\n      return {\n        args: first_1,\n        keys: null\n      };\n    }\n\n    if (isPOJO(first_1)) {\n      var keys = getKeys(first_1);\n      return {\n        args: keys.map(function (key) {\n          return first_1[key];\n        }),\n        keys: keys\n      };\n    }\n  }\n\n  return {\n    args: args,\n    keys: null\n  };\n}\n\nfunction isPOJO(obj) {\n  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}","map":{"version":3,"mappings":"AAAQ,WAAO,GAAKA,KAAK,QAAjB;AACA,kBAAc,GAA4CC,MAAM,eAAhE;AAAA,IAA2BC,WAAW,GAAoBD,MAAM,UAAhE;AAAA,IAA8CE,OAAO,GAAKF,MAAM,KAAhE;AAQR,OAAM,SAAUG,oBAAV,CAA+DC,IAA/D,EAAsF;AAC1F,MAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACrB,QAAMC,OAAK,GAAGF,IAAI,CAAC,CAAD,CAAlB;;AACA,QAAIG,OAAO,CAACD,OAAD,CAAX,EAAoB;AAClB,aAAO;AAAEF,YAAI,EAAEE,OAAR;AAAeE,YAAI,EAAE;AAArB,OAAP;AACD;;AACD,QAAIC,MAAM,CAACH,OAAD,CAAV,EAAmB;AACjB,UAAME,IAAI,GAAGN,OAAO,CAACI,OAAD,CAApB;AACA,aAAO;AACLF,YAAI,EAAEI,IAAI,CAACE,GAAL,CAAS,UAACC,GAAD,EAAI;AAAK,wBAAK,CAACA,GAAD,CAAL;AAAU,SAA5B,CADD;AAELH,YAAI;AAFC,OAAP;AAID;AACF;;AAED,SAAO;AAAEJ,QAAI,EAAEA,IAAR;AAAqBI,QAAI,EAAE;AAA3B,GAAP;AACD;;AAED,SAASC,MAAT,CAAgBG,GAAhB,EAAwB;AACtB,SAAOA,GAAG,IAAI,OAAOA,GAAP,KAAe,QAAtB,IAAkCC,cAAc,CAACD,GAAD,CAAd,KAAwBX,WAAjE;AACD","names":["Array","Object","objectProto","getKeys","argsArgArrayOrObject","args","length","first_1","isArray","keys","isPOJO","map","key","obj","getPrototypeOf"],"sources":["C:\\Users\\Admin\\Downloads\\portpoliopro-main\\client\\node_modules\\rxjs\\src\\internal\\util\\argsArgArrayOrObject.ts"],"sourcesContent":["const { isArray } = Array;\nconst { getPrototypeOf, prototype: objectProto, keys: getKeys } = Object;\n\n/**\n * Used in functions where either a list of arguments, a single array of arguments, or a\n * dictionary of arguments can be returned. Returns an object with an `args` property with\n * the arguments in an array, if it is a dictionary, it will also return the `keys` in another\n * property.\n */\nexport function argsArgArrayOrObject<T, O extends Record<string, T>>(args: T[] | [O] | [T[]]): { args: T[]; keys: string[] | null } {\n  if (args.length === 1) {\n    const first = args[0];\n    if (isArray(first)) {\n      return { args: first, keys: null };\n    }\n    if (isPOJO(first)) {\n      const keys = getKeys(first);\n      return {\n        args: keys.map((key) => first[key]),\n        keys,\n      };\n    }\n  }\n\n  return { args: args as T[], keys: null };\n}\n\nfunction isPOJO(obj: any): obj is object {\n  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}\n"]},"metadata":{},"sourceType":"module"}