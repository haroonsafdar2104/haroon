{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { inView } from '@motionone/dom';\n\nfunction useInView(ref) {\n  let {\n    root,\n    margin,\n    amount,\n    once = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const [isInView, setInView] = useState(false);\n  useEffect(() => {\n    if (!ref.current || once && isInView) return;\n\n    const onEnter = () => {\n      setInView(true);\n      return once ? undefined : () => setInView(false);\n    };\n\n    const options = {\n      root: root && root.current || undefined,\n      margin,\n      amount: amount === \"some\" ? \"any\" : amount\n    };\n    return inView(ref.current, onEnter, options);\n  }, [root, ref, margin, once]);\n  return isInView;\n}\n\nexport { useInView };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/utils/use-in-view.mjs"],"names":["useState","useEffect","inView","useInView","ref","root","margin","amount","once","isInView","setInView","current","onEnter","undefined","options"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,MAAT,QAAuB,gBAAvB;;AAEA,SAASC,SAAT,CAAmBC,GAAnB,EAAqE;AAAA,MAA7C;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA,MAAhB;AAAwBC,IAAAA,IAAI,GAAG;AAA/B,GAA6C,uEAAJ,EAAI;AACjE,QAAM,CAACC,QAAD,EAAWC,SAAX,IAAwBV,QAAQ,CAAC,KAAD,CAAtC;AACAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACG,GAAG,CAACO,OAAL,IAAiBH,IAAI,IAAIC,QAA7B,EACI;;AACJ,UAAMG,OAAO,GAAG,MAAM;AAClBF,MAAAA,SAAS,CAAC,IAAD,CAAT;AACA,aAAOF,IAAI,GAAGK,SAAH,GAAe,MAAMH,SAAS,CAAC,KAAD,CAAzC;AACH,KAHD;;AAIA,UAAMI,OAAO,GAAG;AACZT,MAAAA,IAAI,EAAGA,IAAI,IAAIA,IAAI,CAACM,OAAd,IAA0BE,SADpB;AAEZP,MAAAA,MAFY;AAGZC,MAAAA,MAAM,EAAEA,MAAM,KAAK,MAAX,GAAoB,KAApB,GAA4BA;AAHxB,KAAhB;AAKA,WAAOL,MAAM,CAACE,GAAG,CAACO,OAAL,EAAcC,OAAd,EAAuBE,OAAvB,CAAb;AACH,GAbQ,EAaN,CAACT,IAAD,EAAOD,GAAP,EAAYE,MAAZ,EAAoBE,IAApB,CAbM,CAAT;AAcA,SAAOC,QAAP;AACH;;AAED,SAASN,SAAT","sourcesContent":["import { useState, useEffect } from 'react';\nimport { inView } from '@motionone/dom';\n\nfunction useInView(ref, { root, margin, amount, once = false } = {}) {\n    const [isInView, setInView] = useState(false);\n    useEffect(() => {\n        if (!ref.current || (once && isInView))\n            return;\n        const onEnter = () => {\n            setInView(true);\n            return once ? undefined : () => setInView(false);\n        };\n        const options = {\n            root: (root && root.current) || undefined,\n            margin,\n            amount: amount === \"some\" ? \"any\" : amount,\n        };\n        return inView(ref.current, onEnter, options);\n    }, [root, ref, margin, once]);\n    return isInView;\n}\n\nexport { useInView };\n"]},"metadata":{},"sourceType":"module"}