{"ast":null,"code":"import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\n\nfunction buildSVGAttrs(state, _ref, options, transformTemplate) {\n  let {\n    attrX,\n    attrY,\n    originX,\n    originY,\n    pathLength,\n    pathSpacing = 1,\n    pathOffset = 0,\n    // This is object creation, which we try to avoid per-frame.\n    ...latest\n  } = _ref;\n  buildHTMLStyles(state, latest, options, transformTemplate);\n  state.attrs = state.style;\n  state.style = {};\n  const {\n    attrs,\n    style,\n    dimensions\n  } = state;\n  /**\n   * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n   * and copy it into style.\n   */\n\n  if (attrs.transform) {\n    if (dimensions) style.transform = attrs.transform;\n    delete attrs.transform;\n  } // Parse transformOrigin\n\n\n  if (dimensions && (originX !== undefined || originY !== undefined || style.transform)) {\n    style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n  } // Treat x/y not as shortcuts but as actual attributes\n\n\n  if (attrX !== undefined) attrs.x = attrX;\n  if (attrY !== undefined) attrs.y = attrY; // Build SVG path if one has been defined\n\n  if (pathLength !== undefined) {\n    buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n  }\n}\n\nexport { buildSVGAttrs };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.mjs"],"names":["buildHTMLStyles","calcSVGTransformOrigin","buildSVGPath","buildSVGAttrs","state","options","transformTemplate","attrX","attrY","originX","originY","pathLength","pathSpacing","pathOffset","latest","attrs","style","dimensions","transform","undefined","transformOrigin","x","y"],"mappings":"AAAA,SAASA,eAAT,QAAgC,mCAAhC;AACA,SAASC,sBAAT,QAAuC,wBAAvC;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,KAAvB,QAEaC,OAFb,EAEsBC,iBAFtB,EAEyC;AAAA,MAFX;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,OAAhB;AAAyBC,IAAAA,OAAzB;AAAkCC,IAAAA,UAAlC;AAA8CC,IAAAA,WAAW,GAAG,CAA5D;AAA+DC,IAAAA,UAAU,GAAG,CAA5E;AAC9B;AACA,OAAGC;AAF2B,GAEW;AACrCd,EAAAA,eAAe,CAACI,KAAD,EAAQU,MAAR,EAAgBT,OAAhB,EAAyBC,iBAAzB,CAAf;AACAF,EAAAA,KAAK,CAACW,KAAN,GAAcX,KAAK,CAACY,KAApB;AACAZ,EAAAA,KAAK,CAACY,KAAN,GAAc,EAAd;AACA,QAAM;AAAED,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA;AAAhB,MAA+Bb,KAArC;AACA;AACJ;AACA;AACA;;AACI,MAAIW,KAAK,CAACG,SAAV,EAAqB;AACjB,QAAID,UAAJ,EACID,KAAK,CAACE,SAAN,GAAkBH,KAAK,CAACG,SAAxB;AACJ,WAAOH,KAAK,CAACG,SAAb;AACH,GAboC,CAcrC;;;AACA,MAAID,UAAU,KACTR,OAAO,KAAKU,SAAZ,IAAyBT,OAAO,KAAKS,SAArC,IAAkDH,KAAK,CAACE,SAD/C,CAAd,EACyE;AACrEF,IAAAA,KAAK,CAACI,eAAN,GAAwBnB,sBAAsB,CAACgB,UAAD,EAAaR,OAAO,KAAKU,SAAZ,GAAwBV,OAAxB,GAAkC,GAA/C,EAAoDC,OAAO,KAAKS,SAAZ,GAAwBT,OAAxB,GAAkC,GAAtF,CAA9C;AACH,GAlBoC,CAmBrC;;;AACA,MAAIH,KAAK,KAAKY,SAAd,EACIJ,KAAK,CAACM,CAAN,GAAUd,KAAV;AACJ,MAAIC,KAAK,KAAKW,SAAd,EACIJ,KAAK,CAACO,CAAN,GAAUd,KAAV,CAvBiC,CAwBrC;;AACA,MAAIG,UAAU,KAAKQ,SAAnB,EAA8B;AAC1BjB,IAAAA,YAAY,CAACa,KAAD,EAAQJ,UAAR,EAAoBC,WAApB,EAAiCC,UAAjC,EAA6C,KAA7C,CAAZ;AACH;AACJ;;AAED,SAASV,aAAT","sourcesContent":["import { buildHTMLStyles } from '../../html/utils/build-styles.mjs';\nimport { calcSVGTransformOrigin } from './transform-origin.mjs';\nimport { buildSVGPath } from './path.mjs';\n\n/**\n * Build SVG visual attrbutes, like cx and style.transform\n */\nfunction buildSVGAttrs(state, { attrX, attrY, originX, originY, pathLength, pathSpacing = 1, pathOffset = 0, \n// This is object creation, which we try to avoid per-frame.\n...latest }, options, transformTemplate) {\n    buildHTMLStyles(state, latest, options, transformTemplate);\n    state.attrs = state.style;\n    state.style = {};\n    const { attrs, style, dimensions } = state;\n    /**\n     * However, we apply transforms as CSS transforms. So if we detect a transform we take it from attrs\n     * and copy it into style.\n     */\n    if (attrs.transform) {\n        if (dimensions)\n            style.transform = attrs.transform;\n        delete attrs.transform;\n    }\n    // Parse transformOrigin\n    if (dimensions &&\n        (originX !== undefined || originY !== undefined || style.transform)) {\n        style.transformOrigin = calcSVGTransformOrigin(dimensions, originX !== undefined ? originX : 0.5, originY !== undefined ? originY : 0.5);\n    }\n    // Treat x/y not as shortcuts but as actual attributes\n    if (attrX !== undefined)\n        attrs.x = attrX;\n    if (attrY !== undefined)\n        attrs.y = attrY;\n    // Build SVG path if one has been defined\n    if (pathLength !== undefined) {\n        buildSVGPath(attrs, pathLength, pathSpacing, pathOffset, false);\n    }\n}\n\nexport { buildSVGAttrs };\n"]},"metadata":{},"sourceType":"module"}