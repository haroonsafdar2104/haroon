{"ast":null,"code":"import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n  var willChange = next.willChange;\n\n  for (var key in next) {\n    var nextValue = next[key];\n    var prevValue = prev[key];\n\n    if (isMotionValue(nextValue)) {\n      /**\n       * If this is a motion value found in props or style, we want to add it\n       * to our visual element's motion value map.\n       */\n      element.addValue(key, nextValue);\n\n      if (isWillChangeMotionValue(willChange)) {\n        willChange.add(key);\n      }\n      /**\n       * Check the version of the incoming motion value with this version\n       * and warn against mismatches.\n       */\n\n\n      if (process.env.NODE_ENV === \"development\") {\n        warnOnce(nextValue.version === \"7.2.1\", \"Attempting to mix Framer Motion versions \".concat(nextValue.version, \" with 7.2.1 may not work as expected.\"));\n      }\n    } else if (isMotionValue(prevValue)) {\n      /**\n       * If we're swapping from a motion value to a static value,\n       * create a new motion value from that\n       */\n      element.addValue(key, motionValue(nextValue));\n\n      if (isWillChangeMotionValue(willChange)) {\n        willChange.remove(key);\n      }\n    } else if (prevValue !== nextValue) {\n      /**\n       * If this is a flat value that has changed, update the motion value\n       * or create one if it doesn't exist. We only want to do this if we're\n       * not handling the value with our animation state.\n       */\n      if (element.hasValue(key)) {\n        var existingValue = element.getValue(key); // TODO: Only update values that aren't being animated or even looked at\n\n        !existingValue.hasAnimated && existingValue.set(nextValue);\n      } else {\n        var latestValue = element.getStaticValue(key);\n        element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue));\n      }\n    }\n  } // Handle removed values\n\n\n  for (var _key in prev) {\n    if (next[_key] === undefined) element.removeValue(_key);\n  }\n\n  return next;\n}\n\nexport { updateMotionValuesFromProps };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/render/utils/motion-values.mjs"],"names":["isWillChangeMotionValue","warnOnce","motionValue","isMotionValue","updateMotionValuesFromProps","element","next","prev","willChange","key","nextValue","prevValue","addValue","add","process","env","NODE_ENV","version","remove","hasValue","existingValue","getValue","hasAnimated","set","latestValue","getStaticValue","undefined","removeValue"],"mappings":"AAAA,SAASA,uBAAT,QAAwC,oCAAxC;AACA,SAASC,QAAT,QAAyB,2BAAzB;AACA,SAASC,WAAT,QAA4B,uBAA5B;AACA,SAASC,aAAT,QAA8B,uCAA9B;;AAEA,SAASC,2BAAT,CAAqCC,OAArC,EAA8CC,IAA9C,EAAoDC,IAApD,EAA0D;AACtD,MAAQC,UAAR,GAAuBF,IAAvB,CAAQE,UAAR;;AACA,OAAK,IAAMC,GAAX,IAAkBH,IAAlB,EAAwB;AACpB,QAAMI,SAAS,GAAGJ,IAAI,CAACG,GAAD,CAAtB;AACA,QAAME,SAAS,GAAGJ,IAAI,CAACE,GAAD,CAAtB;;AACA,QAAIN,aAAa,CAACO,SAAD,CAAjB,EAA8B;AAC1B;AACZ;AACA;AACA;AACYL,MAAAA,OAAO,CAACO,QAAR,CAAiBH,GAAjB,EAAsBC,SAAtB;;AACA,UAAIV,uBAAuB,CAACQ,UAAD,CAA3B,EAAyC;AACrCA,QAAAA,UAAU,CAACK,GAAX,CAAeJ,GAAf;AACH;AACD;AACZ;AACA;AACA;;;AACY,UAAIK,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA7B,EAA4C;AACxCf,QAAAA,QAAQ,CAACS,SAAS,CAACO,OAAV,KAAsB,OAAvB,qDAA4EP,SAAS,CAACO,OAAtF,2CAAR;AACH;AACJ,KAhBD,MAiBK,IAAId,aAAa,CAACQ,SAAD,CAAjB,EAA8B;AAC/B;AACZ;AACA;AACA;AACYN,MAAAA,OAAO,CAACO,QAAR,CAAiBH,GAAjB,EAAsBP,WAAW,CAACQ,SAAD,CAAjC;;AACA,UAAIV,uBAAuB,CAACQ,UAAD,CAA3B,EAAyC;AACrCA,QAAAA,UAAU,CAACU,MAAX,CAAkBT,GAAlB;AACH;AACJ,KATI,MAUA,IAAIE,SAAS,KAAKD,SAAlB,EAA6B;AAC9B;AACZ;AACA;AACA;AACA;AACY,UAAIL,OAAO,CAACc,QAAR,CAAiBV,GAAjB,CAAJ,EAA2B;AACvB,YAAMW,aAAa,GAAGf,OAAO,CAACgB,QAAR,CAAiBZ,GAAjB,CAAtB,CADuB,CAEvB;;AACA,SAACW,aAAa,CAACE,WAAf,IAA8BF,aAAa,CAACG,GAAd,CAAkBb,SAAlB,CAA9B;AACH,OAJD,MAKK;AACD,YAAMc,WAAW,GAAGnB,OAAO,CAACoB,cAAR,CAAuBhB,GAAvB,CAApB;AACAJ,QAAAA,OAAO,CAACO,QAAR,CAAiBH,GAAjB,EAAsBP,WAAW,CAACsB,WAAW,KAAKE,SAAhB,GAA4BF,WAA5B,GAA0Cd,SAA3C,CAAjC;AACH;AACJ;AACJ,GAhDqD,CAiDtD;;;AACA,OAAK,IAAMD,IAAX,IAAkBF,IAAlB,EAAwB;AACpB,QAAID,IAAI,CAACG,IAAD,CAAJ,KAAciB,SAAlB,EACIrB,OAAO,CAACsB,WAAR,CAAoBlB,IAApB;AACP;;AACD,SAAOH,IAAP;AACH;;AAED,SAASF,2BAAT","sourcesContent":["import { isWillChangeMotionValue } from '../../value/use-will-change/is.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { isMotionValue } from '../../value/utils/is-motion-value.mjs';\n\nfunction updateMotionValuesFromProps(element, next, prev) {\n    const { willChange } = next;\n    for (const key in next) {\n        const nextValue = next[key];\n        const prevValue = prev[key];\n        if (isMotionValue(nextValue)) {\n            /**\n             * If this is a motion value found in props or style, we want to add it\n             * to our visual element's motion value map.\n             */\n            element.addValue(key, nextValue);\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.add(key);\n            }\n            /**\n             * Check the version of the incoming motion value with this version\n             * and warn against mismatches.\n             */\n            if (process.env.NODE_ENV === \"development\") {\n                warnOnce(nextValue.version === \"7.2.1\", `Attempting to mix Framer Motion versions ${nextValue.version} with 7.2.1 may not work as expected.`);\n            }\n        }\n        else if (isMotionValue(prevValue)) {\n            /**\n             * If we're swapping from a motion value to a static value,\n             * create a new motion value from that\n             */\n            element.addValue(key, motionValue(nextValue));\n            if (isWillChangeMotionValue(willChange)) {\n                willChange.remove(key);\n            }\n        }\n        else if (prevValue !== nextValue) {\n            /**\n             * If this is a flat value that has changed, update the motion value\n             * or create one if it doesn't exist. We only want to do this if we're\n             * not handling the value with our animation state.\n             */\n            if (element.hasValue(key)) {\n                const existingValue = element.getValue(key);\n                // TODO: Only update values that aren't being animated or even looked at\n                !existingValue.hasAnimated && existingValue.set(nextValue);\n            }\n            else {\n                const latestValue = element.getStaticValue(key);\n                element.addValue(key, motionValue(latestValue !== undefined ? latestValue : nextValue));\n            }\n        }\n    }\n    // Handle removed values\n    for (const key in prev) {\n        if (next[key] === undefined)\n            element.removeValue(key);\n    }\n    return next;\n}\n\nexport { updateMotionValuesFromProps };\n"]},"metadata":{},"sourceType":"module"}