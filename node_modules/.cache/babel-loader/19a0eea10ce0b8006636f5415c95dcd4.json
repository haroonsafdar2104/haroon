{"ast":null,"code":"import _toConsumableArray from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { env } from '../../utils/process.mjs';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\n\nvar getChildKey = function getChildKey(child) {\n  return child.key || \"\";\n};\n\nfunction updateChildLookup(children, allChildren) {\n  children.forEach(function (child) {\n    var key = getChildKey(child);\n    allChildren.set(key, child);\n  });\n}\n\nfunction onlyElements(children) {\n  var filtered = []; // We use forEach here instead of map as map mutates the component key by preprending `.$`\n\n  Children.forEach(children, function (child) {\n    if (isValidElement(child)) filtered.push(child);\n  });\n  return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\n\n\nvar AnimatePresence = function AnimatePresence(_ref) {\n  var children = _ref.children,\n      custom = _ref.custom,\n      _ref$initial = _ref.initial,\n      initial = _ref$initial === void 0 ? true : _ref$initial,\n      onExitComplete = _ref.onExitComplete,\n      exitBeforeEnter = _ref.exitBeforeEnter,\n      _ref$presenceAffectsL = _ref.presenceAffectsLayout,\n      presenceAffectsLayout = _ref$presenceAffectsL === void 0 ? true : _ref$presenceAffectsL,\n      _ref$mode = _ref.mode,\n      mode = _ref$mode === void 0 ? \"sync\" : _ref$mode;\n\n  // Support deprecated exitBeforeEnter prop\n  if (exitBeforeEnter) {\n    mode = \"wait\";\n    warnOnce(false, \"Replace exitBeforeEnter with mode='wait'\");\n  } // We want to force a re-render once all exiting animations have finished. We\n  // either use a local forceRender function, or one from a parent context if it exists.\n\n\n  var _useForceUpdate = useForceUpdate(),\n      _useForceUpdate2 = _slicedToArray(_useForceUpdate, 1),\n      forceRender = _useForceUpdate2[0];\n\n  var forceRenderLayoutGroup = useContext(LayoutGroupContext).forceRender;\n  if (forceRenderLayoutGroup) forceRender = forceRenderLayoutGroup;\n  var isMounted = useIsMounted(); // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n\n  var filteredChildren = onlyElements(children);\n  var childrenToRender = filteredChildren;\n  var exiting = new Set(); // Keep a living record of the children we're actually rendering so we\n  // can diff to figure out which are entering and exiting\n\n  var presentChildren = useRef(childrenToRender); // A lookup table to quickly reference components by key\n\n  var allChildren = useRef(new Map()).current; // If this is the initial component render, just deal with logic surrounding whether\n  // we play onMount animations or not.\n\n  var isInitialRender = useRef(true);\n  useIsomorphicLayoutEffect(function () {\n    isInitialRender.current = false;\n    updateChildLookup(filteredChildren, allChildren);\n    presentChildren.current = childrenToRender;\n  });\n  useUnmountEffect(function () {\n    isInitialRender.current = true;\n    allChildren.clear();\n    exiting.clear();\n  });\n\n  if (isInitialRender.current) {\n    return React.createElement(React.Fragment, null, childrenToRender.map(function (child) {\n      return React.createElement(PresenceChild, {\n        key: getChildKey(child),\n        isPresent: true,\n        initial: initial ? undefined : false,\n        presenceAffectsLayout: presenceAffectsLayout,\n        mode: mode\n      }, child);\n    }));\n  } // If this is a subsequent render, deal with entering and exiting children\n\n\n  childrenToRender = _toConsumableArray(childrenToRender); // Diff the keys of the currently-present and target children to update our\n  // exiting list.\n\n  var presentKeys = presentChildren.current.map(getChildKey);\n  var targetKeys = filteredChildren.map(getChildKey); // Diff the present children with our target children and mark those that are exiting\n\n  var numPresent = presentKeys.length;\n\n  for (var i = 0; i < numPresent; i++) {\n    var key = presentKeys[i];\n\n    if (targetKeys.indexOf(key) === -1) {\n      exiting.add(key);\n    }\n  } // If we currently have exiting children, and we're deferring rendering incoming children\n  // until after all current children have exiting, empty the childrenToRender array\n\n\n  if (mode === \"wait\" && exiting.size) {\n    childrenToRender = [];\n  } // Loop through all currently exiting components and clone them to overwrite `animate`\n  // with any `exit` prop they might have defined.\n\n\n  exiting.forEach(function (key) {\n    // If this component is actually entering again, early return\n    if (targetKeys.indexOf(key) !== -1) return;\n    var child = allChildren.get(key);\n    if (!child) return;\n    var insertionIndex = presentKeys.indexOf(key);\n\n    var onExit = function onExit() {\n      allChildren.delete(key);\n      exiting.delete(key); // Remove this child from the present children\n\n      var removeIndex = presentChildren.current.findIndex(function (presentChild) {\n        return presentChild.key === key;\n      });\n      presentChildren.current.splice(removeIndex, 1); // Defer re-rendering until all exiting children have indeed left\n\n      if (!exiting.size) {\n        presentChildren.current = filteredChildren;\n        if (isMounted.current === false) return;\n        forceRender();\n        onExitComplete && onExitComplete();\n      }\n    };\n\n    childrenToRender.splice(insertionIndex, 0, React.createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: false,\n      onExitComplete: onExit,\n      custom: custom,\n      presenceAffectsLayout: presenceAffectsLayout,\n      mode: mode\n    }, child));\n  }); // Add `MotionContext` even to children that don't need it to ensure we're rendering\n  // the same tree between renders\n\n  childrenToRender = childrenToRender.map(function (child) {\n    var key = child.key;\n    return exiting.has(key) ? child : React.createElement(PresenceChild, {\n      key: getChildKey(child),\n      isPresent: true,\n      presenceAffectsLayout: presenceAffectsLayout,\n      mode: mode\n    }, child);\n  });\n\n  if (env !== \"production\" && mode === \"wait\" && childrenToRender.length > 1) {\n    console.warn(\"You're attempting to animate multiple children within AnimatePresence, but its mode is set to \\\"wait\\\". This will lead to odd visual behaviour.\");\n  }\n\n  return React.createElement(React.Fragment, null, exiting.size ? childrenToRender : childrenToRender.map(function (child) {\n    return cloneElement(child);\n  }));\n};\n\nexport { AnimatePresence };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs"],"names":["React","useContext","useRef","cloneElement","Children","isValidElement","env","useForceUpdate","useIsMounted","PresenceChild","LayoutGroupContext","useIsomorphicLayoutEffect","useUnmountEffect","warnOnce","getChildKey","child","key","updateChildLookup","children","allChildren","forEach","set","onlyElements","filtered","push","AnimatePresence","custom","initial","onExitComplete","exitBeforeEnter","presenceAffectsLayout","mode","forceRender","forceRenderLayoutGroup","isMounted","filteredChildren","childrenToRender","exiting","Set","presentChildren","Map","current","isInitialRender","clear","createElement","Fragment","map","isPresent","undefined","presentKeys","targetKeys","numPresent","length","i","indexOf","add","size","get","insertionIndex","onExit","delete","removeIndex","findIndex","presentChild","splice","has","console","warn"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useContext, useRef, cloneElement, Children, isValidElement } from 'react';\nimport { env } from '../../utils/process.mjs';\nimport { useForceUpdate } from '../../utils/use-force-update.mjs';\nimport { useIsMounted } from '../../utils/use-is-mounted.mjs';\nimport { PresenceChild } from './PresenceChild.mjs';\nimport { LayoutGroupContext } from '../../context/LayoutGroupContext.mjs';\nimport { useIsomorphicLayoutEffect } from '../../utils/use-isomorphic-effect.mjs';\nimport { useUnmountEffect } from '../../utils/use-unmount-effect.mjs';\nimport { warnOnce } from '../../utils/warn-once.mjs';\n\nconst getChildKey = (child) => child.key || \"\";\nfunction updateChildLookup(children, allChildren) {\n    children.forEach((child) => {\n        const key = getChildKey(child);\n        allChildren.set(key, child);\n    });\n}\nfunction onlyElements(children) {\n    const filtered = [];\n    // We use forEach here instead of map as map mutates the component key by preprending `.$`\n    Children.forEach(children, (child) => {\n        if (isValidElement(child))\n            filtered.push(child);\n    });\n    return filtered;\n}\n/**\n * `AnimatePresence` enables the animation of components that have been removed from the tree.\n *\n * When adding/removing more than a single child, every child **must** be given a unique `key` prop.\n *\n * Any `motion` components that have an `exit` property defined will animate out when removed from\n * the tree.\n *\n * ```jsx\n * import { motion, AnimatePresence } from 'framer-motion'\n *\n * export const Items = ({ items }) => (\n *   <AnimatePresence>\n *     {items.map(item => (\n *       <motion.div\n *         key={item.id}\n *         initial={{ opacity: 0 }}\n *         animate={{ opacity: 1 }}\n *         exit={{ opacity: 0 }}\n *       />\n *     ))}\n *   </AnimatePresence>\n * )\n * ```\n *\n * You can sequence exit animations throughout a tree using variants.\n *\n * If a child contains multiple `motion` components with `exit` props, it will only unmount the child\n * once all `motion` components have finished animating out. Likewise, any components using\n * `usePresence` all need to call `safeToRemove`.\n *\n * @public\n */\nconst AnimatePresence = ({ children, custom, initial = true, onExitComplete, exitBeforeEnter, presenceAffectsLayout = true, mode = \"sync\", }) => {\n    // Support deprecated exitBeforeEnter prop\n    if (exitBeforeEnter) {\n        mode = \"wait\";\n        warnOnce(false, \"Replace exitBeforeEnter with mode='wait'\");\n    }\n    // We want to force a re-render once all exiting animations have finished. We\n    // either use a local forceRender function, or one from a parent context if it exists.\n    let [forceRender] = useForceUpdate();\n    const forceRenderLayoutGroup = useContext(LayoutGroupContext).forceRender;\n    if (forceRenderLayoutGroup)\n        forceRender = forceRenderLayoutGroup;\n    const isMounted = useIsMounted();\n    // Filter out any children that aren't ReactElements. We can only track ReactElements with a props.key\n    const filteredChildren = onlyElements(children);\n    let childrenToRender = filteredChildren;\n    const exiting = new Set();\n    // Keep a living record of the children we're actually rendering so we\n    // can diff to figure out which are entering and exiting\n    const presentChildren = useRef(childrenToRender);\n    // A lookup table to quickly reference components by key\n    const allChildren = useRef(new Map()).current;\n    // If this is the initial component render, just deal with logic surrounding whether\n    // we play onMount animations or not.\n    const isInitialRender = useRef(true);\n    useIsomorphicLayoutEffect(() => {\n        isInitialRender.current = false;\n        updateChildLookup(filteredChildren, allChildren);\n        presentChildren.current = childrenToRender;\n    });\n    useUnmountEffect(() => {\n        isInitialRender.current = true;\n        allChildren.clear();\n        exiting.clear();\n    });\n    if (isInitialRender.current) {\n        return (React.createElement(React.Fragment, null, childrenToRender.map((child) => (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, initial: initial ? undefined : false, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child)))));\n    }\n    // If this is a subsequent render, deal with entering and exiting children\n    childrenToRender = [...childrenToRender];\n    // Diff the keys of the currently-present and target children to update our\n    // exiting list.\n    const presentKeys = presentChildren.current.map(getChildKey);\n    const targetKeys = filteredChildren.map(getChildKey);\n    // Diff the present children with our target children and mark those that are exiting\n    const numPresent = presentKeys.length;\n    for (let i = 0; i < numPresent; i++) {\n        const key = presentKeys[i];\n        if (targetKeys.indexOf(key) === -1) {\n            exiting.add(key);\n        }\n    }\n    // If we currently have exiting children, and we're deferring rendering incoming children\n    // until after all current children have exiting, empty the childrenToRender array\n    if (mode === \"wait\" && exiting.size) {\n        childrenToRender = [];\n    }\n    // Loop through all currently exiting components and clone them to overwrite `animate`\n    // with any `exit` prop they might have defined.\n    exiting.forEach((key) => {\n        // If this component is actually entering again, early return\n        if (targetKeys.indexOf(key) !== -1)\n            return;\n        const child = allChildren.get(key);\n        if (!child)\n            return;\n        const insertionIndex = presentKeys.indexOf(key);\n        const onExit = () => {\n            allChildren.delete(key);\n            exiting.delete(key);\n            // Remove this child from the present children\n            const removeIndex = presentChildren.current.findIndex((presentChild) => presentChild.key === key);\n            presentChildren.current.splice(removeIndex, 1);\n            // Defer re-rendering until all exiting children have indeed left\n            if (!exiting.size) {\n                presentChildren.current = filteredChildren;\n                if (isMounted.current === false)\n                    return;\n                forceRender();\n                onExitComplete && onExitComplete();\n            }\n        };\n        childrenToRender.splice(insertionIndex, 0, React.createElement(PresenceChild, { key: getChildKey(child), isPresent: false, onExitComplete: onExit, custom: custom, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    // Add `MotionContext` even to children that don't need it to ensure we're rendering\n    // the same tree between renders\n    childrenToRender = childrenToRender.map((child) => {\n        const key = child.key;\n        return exiting.has(key) ? (child) : (React.createElement(PresenceChild, { key: getChildKey(child), isPresent: true, presenceAffectsLayout: presenceAffectsLayout, mode: mode }, child));\n    });\n    if (env !== \"production\" &&\n        mode === \"wait\" &&\n        childrenToRender.length > 1) {\n        console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to \"wait\". This will lead to odd visual behaviour.`);\n    }\n    return (React.createElement(React.Fragment, null, exiting.size\n        ? childrenToRender\n        : childrenToRender.map((child) => cloneElement(child))));\n};\n\nexport { AnimatePresence };\n"]},"metadata":{},"sourceType":"module"}