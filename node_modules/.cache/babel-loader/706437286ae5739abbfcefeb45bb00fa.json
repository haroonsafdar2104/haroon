{"ast":null,"code":"var nextHandle = 1;\nvar resolved;\nvar activeHandles = {};\n\nfunction findAndClearHandle(handle) {\n  if (handle in activeHandles) {\n    delete activeHandles[handle];\n    return true;\n  }\n\n  return false;\n}\n\nexport var Immediate = {\n  setImmediate: function (cb) {\n    var handle = nextHandle++;\n    activeHandles[handle] = true;\n\n    if (!resolved) {\n      resolved = Promise.resolve();\n    }\n\n    resolved.then(function () {\n      return findAndClearHandle(handle) && cb();\n    });\n    return handle;\n  },\n  clearImmediate: function (handle) {\n    findAndClearHandle(handle);\n  }\n};\nexport var TestTools = {\n  pending: function () {\n    return Object.keys(activeHandles).length;\n  }\n};","map":{"version":3,"mappings":"AAAA,IAAIA,UAAU,GAAG,CAAjB;AAEA,IAAIC,QAAJ;AACA,IAAMC,aAAa,GAA2B,EAA9C;;AAOA,SAASC,kBAAT,CAA4BC,MAA5B,EAA0C;AACxC,MAAIA,MAAM,IAAIF,aAAd,EAA6B;AAC3B,WAAOA,aAAa,CAACE,MAAD,CAApB;AACA,WAAO,IAAP;AACD;;AACD,SAAO,KAAP;AACD;;AAKD,OAAO,IAAMC,SAAS,GAAG;AACvBC,cAAY,EAAZ,UAAaC,EAAb,EAA2B;AACzB,QAAMH,MAAM,GAAGJ,UAAU,EAAzB;AACAE,iBAAa,CAACE,MAAD,CAAb,GAAwB,IAAxB;;AACA,QAAI,CAACH,QAAL,EAAe;AACbA,cAAQ,GAAGO,OAAO,CAACC,OAAR,EAAX;AACD;;AACDR,YAAQ,CAACS,IAAT,CAAc;AAAM,+BAAkB,CAACN,MAAD,CAAlB,IAA8BG,EAAE,EAAhC;AAAkC,KAAtD;AACA,WAAOH,MAAP;AACD,GATsB;AAWvBO,gBAAc,EAAd,UAAeP,MAAf,EAA6B;AAC3BD,sBAAkB,CAACC,MAAD,CAAlB;AACD;AAbsB,CAAlB;AAmBP,OAAO,IAAMQ,SAAS,GAAG;AACvBC,SAAO;AACL,WAAOC,MAAM,CAACC,IAAP,CAAYb,aAAZ,EAA2Bc,MAAlC;AACD;AAHsB,CAAlB","names":["nextHandle","resolved","activeHandles","findAndClearHandle","handle","Immediate","setImmediate","cb","Promise","resolve","then","clearImmediate","TestTools","pending","Object","keys","length"],"sources":["C:\\Users\\Admin\\Downloads\\portpoliopro-main\\client\\node_modules\\rxjs\\src\\internal\\util\\Immediate.ts"],"sourcesContent":["let nextHandle = 1;\n// The promise needs to be created lazily otherwise it won't be patched by Zones\nlet resolved: Promise<any>;\nconst activeHandles: { [key: number]: any } = {};\n\n/**\n * Finds the handle in the list of active handles, and removes it.\n * Returns `true` if found, `false` otherwise. Used both to clear\n * Immediate scheduled tasks, and to identify if a task should be scheduled.\n */\nfunction findAndClearHandle(handle: number): boolean {\n  if (handle in activeHandles) {\n    delete activeHandles[handle];\n    return true;\n  }\n  return false;\n}\n\n/**\n * Helper functions to schedule and unschedule microtasks.\n */\nexport const Immediate = {\n  setImmediate(cb: () => void): number {\n    const handle = nextHandle++;\n    activeHandles[handle] = true;\n    if (!resolved) {\n      resolved = Promise.resolve();\n    }\n    resolved.then(() => findAndClearHandle(handle) && cb());\n    return handle;\n  },\n\n  clearImmediate(handle: number): void {\n    findAndClearHandle(handle);\n  },\n};\n\n/**\n * Used for internal testing purposes only. Do not export from library.\n */\nexport const TestTools = {\n  pending() {\n    return Object.keys(activeHandles).length;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}