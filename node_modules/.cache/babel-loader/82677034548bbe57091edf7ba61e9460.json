{"ast":null,"code":"var notify = function notify(node) {\n  return !node.isLayoutDirty && node.willUpdate(false);\n};\n\nfunction nodeGroup() {\n  var nodes = new Set();\n  var subscriptions = new WeakMap();\n\n  var dirtyAll = function dirtyAll() {\n    return nodes.forEach(notify);\n  };\n\n  return {\n    add: function add(node) {\n      nodes.add(node);\n      subscriptions.set(node, node.addEventListener(\"willUpdate\", dirtyAll));\n    },\n    remove: function remove(node) {\n      var _a;\n\n      nodes.delete(node);\n      (_a = subscriptions.get(node)) === null || _a === void 0 ? void 0 : _a();\n      subscriptions.delete(node);\n      dirtyAll();\n    },\n    dirty: dirtyAll\n  };\n}\n\nexport { nodeGroup };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/projection/node/group.mjs"],"names":["notify","node","isLayoutDirty","willUpdate","nodeGroup","nodes","Set","subscriptions","WeakMap","dirtyAll","forEach","add","set","addEventListener","remove","_a","delete","get","dirty"],"mappings":"AAAA,IAAMA,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD;AAAA,SAAU,CAACA,IAAI,CAACC,aAAN,IAAuBD,IAAI,CAACE,UAAL,CAAgB,KAAhB,CAAjC;AAAA,CAAf;;AACA,SAASC,SAAT,GAAqB;AACjB,MAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACA,MAAMC,aAAa,GAAG,IAAIC,OAAJ,EAAtB;;AACA,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA,WAAMJ,KAAK,CAACK,OAAN,CAAcV,MAAd,CAAN;AAAA,GAAjB;;AACA,SAAO;AACHW,IAAAA,GAAG,EAAE,aAACV,IAAD,EAAU;AACXI,MAAAA,KAAK,CAACM,GAAN,CAAUV,IAAV;AACAM,MAAAA,aAAa,CAACK,GAAd,CAAkBX,IAAlB,EAAwBA,IAAI,CAACY,gBAAL,CAAsB,YAAtB,EAAoCJ,QAApC,CAAxB;AACH,KAJE;AAKHK,IAAAA,MAAM,EAAE,gBAACb,IAAD,EAAU;AACd,UAAIc,EAAJ;;AACAV,MAAAA,KAAK,CAACW,MAAN,CAAaf,IAAb;AACA,OAACc,EAAE,GAAGR,aAAa,CAACU,GAAd,CAAkBhB,IAAlB,CAAN,MAAmC,IAAnC,IAA2Cc,EAAE,KAAK,KAAK,CAAvD,GAA2D,KAAK,CAAhE,GAAoEA,EAAE,EAAtE;AACAR,MAAAA,aAAa,CAACS,MAAd,CAAqBf,IAArB;AACAQ,MAAAA,QAAQ;AACX,KAXE;AAYHS,IAAAA,KAAK,EAAET;AAZJ,GAAP;AAcH;;AAED,SAASL,SAAT","sourcesContent":["const notify = (node) => !node.isLayoutDirty && node.willUpdate(false);\nfunction nodeGroup() {\n    const nodes = new Set();\n    const subscriptions = new WeakMap();\n    const dirtyAll = () => nodes.forEach(notify);\n    return {\n        add: (node) => {\n            nodes.add(node);\n            subscriptions.set(node, node.addEventListener(\"willUpdate\", dirtyAll));\n        },\n        remove: (node) => {\n            var _a;\n            nodes.delete(node);\n            (_a = subscriptions.get(node)) === null || _a === void 0 ? void 0 : _a();\n            subscriptions.delete(node);\n            dirtyAll();\n        },\n        dirty: dirtyAll,\n    };\n}\n\nexport { nodeGroup };\n"]},"metadata":{},"sourceType":"module"}