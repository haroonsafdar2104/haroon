{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"D:\\\\Web Data\\\\Personal-Website\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport { __rest } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { noop } from '@motionone/utils';\nimport { animateStyle } from '../animate/animate-style.es.js';\nimport { style } from '../animate/style.es.js';\nimport { getOptions } from '../animate/utils/options.es.js';\nimport { hasChanged } from './utils/has-changed.es.js';\nimport { resolveVariant } from './utils/resolve-variant.es.js';\nimport { scheduleAnimation, unscheduleAnimation } from './utils/schedule.es.js';\nimport { inView } from './gestures/in-view.es.js';\nimport { hover } from './gestures/hover.es.js';\nimport { press } from './gestures/press.es.js';\nimport { motionEvent } from './utils/events.es.js';\nvar gestures = {\n  inView: inView,\n  hover: hover,\n  press: press\n};\n/**\n * A list of state types, in priority order. If a value is defined in\n * a righter-most type, it will override any definition in a lefter-most.\n */\n\nvar stateTypes = [\"initial\", \"animate\"].concat(_toConsumableArray(Object.keys(gestures)), [\"exit\"]);\n/**\n * A global store of all generated motion states. This can be used to lookup\n * a motion state for a given Element.\n */\n\nvar mountedStates = new WeakMap();\n\nfunction createMotionState() {\n  var _marked = /*#__PURE__*/_regeneratorRuntime.mark(animateUpdates);\n\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var parent = arguments.length > 1 ? arguments[1] : undefined;\n\n  /**\n   * The element represented by the motion state. This is an empty reference\n   * when we create the state to support SSR and allow for later mounting\n   * in view libraries.\n   *\n   * @ts-ignore\n   */\n  var element;\n  /**\n   * Calculate a depth that we can use to order motion states by tree depth.\n   */\n\n  var depth = parent ? parent.getDepth() + 1 : 0;\n  /**\n   * Track which states are currently active.\n   */\n\n  var activeStates = {\n    initial: true,\n    animate: true\n  };\n  /**\n   * A map of functions that, when called, will remove event listeners for\n   * a given gesture.\n   */\n\n  var gestureSubscriptions = {};\n  /**\n   * Initialise a context to share through motion states. This\n   * will be populated by variant names (if any).\n   */\n\n  var context = {};\n\n  var _iterator = _createForOfIteratorHelper(stateTypes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var name = _step.value;\n      context[name] = typeof options[name] === \"string\" ? options[name] : parent === null || parent === void 0 ? void 0 : parent.getContext()[name];\n    }\n    /**\n     * If initial is set to false we use the animate prop as the initial\n     * animation state.\n     */\n\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  var initialVariantSource = options.initial === false ? \"animate\" : \"initial\";\n  /**\n   * Destructure an initial target out from the resolved initial variant.\n   */\n\n  var _a = resolveVariant(options[initialVariantSource] || context[initialVariantSource], options.variants) || {},\n      target = __rest(_a, [\"transition\"]);\n  /**\n   * The base target is a cached map of values that we'll use to animate\n   * back to if a value is removed from all active state types. This\n   * is usually the initial value as read from the DOM, for instance if\n   * it hasn't been defined in initial.\n   */\n\n\n  var baseTarget = Object.assign({}, target);\n  /**\n   * A generator that will be processed by the global animation scheduler.\n   * This yeilds when it switches from reading the DOM to writing to it\n   * to prevent layout thrashing.\n   */\n\n  function animateUpdates() {\n    var _a, _b, prevTarget, animationOptions, _iterator2, _step2, name, variant, key, allTargetKeys, animationFactories, animations, animationTarget;\n\n    return _regeneratorRuntime.wrap(function animateUpdates$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            prevTarget = target;\n            target = {};\n            animationOptions = {};\n            _iterator2 = _createForOfIteratorHelper(stateTypes);\n            _context.prev = 4;\n\n            _iterator2.s();\n\n          case 6:\n            if ((_step2 = _iterator2.n()).done) {\n              _context.next = 24;\n              break;\n            }\n\n            name = _step2.value;\n\n            if (activeStates[name]) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.abrupt(\"continue\", 22);\n\n          case 10:\n            variant = resolveVariant(options[name]);\n\n            if (variant) {\n              _context.next = 13;\n              break;\n            }\n\n            return _context.abrupt(\"continue\", 22);\n\n          case 13:\n            _context.t0 = _regeneratorRuntime.keys(variant);\n\n          case 14:\n            if ((_context.t1 = _context.t0()).done) {\n              _context.next = 22;\n              break;\n            }\n\n            key = _context.t1.value;\n\n            if (!(key === \"transition\")) {\n              _context.next = 18;\n              break;\n            }\n\n            return _context.abrupt(\"continue\", 14);\n\n          case 18:\n            target[key] = variant[key];\n            animationOptions[key] = getOptions((_b = (_a = variant.transition) !== null && _a !== void 0 ? _a : options.transition) !== null && _b !== void 0 ? _b : {}, key);\n            _context.next = 14;\n            break;\n\n          case 22:\n            _context.next = 6;\n            break;\n\n          case 24:\n            _context.next = 29;\n            break;\n\n          case 26:\n            _context.prev = 26;\n            _context.t2 = _context[\"catch\"](4);\n\n            _iterator2.e(_context.t2);\n\n          case 29:\n            _context.prev = 29;\n\n            _iterator2.f();\n\n            return _context.finish(29);\n\n          case 32:\n            allTargetKeys = new Set([].concat(_toConsumableArray(Object.keys(target)), _toConsumableArray(Object.keys(prevTarget))));\n            animationFactories = [];\n            allTargetKeys.forEach(function (key) {\n              var _a;\n\n              if (target[key] === undefined) {\n                target[key] = baseTarget[key];\n              }\n\n              if (hasChanged(prevTarget[key], target[key])) {\n                (_a = baseTarget[key]) !== null && _a !== void 0 ? _a : baseTarget[key] = style.get(element, key);\n                animationFactories.push(animateStyle(element, key, target[key], animationOptions[key]));\n              }\n            }); // Wait for all animation states to read from the DOM\n\n            _context.next = 37;\n            return;\n\n          case 37:\n            animations = animationFactories.map(function (factory) {\n              return factory();\n            }).filter(Boolean);\n\n            if (animations.length) {\n              _context.next = 40;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 40:\n            animationTarget = target;\n            element.dispatchEvent(motionEvent(\"motionstart\", animationTarget));\n            Promise.all(animations.map(function (animation) {\n              return animation.finished;\n            })).then(function () {\n              element.dispatchEvent(motionEvent(\"motioncomplete\", animationTarget));\n            }).catch(noop);\n\n          case 43:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _marked, null, [[4, 26, 29, 32]]);\n  }\n\n  var setGesture = function setGesture(name, isActive) {\n    return function () {\n      activeStates[name] = isActive;\n      scheduleAnimation(state);\n    };\n  };\n\n  var updateGestureSubscriptions = function updateGestureSubscriptions() {\n    for (var name in gestures) {\n      var isGestureActive = gestures[name].isActive(options);\n      var remove = gestureSubscriptions[name];\n\n      if (isGestureActive && !remove) {\n        gestureSubscriptions[name] = gestures[name].subscribe(element, {\n          enable: setGesture(name, true),\n          disable: setGesture(name, false)\n        }, options);\n      } else if (!isGestureActive && remove) {\n        remove();\n        delete gestureSubscriptions[name];\n      }\n    }\n  };\n\n  var state = {\n    update: function update(newOptions) {\n      if (!element) return;\n      options = newOptions;\n      updateGestureSubscriptions();\n      scheduleAnimation(state);\n    },\n    setActive: function setActive(name, isActive) {\n      if (!element) return;\n      activeStates[name] = isActive;\n      scheduleAnimation(state);\n    },\n    animateUpdates: animateUpdates,\n    getDepth: function getDepth() {\n      return depth;\n    },\n    getTarget: function getTarget() {\n      return target;\n    },\n    getOptions: function getOptions() {\n      return options;\n    },\n    getContext: function getContext() {\n      return context;\n    },\n    mount: function mount(newElement) {\n      invariant(Boolean(newElement), \"Animation state must be mounted with valid Element\");\n      element = newElement;\n      mountedStates.set(element, state);\n      updateGestureSubscriptions();\n      return function () {\n        mountedStates.delete(element);\n        unscheduleAnimation(state);\n\n        for (var key in gestureSubscriptions) {\n          gestureSubscriptions[key]();\n        }\n      };\n    },\n    isMounted: function isMounted() {\n      return Boolean(element);\n    }\n  };\n  return state;\n}\n\nexport { createMotionState, mountedStates };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/@motionone/dom/dist/state/index.es.js"],"names":["__rest","invariant","noop","animateStyle","style","getOptions","hasChanged","resolveVariant","scheduleAnimation","unscheduleAnimation","inView","hover","press","motionEvent","gestures","stateTypes","Object","keys","mountedStates","WeakMap","createMotionState","animateUpdates","options","parent","element","depth","getDepth","activeStates","initial","animate","gestureSubscriptions","context","name","getContext","initialVariantSource","_a","variants","target","baseTarget","assign","prevTarget","animationOptions","variant","key","_b","transition","allTargetKeys","Set","animationFactories","forEach","undefined","get","push","animations","map","factory","filter","Boolean","length","animationTarget","dispatchEvent","Promise","all","animation","finished","then","catch","setGesture","isActive","state","updateGestureSubscriptions","isGestureActive","remove","subscribe","enable","disable","update","newOptions","setActive","getTarget","mount","newElement","set","delete","isMounted"],"mappings":"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","sourcesContent":["import { __rest } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { noop } from '@motionone/utils';\nimport { animateStyle } from '../animate/animate-style.es.js';\nimport { style } from '../animate/style.es.js';\nimport { getOptions } from '../animate/utils/options.es.js';\nimport { hasChanged } from './utils/has-changed.es.js';\nimport { resolveVariant } from './utils/resolve-variant.es.js';\nimport { scheduleAnimation, unscheduleAnimation } from './utils/schedule.es.js';\nimport { inView } from './gestures/in-view.es.js';\nimport { hover } from './gestures/hover.es.js';\nimport { press } from './gestures/press.es.js';\nimport { motionEvent } from './utils/events.es.js';\n\nconst gestures = { inView, hover, press };\n/**\n * A list of state types, in priority order. If a value is defined in\n * a righter-most type, it will override any definition in a lefter-most.\n */\nconst stateTypes = [\"initial\", \"animate\", ...Object.keys(gestures), \"exit\"];\n/**\n * A global store of all generated motion states. This can be used to lookup\n * a motion state for a given Element.\n */\nconst mountedStates = new WeakMap();\nfunction createMotionState(options = {}, parent) {\n    /**\n     * The element represented by the motion state. This is an empty reference\n     * when we create the state to support SSR and allow for later mounting\n     * in view libraries.\n     *\n     * @ts-ignore\n     */\n    let element;\n    /**\n     * Calculate a depth that we can use to order motion states by tree depth.\n     */\n    let depth = parent ? parent.getDepth() + 1 : 0;\n    /**\n     * Track which states are currently active.\n     */\n    const activeStates = { initial: true, animate: true };\n    /**\n     * A map of functions that, when called, will remove event listeners for\n     * a given gesture.\n     */\n    const gestureSubscriptions = {};\n    /**\n     * Initialise a context to share through motion states. This\n     * will be populated by variant names (if any).\n     */\n    const context = {};\n    for (const name of stateTypes) {\n        context[name] =\n            typeof options[name] === \"string\"\n                ? options[name]\n                : parent === null || parent === void 0 ? void 0 : parent.getContext()[name];\n    }\n    /**\n     * If initial is set to false we use the animate prop as the initial\n     * animation state.\n     */\n    const initialVariantSource = options.initial === false ? \"animate\" : \"initial\";\n    /**\n     * Destructure an initial target out from the resolved initial variant.\n     */\n    let _a = resolveVariant(options[initialVariantSource] || context[initialVariantSource], options.variants) || {}, target = __rest(_a, [\"transition\"]);\n    /**\n     * The base target is a cached map of values that we'll use to animate\n     * back to if a value is removed from all active state types. This\n     * is usually the initial value as read from the DOM, for instance if\n     * it hasn't been defined in initial.\n     */\n    const baseTarget = Object.assign({}, target);\n    /**\n     * A generator that will be processed by the global animation scheduler.\n     * This yeilds when it switches from reading the DOM to writing to it\n     * to prevent layout thrashing.\n     */\n    function* animateUpdates() {\n        var _a, _b;\n        const prevTarget = target;\n        target = {};\n        const animationOptions = {};\n        for (const name of stateTypes) {\n            if (!activeStates[name])\n                continue;\n            const variant = resolveVariant(options[name]);\n            if (!variant)\n                continue;\n            for (const key in variant) {\n                if (key === \"transition\")\n                    continue;\n                target[key] = variant[key];\n                animationOptions[key] = getOptions((_b = (_a = variant.transition) !== null && _a !== void 0 ? _a : options.transition) !== null && _b !== void 0 ? _b : {}, key);\n            }\n        }\n        const allTargetKeys = new Set([\n            ...Object.keys(target),\n            ...Object.keys(prevTarget),\n        ]);\n        const animationFactories = [];\n        allTargetKeys.forEach((key) => {\n            var _a;\n            if (target[key] === undefined) {\n                target[key] = baseTarget[key];\n            }\n            if (hasChanged(prevTarget[key], target[key])) {\n                (_a = baseTarget[key]) !== null && _a !== void 0 ? _a : (baseTarget[key] = style.get(element, key));\n                animationFactories.push(animateStyle(element, key, target[key], animationOptions[key]));\n            }\n        });\n        // Wait for all animation states to read from the DOM\n        yield;\n        const animations = animationFactories\n            .map((factory) => factory())\n            .filter(Boolean);\n        if (!animations.length)\n            return;\n        const animationTarget = target;\n        element.dispatchEvent(motionEvent(\"motionstart\", animationTarget));\n        Promise.all(animations.map((animation) => animation.finished))\n            .then(() => {\n            element.dispatchEvent(motionEvent(\"motioncomplete\", animationTarget));\n        })\n            .catch(noop);\n    }\n    const setGesture = (name, isActive) => () => {\n        activeStates[name] = isActive;\n        scheduleAnimation(state);\n    };\n    const updateGestureSubscriptions = () => {\n        for (const name in gestures) {\n            const isGestureActive = gestures[name].isActive(options);\n            const remove = gestureSubscriptions[name];\n            if (isGestureActive && !remove) {\n                gestureSubscriptions[name] = gestures[name].subscribe(element, {\n                    enable: setGesture(name, true),\n                    disable: setGesture(name, false),\n                }, options);\n            }\n            else if (!isGestureActive && remove) {\n                remove();\n                delete gestureSubscriptions[name];\n            }\n        }\n    };\n    const state = {\n        update: (newOptions) => {\n            if (!element)\n                return;\n            options = newOptions;\n            updateGestureSubscriptions();\n            scheduleAnimation(state);\n        },\n        setActive: (name, isActive) => {\n            if (!element)\n                return;\n            activeStates[name] = isActive;\n            scheduleAnimation(state);\n        },\n        animateUpdates,\n        getDepth: () => depth,\n        getTarget: () => target,\n        getOptions: () => options,\n        getContext: () => context,\n        mount: (newElement) => {\n            invariant(Boolean(newElement), \"Animation state must be mounted with valid Element\");\n            element = newElement;\n            mountedStates.set(element, state);\n            updateGestureSubscriptions();\n            return () => {\n                mountedStates.delete(element);\n                unscheduleAnimation(state);\n                for (const key in gestureSubscriptions) {\n                    gestureSubscriptions[key]();\n                }\n            };\n        },\n        isMounted: () => Boolean(element),\n    };\n    return state;\n}\n\nexport { createMotionState, mountedStates };\n"]},"metadata":{},"sourceType":"module"}