{"ast":null,"code":"import { noopReturn } from '@motionone/utils';\n/*\n  Bezier function generator\n\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\n\nvar calcBezier = function calcBezier(t, a1, a2) {\n  return (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) * t;\n};\n\nvar subdivisionPrecision = 0.0000001;\nvar subdivisionMaxIterations = 12;\n\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n  var currentX;\n  var currentT;\n  var i = 0;\n\n  do {\n    currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n    currentX = calcBezier(currentT, mX1, mX2) - x;\n\n    if (currentX > 0.0) {\n      upperBound = currentT;\n    } else {\n      lowerBound = currentT;\n    }\n  } while (Math.abs(currentX) > subdivisionPrecision && ++i < subdivisionMaxIterations);\n\n  return currentT;\n}\n\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n  // If this is a linear gradient, return linear easing\n  if (mX1 === mY1 && mX2 === mY2) return noopReturn;\n\n  var getTForX = function getTForX(aX) {\n    return binarySubdivide(aX, 0, 1, mX1, mX2);\n  }; // If animation is at start/end, return t without easing\n\n\n  return function (t) {\n    return t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n  };\n}\n\nexport { cubicBezier };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/@motionone/easing/dist/cubic-bezier.es.js"],"names":["noopReturn","calcBezier","t","a1","a2","subdivisionPrecision","subdivisionMaxIterations","binarySubdivide","x","lowerBound","upperBound","mX1","mX2","currentX","currentT","i","Math","abs","cubicBezier","mY1","mY2","getTForX","aX"],"mappings":"AAAA,SAASA,UAAT,QAA2B,kBAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD,EAAIC,EAAJ,EAAQC,EAAR;AAAA,SAAe,CAAC,CAAC,CAAC,MAAM,MAAMA,EAAZ,GAAiB,MAAMD,EAAxB,IAA8BD,CAA9B,IAAmC,MAAME,EAAN,GAAW,MAAMD,EAApD,CAAD,IAA4DD,CAA5D,GAAgE,MAAMC,EAAvE,IAA6ED,CAA5F;AAAA,CAAnB;;AACA,IAAMG,oBAAoB,GAAG,SAA7B;AACA,IAAMC,wBAAwB,GAAG,EAAjC;;AACA,SAASC,eAAT,CAAyBC,CAAzB,EAA4BC,UAA5B,EAAwCC,UAAxC,EAAoDC,GAApD,EAAyDC,GAAzD,EAA8D;AAC1D,MAAIC,QAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,CAAC,GAAG,CAAR;;AACA,KAAG;AACCD,IAAAA,QAAQ,GAAGL,UAAU,GAAG,CAACC,UAAU,GAAGD,UAAd,IAA4B,GAApD;AACAI,IAAAA,QAAQ,GAAGZ,UAAU,CAACa,QAAD,EAAWH,GAAX,EAAgBC,GAAhB,CAAV,GAAiCJ,CAA5C;;AACA,QAAIK,QAAQ,GAAG,GAAf,EAAoB;AAChBH,MAAAA,UAAU,GAAGI,QAAb;AACH,KAFD,MAGK;AACDL,MAAAA,UAAU,GAAGK,QAAb;AACH;AACJ,GATD,QASSE,IAAI,CAACC,GAAL,CAASJ,QAAT,IAAqBR,oBAArB,IACL,EAAEU,CAAF,GAAMT,wBAVV;;AAWA,SAAOQ,QAAP;AACH;;AACD,SAASI,WAAT,CAAqBP,GAArB,EAA0BQ,GAA1B,EAA+BP,GAA/B,EAAoCQ,GAApC,EAAyC;AACrC;AACA,MAAIT,GAAG,KAAKQ,GAAR,IAAeP,GAAG,KAAKQ,GAA3B,EACI,OAAOpB,UAAP;;AACJ,MAAMqB,QAAQ,GAAG,SAAXA,QAAW,CAACC,EAAD;AAAA,WAAQf,eAAe,CAACe,EAAD,EAAK,CAAL,EAAQ,CAAR,EAAWX,GAAX,EAAgBC,GAAhB,CAAvB;AAAA,GAAjB,CAJqC,CAKrC;;;AACA,SAAO,UAACV,CAAD;AAAA,WAAOA,CAAC,KAAK,CAAN,IAAWA,CAAC,KAAK,CAAjB,GAAqBA,CAArB,GAAyBD,UAAU,CAACoB,QAAQ,CAACnB,CAAD,CAAT,EAAciB,GAAd,EAAmBC,GAAnB,CAA1C;AAAA,GAAP;AACH;;AAED,SAASF,WAAT","sourcesContent":["import { noopReturn } from '@motionone/utils';\n\n/*\n  Bezier function generator\n\n  This has been modified from Gaëtan Renaudeau's BezierEasing\n  https://github.com/gre/bezier-easing/blob/master/src/index.js\n  https://github.com/gre/bezier-easing/blob/master/LICENSE\n  \n  I've removed the newtonRaphsonIterate algo because in benchmarking it\n  wasn't noticiably faster than binarySubdivision, indeed removing it\n  usually improved times, depending on the curve.\n\n  I also removed the lookup table, as for the added bundle size and loop we're\n  only cutting ~4 or so subdivision iterations. I bumped the max iterations up\n  to 12 to compensate and this still tended to be faster for no perceivable\n  loss in accuracy.\n\n  Usage\n    const easeOut = cubicBezier(.17,.67,.83,.67);\n    const x = easeOut(0.5); // returns 0.627...\n*/\n// Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.\nconst calcBezier = (t, a1, a2) => (((1.0 - 3.0 * a2 + 3.0 * a1) * t + (3.0 * a2 - 6.0 * a1)) * t + 3.0 * a1) * t;\nconst subdivisionPrecision = 0.0000001;\nconst subdivisionMaxIterations = 12;\nfunction binarySubdivide(x, lowerBound, upperBound, mX1, mX2) {\n    let currentX;\n    let currentT;\n    let i = 0;\n    do {\n        currentT = lowerBound + (upperBound - lowerBound) / 2.0;\n        currentX = calcBezier(currentT, mX1, mX2) - x;\n        if (currentX > 0.0) {\n            upperBound = currentT;\n        }\n        else {\n            lowerBound = currentT;\n        }\n    } while (Math.abs(currentX) > subdivisionPrecision &&\n        ++i < subdivisionMaxIterations);\n    return currentT;\n}\nfunction cubicBezier(mX1, mY1, mX2, mY2) {\n    // If this is a linear gradient, return linear easing\n    if (mX1 === mY1 && mX2 === mY2)\n        return noopReturn;\n    const getTForX = (aX) => binarySubdivide(aX, 0, 1, mX1, mX2);\n    // If animation is at start/end, return t without easing\n    return (t) => t === 0 || t === 1 ? t : calcBezier(getTForX(t), mY1, mY2);\n}\n\nexport { cubicBezier };\n"]},"metadata":{},"sourceType":"module"}