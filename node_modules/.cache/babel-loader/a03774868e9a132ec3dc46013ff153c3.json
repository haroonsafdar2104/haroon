{"ast":null,"code":"import { __rest } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { noop } from '@motionone/utils';\nimport { animateStyle } from '../animate/animate-style.es.js';\nimport { style } from '../animate/style.es.js';\nimport { getOptions } from '../animate/utils/options.es.js';\nimport { hasChanged } from './utils/has-changed.es.js';\nimport { resolveVariant } from './utils/resolve-variant.es.js';\nimport { scheduleAnimation, unscheduleAnimation } from './utils/schedule.es.js';\nimport { inView } from './gestures/in-view.es.js';\nimport { hover } from './gestures/hover.es.js';\nimport { press } from './gestures/press.es.js';\nimport { motionEvent } from './utils/events.es.js';\nconst gestures = {\n  inView,\n  hover,\n  press\n};\n/**\n * A list of state types, in priority order. If a value is defined in\n * a righter-most type, it will override any definition in a lefter-most.\n */\n\nconst stateTypes = [\"initial\", \"animate\", ...Object.keys(gestures), \"exit\"];\n/**\n * A global store of all generated motion states. This can be used to lookup\n * a motion state for a given Element.\n */\n\nconst mountedStates = new WeakMap();\n\nfunction createMotionState() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let parent = arguments.length > 1 ? arguments[1] : undefined;\n\n  /**\n   * The element represented by the motion state. This is an empty reference\n   * when we create the state to support SSR and allow for later mounting\n   * in view libraries.\n   *\n   * @ts-ignore\n   */\n  let element;\n  /**\n   * Calculate a depth that we can use to order motion states by tree depth.\n   */\n\n  let depth = parent ? parent.getDepth() + 1 : 0;\n  /**\n   * Track which states are currently active.\n   */\n\n  const activeStates = {\n    initial: true,\n    animate: true\n  };\n  /**\n   * A map of functions that, when called, will remove event listeners for\n   * a given gesture.\n   */\n\n  const gestureSubscriptions = {};\n  /**\n   * Initialise a context to share through motion states. This\n   * will be populated by variant names (if any).\n   */\n\n  const context = {};\n\n  for (const name of stateTypes) {\n    context[name] = typeof options[name] === \"string\" ? options[name] : parent === null || parent === void 0 ? void 0 : parent.getContext()[name];\n  }\n  /**\n   * If initial is set to false we use the animate prop as the initial\n   * animation state.\n   */\n\n\n  const initialVariantSource = options.initial === false ? \"animate\" : \"initial\";\n  /**\n   * Destructure an initial target out from the resolved initial variant.\n   */\n\n  let _a = resolveVariant(options[initialVariantSource] || context[initialVariantSource], options.variants) || {},\n      target = __rest(_a, [\"transition\"]);\n  /**\n   * The base target is a cached map of values that we'll use to animate\n   * back to if a value is removed from all active state types. This\n   * is usually the initial value as read from the DOM, for instance if\n   * it hasn't been defined in initial.\n   */\n\n\n  const baseTarget = Object.assign({}, target);\n  /**\n   * A generator that will be processed by the global animation scheduler.\n   * This yeilds when it switches from reading the DOM to writing to it\n   * to prevent layout thrashing.\n   */\n\n  function* animateUpdates() {\n    var _a, _b;\n\n    const prevTarget = target;\n    target = {};\n    const animationOptions = {};\n\n    for (const name of stateTypes) {\n      if (!activeStates[name]) continue;\n      const variant = resolveVariant(options[name]);\n      if (!variant) continue;\n\n      for (const key in variant) {\n        if (key === \"transition\") continue;\n        target[key] = variant[key];\n        animationOptions[key] = getOptions((_b = (_a = variant.transition) !== null && _a !== void 0 ? _a : options.transition) !== null && _b !== void 0 ? _b : {}, key);\n      }\n    }\n\n    const allTargetKeys = new Set([...Object.keys(target), ...Object.keys(prevTarget)]);\n    const animationFactories = [];\n    allTargetKeys.forEach(key => {\n      var _a;\n\n      if (target[key] === undefined) {\n        target[key] = baseTarget[key];\n      }\n\n      if (hasChanged(prevTarget[key], target[key])) {\n        (_a = baseTarget[key]) !== null && _a !== void 0 ? _a : baseTarget[key] = style.get(element, key);\n        animationFactories.push(animateStyle(element, key, target[key], animationOptions[key]));\n      }\n    }); // Wait for all animation states to read from the DOM\n\n    yield;\n    const animations = animationFactories.map(factory => factory()).filter(Boolean);\n    if (!animations.length) return;\n    const animationTarget = target;\n    element.dispatchEvent(motionEvent(\"motionstart\", animationTarget));\n    Promise.all(animations.map(animation => animation.finished)).then(() => {\n      element.dispatchEvent(motionEvent(\"motioncomplete\", animationTarget));\n    }).catch(noop);\n  }\n\n  const setGesture = (name, isActive) => () => {\n    activeStates[name] = isActive;\n    scheduleAnimation(state);\n  };\n\n  const updateGestureSubscriptions = () => {\n    for (const name in gestures) {\n      const isGestureActive = gestures[name].isActive(options);\n      const remove = gestureSubscriptions[name];\n\n      if (isGestureActive && !remove) {\n        gestureSubscriptions[name] = gestures[name].subscribe(element, {\n          enable: setGesture(name, true),\n          disable: setGesture(name, false)\n        }, options);\n      } else if (!isGestureActive && remove) {\n        remove();\n        delete gestureSubscriptions[name];\n      }\n    }\n  };\n\n  const state = {\n    update: newOptions => {\n      if (!element) return;\n      options = newOptions;\n      updateGestureSubscriptions();\n      scheduleAnimation(state);\n    },\n    setActive: (name, isActive) => {\n      if (!element) return;\n      activeStates[name] = isActive;\n      scheduleAnimation(state);\n    },\n    animateUpdates,\n    getDepth: () => depth,\n    getTarget: () => target,\n    getOptions: () => options,\n    getContext: () => context,\n    mount: newElement => {\n      invariant(Boolean(newElement), \"Animation state must be mounted with valid Element\");\n      element = newElement;\n      mountedStates.set(element, state);\n      updateGestureSubscriptions();\n      return () => {\n        mountedStates.delete(element);\n        unscheduleAnimation(state);\n\n        for (const key in gestureSubscriptions) {\n          gestureSubscriptions[key]();\n        }\n      };\n    },\n    isMounted: () => Boolean(element)\n  };\n  return state;\n}\n\nexport { createMotionState, mountedStates };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/@motionone/dom/dist/state/index.es.js"],"names":["__rest","invariant","noop","animateStyle","style","getOptions","hasChanged","resolveVariant","scheduleAnimation","unscheduleAnimation","inView","hover","press","motionEvent","gestures","stateTypes","Object","keys","mountedStates","WeakMap","createMotionState","options","parent","element","depth","getDepth","activeStates","initial","animate","gestureSubscriptions","context","name","getContext","initialVariantSource","_a","variants","target","baseTarget","assign","animateUpdates","_b","prevTarget","animationOptions","variant","key","transition","allTargetKeys","Set","animationFactories","forEach","undefined","get","push","animations","map","factory","filter","Boolean","length","animationTarget","dispatchEvent","Promise","all","animation","finished","then","catch","setGesture","isActive","state","updateGestureSubscriptions","isGestureActive","remove","subscribe","enable","disable","update","newOptions","setActive","getTarget","mount","newElement","set","delete","isMounted"],"mappings":"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","sourcesContent":["import { __rest } from 'tslib';\nimport { invariant } from 'hey-listen';\nimport { noop } from '@motionone/utils';\nimport { animateStyle } from '../animate/animate-style.es.js';\nimport { style } from '../animate/style.es.js';\nimport { getOptions } from '../animate/utils/options.es.js';\nimport { hasChanged } from './utils/has-changed.es.js';\nimport { resolveVariant } from './utils/resolve-variant.es.js';\nimport { scheduleAnimation, unscheduleAnimation } from './utils/schedule.es.js';\nimport { inView } from './gestures/in-view.es.js';\nimport { hover } from './gestures/hover.es.js';\nimport { press } from './gestures/press.es.js';\nimport { motionEvent } from './utils/events.es.js';\n\nconst gestures = { inView, hover, press };\n/**\n * A list of state types, in priority order. If a value is defined in\n * a righter-most type, it will override any definition in a lefter-most.\n */\nconst stateTypes = [\"initial\", \"animate\", ...Object.keys(gestures), \"exit\"];\n/**\n * A global store of all generated motion states. This can be used to lookup\n * a motion state for a given Element.\n */\nconst mountedStates = new WeakMap();\nfunction createMotionState(options = {}, parent) {\n    /**\n     * The element represented by the motion state. This is an empty reference\n     * when we create the state to support SSR and allow for later mounting\n     * in view libraries.\n     *\n     * @ts-ignore\n     */\n    let element;\n    /**\n     * Calculate a depth that we can use to order motion states by tree depth.\n     */\n    let depth = parent ? parent.getDepth() + 1 : 0;\n    /**\n     * Track which states are currently active.\n     */\n    const activeStates = { initial: true, animate: true };\n    /**\n     * A map of functions that, when called, will remove event listeners for\n     * a given gesture.\n     */\n    const gestureSubscriptions = {};\n    /**\n     * Initialise a context to share through motion states. This\n     * will be populated by variant names (if any).\n     */\n    const context = {};\n    for (const name of stateTypes) {\n        context[name] =\n            typeof options[name] === \"string\"\n                ? options[name]\n                : parent === null || parent === void 0 ? void 0 : parent.getContext()[name];\n    }\n    /**\n     * If initial is set to false we use the animate prop as the initial\n     * animation state.\n     */\n    const initialVariantSource = options.initial === false ? \"animate\" : \"initial\";\n    /**\n     * Destructure an initial target out from the resolved initial variant.\n     */\n    let _a = resolveVariant(options[initialVariantSource] || context[initialVariantSource], options.variants) || {}, target = __rest(_a, [\"transition\"]);\n    /**\n     * The base target is a cached map of values that we'll use to animate\n     * back to if a value is removed from all active state types. This\n     * is usually the initial value as read from the DOM, for instance if\n     * it hasn't been defined in initial.\n     */\n    const baseTarget = Object.assign({}, target);\n    /**\n     * A generator that will be processed by the global animation scheduler.\n     * This yeilds when it switches from reading the DOM to writing to it\n     * to prevent layout thrashing.\n     */\n    function* animateUpdates() {\n        var _a, _b;\n        const prevTarget = target;\n        target = {};\n        const animationOptions = {};\n        for (const name of stateTypes) {\n            if (!activeStates[name])\n                continue;\n            const variant = resolveVariant(options[name]);\n            if (!variant)\n                continue;\n            for (const key in variant) {\n                if (key === \"transition\")\n                    continue;\n                target[key] = variant[key];\n                animationOptions[key] = getOptions((_b = (_a = variant.transition) !== null && _a !== void 0 ? _a : options.transition) !== null && _b !== void 0 ? _b : {}, key);\n            }\n        }\n        const allTargetKeys = new Set([\n            ...Object.keys(target),\n            ...Object.keys(prevTarget),\n        ]);\n        const animationFactories = [];\n        allTargetKeys.forEach((key) => {\n            var _a;\n            if (target[key] === undefined) {\n                target[key] = baseTarget[key];\n            }\n            if (hasChanged(prevTarget[key], target[key])) {\n                (_a = baseTarget[key]) !== null && _a !== void 0 ? _a : (baseTarget[key] = style.get(element, key));\n                animationFactories.push(animateStyle(element, key, target[key], animationOptions[key]));\n            }\n        });\n        // Wait for all animation states to read from the DOM\n        yield;\n        const animations = animationFactories\n            .map((factory) => factory())\n            .filter(Boolean);\n        if (!animations.length)\n            return;\n        const animationTarget = target;\n        element.dispatchEvent(motionEvent(\"motionstart\", animationTarget));\n        Promise.all(animations.map((animation) => animation.finished))\n            .then(() => {\n            element.dispatchEvent(motionEvent(\"motioncomplete\", animationTarget));\n        })\n            .catch(noop);\n    }\n    const setGesture = (name, isActive) => () => {\n        activeStates[name] = isActive;\n        scheduleAnimation(state);\n    };\n    const updateGestureSubscriptions = () => {\n        for (const name in gestures) {\n            const isGestureActive = gestures[name].isActive(options);\n            const remove = gestureSubscriptions[name];\n            if (isGestureActive && !remove) {\n                gestureSubscriptions[name] = gestures[name].subscribe(element, {\n                    enable: setGesture(name, true),\n                    disable: setGesture(name, false),\n                }, options);\n            }\n            else if (!isGestureActive && remove) {\n                remove();\n                delete gestureSubscriptions[name];\n            }\n        }\n    };\n    const state = {\n        update: (newOptions) => {\n            if (!element)\n                return;\n            options = newOptions;\n            updateGestureSubscriptions();\n            scheduleAnimation(state);\n        },\n        setActive: (name, isActive) => {\n            if (!element)\n                return;\n            activeStates[name] = isActive;\n            scheduleAnimation(state);\n        },\n        animateUpdates,\n        getDepth: () => depth,\n        getTarget: () => target,\n        getOptions: () => options,\n        getContext: () => context,\n        mount: (newElement) => {\n            invariant(Boolean(newElement), \"Animation state must be mounted with valid Element\");\n            element = newElement;\n            mountedStates.set(element, state);\n            updateGestureSubscriptions();\n            return () => {\n                mountedStates.delete(element);\n                unscheduleAnimation(state);\n                for (const key in gestureSubscriptions) {\n                    gestureSubscriptions[key]();\n                }\n            };\n        },\n        isMounted: () => Boolean(element),\n    };\n    return state;\n}\n\nexport { createMotionState, mountedStates };\n"]},"metadata":{},"sourceType":"module"}