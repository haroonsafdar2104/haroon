{"ast":null,"code":"import { mix } from 'popmotion';\nimport { complex } from 'style-value-types';\nimport { cssVariableRegex } from '../../render/dom/utils/css-variables-conversion.mjs';\nvar varToken = \"_$css\";\nvar correctBoxShadow = {\n  correct: function correct(latest, _ref) {\n    var treeScale = _ref.treeScale,\n        projectionDelta = _ref.projectionDelta;\n    var original = latest;\n    /**\n     * We need to first strip and store CSS variables from the string.\n     */\n\n    var containsCSSVariables = latest.includes(\"var(\");\n    var cssVariables = [];\n\n    if (containsCSSVariables) {\n      latest = latest.replace(cssVariableRegex, function (match) {\n        cssVariables.push(match);\n        return varToken;\n      });\n    }\n\n    var shadow = complex.parse(latest); // TODO: Doesn't support multiple shadows\n\n    if (shadow.length > 5) return original;\n    var template = complex.createTransformer(latest);\n    var offset = typeof shadow[0] !== \"number\" ? 1 : 0; // Calculate the overall context scale\n\n    var xScale = projectionDelta.x.scale * treeScale.x;\n    var yScale = projectionDelta.y.scale * treeScale.y;\n    shadow[0 + offset] /= xScale;\n    shadow[1 + offset] /= yScale;\n    /**\n     * Ideally we'd correct x and y scales individually, but because blur and\n     * spread apply to both we have to take a scale average and apply that instead.\n     * We could potentially improve the outcome of this by incorporating the ratio between\n     * the two scales.\n     */\n\n    var averageScale = mix(xScale, yScale, 0.5); // Blur\n\n    if (typeof shadow[2 + offset] === \"number\") shadow[2 + offset] /= averageScale; // Spread\n\n    if (typeof shadow[3 + offset] === \"number\") shadow[3 + offset] /= averageScale;\n    var output = template(shadow);\n\n    if (containsCSSVariables) {\n      var i = 0;\n      output = output.replace(varToken, function () {\n        var cssVariable = cssVariables[i];\n        i++;\n        return cssVariable;\n      });\n    }\n\n    return output;\n  }\n};\nexport { correctBoxShadow };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.mjs"],"names":["mix","complex","cssVariableRegex","varToken","correctBoxShadow","correct","latest","treeScale","projectionDelta","original","containsCSSVariables","includes","cssVariables","replace","match","push","shadow","parse","length","template","createTransformer","offset","xScale","x","scale","yScale","y","averageScale","output","i","cssVariable"],"mappings":"AAAA,SAASA,GAAT,QAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,gBAAT,QAAiC,qDAAjC;AAEA,IAAMC,QAAQ,GAAG,OAAjB;AACA,IAAMC,gBAAgB,GAAG;AACrBC,EAAAA,OAAO,EAAE,iBAACC,MAAD,QAA4C;AAAA,QAAjCC,SAAiC,QAAjCA,SAAiC;AAAA,QAAtBC,eAAsB,QAAtBA,eAAsB;AACjD,QAAMC,QAAQ,GAAGH,MAAjB;AACA;AACR;AACA;;AACQ,QAAMI,oBAAoB,GAAGJ,MAAM,CAACK,QAAP,CAAgB,MAAhB,CAA7B;AACA,QAAMC,YAAY,GAAG,EAArB;;AACA,QAAIF,oBAAJ,EAA0B;AACtBJ,MAAAA,MAAM,GAAGA,MAAM,CAACO,OAAP,CAAeX,gBAAf,EAAiC,UAACY,KAAD,EAAW;AACjDF,QAAAA,YAAY,CAACG,IAAb,CAAkBD,KAAlB;AACA,eAAOX,QAAP;AACH,OAHQ,CAAT;AAIH;;AACD,QAAMa,MAAM,GAAGf,OAAO,CAACgB,KAAR,CAAcX,MAAd,CAAf,CAbiD,CAcjD;;AACA,QAAIU,MAAM,CAACE,MAAP,GAAgB,CAApB,EACI,OAAOT,QAAP;AACJ,QAAMU,QAAQ,GAAGlB,OAAO,CAACmB,iBAAR,CAA0Bd,MAA1B,CAAjB;AACA,QAAMe,MAAM,GAAG,OAAOL,MAAM,CAAC,CAAD,CAAb,KAAqB,QAArB,GAAgC,CAAhC,GAAoC,CAAnD,CAlBiD,CAmBjD;;AACA,QAAMM,MAAM,GAAGd,eAAe,CAACe,CAAhB,CAAkBC,KAAlB,GAA0BjB,SAAS,CAACgB,CAAnD;AACA,QAAME,MAAM,GAAGjB,eAAe,CAACkB,CAAhB,CAAkBF,KAAlB,GAA0BjB,SAAS,CAACmB,CAAnD;AACAV,IAAAA,MAAM,CAAC,IAAIK,MAAL,CAAN,IAAsBC,MAAtB;AACAN,IAAAA,MAAM,CAAC,IAAIK,MAAL,CAAN,IAAsBI,MAAtB;AACA;AACR;AACA;AACA;AACA;AACA;;AACQ,QAAME,YAAY,GAAG3B,GAAG,CAACsB,MAAD,EAASG,MAAT,EAAiB,GAAjB,CAAxB,CA9BiD,CA+BjD;;AACA,QAAI,OAAOT,MAAM,CAAC,IAAIK,MAAL,CAAb,KAA8B,QAAlC,EACIL,MAAM,CAAC,IAAIK,MAAL,CAAN,IAAsBM,YAAtB,CAjC6C,CAkCjD;;AACA,QAAI,OAAOX,MAAM,CAAC,IAAIK,MAAL,CAAb,KAA8B,QAAlC,EACIL,MAAM,CAAC,IAAIK,MAAL,CAAN,IAAsBM,YAAtB;AACJ,QAAIC,MAAM,GAAGT,QAAQ,CAACH,MAAD,CAArB;;AACA,QAAIN,oBAAJ,EAA0B;AACtB,UAAImB,CAAC,GAAG,CAAR;AACAD,MAAAA,MAAM,GAAGA,MAAM,CAACf,OAAP,CAAeV,QAAf,EAAyB,YAAM;AACpC,YAAM2B,WAAW,GAAGlB,YAAY,CAACiB,CAAD,CAAhC;AACAA,QAAAA,CAAC;AACD,eAAOC,WAAP;AACH,OAJQ,CAAT;AAKH;;AACD,WAAOF,MAAP;AACH;AAhDoB,CAAzB;AAmDA,SAASxB,gBAAT","sourcesContent":["import { mix } from 'popmotion';\nimport { complex } from 'style-value-types';\nimport { cssVariableRegex } from '../../render/dom/utils/css-variables-conversion.mjs';\n\nconst varToken = \"_$css\";\nconst correctBoxShadow = {\n    correct: (latest, { treeScale, projectionDelta }) => {\n        const original = latest;\n        /**\n         * We need to first strip and store CSS variables from the string.\n         */\n        const containsCSSVariables = latest.includes(\"var(\");\n        const cssVariables = [];\n        if (containsCSSVariables) {\n            latest = latest.replace(cssVariableRegex, (match) => {\n                cssVariables.push(match);\n                return varToken;\n            });\n        }\n        const shadow = complex.parse(latest);\n        // TODO: Doesn't support multiple shadows\n        if (shadow.length > 5)\n            return original;\n        const template = complex.createTransformer(latest);\n        const offset = typeof shadow[0] !== \"number\" ? 1 : 0;\n        // Calculate the overall context scale\n        const xScale = projectionDelta.x.scale * treeScale.x;\n        const yScale = projectionDelta.y.scale * treeScale.y;\n        shadow[0 + offset] /= xScale;\n        shadow[1 + offset] /= yScale;\n        /**\n         * Ideally we'd correct x and y scales individually, but because blur and\n         * spread apply to both we have to take a scale average and apply that instead.\n         * We could potentially improve the outcome of this by incorporating the ratio between\n         * the two scales.\n         */\n        const averageScale = mix(xScale, yScale, 0.5);\n        // Blur\n        if (typeof shadow[2 + offset] === \"number\")\n            shadow[2 + offset] /= averageScale;\n        // Spread\n        if (typeof shadow[3 + offset] === \"number\")\n            shadow[3 + offset] /= averageScale;\n        let output = template(shadow);\n        if (containsCSSVariables) {\n            let i = 0;\n            output = output.replace(varToken, () => {\n                const cssVariable = cssVariables[i];\n                i++;\n                return cssVariable;\n            });\n        }\n        return output;\n    },\n};\n\nexport { correctBoxShadow };\n"]},"metadata":{},"sourceType":"module"}