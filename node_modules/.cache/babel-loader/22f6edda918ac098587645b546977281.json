{"ast":null,"code":"import _defineProperty from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"transition\", \"transitionEnd\"];\nimport { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { animateVisualElement } from './animation.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { AnimationType } from './types.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\nvar variantPriorityOrder = [AnimationType.Animate, AnimationType.InView, AnimationType.Focus, AnimationType.Hover, AnimationType.Tap, AnimationType.Drag, AnimationType.Exit];\nvar reversePriorityOrder = [].concat(variantPriorityOrder).reverse();\nvar numAnimationTypes = variantPriorityOrder.length;\n\nfunction animateList(visualElement) {\n  return function (animations) {\n    return Promise.all(animations.map(function (_ref) {\n      var animation = _ref.animation,\n          options = _ref.options;\n      return animateVisualElement(visualElement, animation, options);\n    }));\n  };\n}\n\nfunction createAnimationState(visualElement) {\n  var animate = animateList(visualElement);\n  var state = createState();\n  var isInitialRender = true;\n  /**\n   * This function will be used to reduce the animation definitions for\n   * each active animation type into an object of resolved values for it.\n   */\n\n  var buildResolvedTypeValues = function buildResolvedTypeValues(acc, definition) {\n    var resolved = resolveVariant(visualElement, definition);\n\n    if (resolved) {\n      var transition = resolved.transition,\n          transitionEnd = resolved.transitionEnd,\n          target = _objectWithoutProperties(resolved, _excluded);\n\n      acc = _objectSpread(_objectSpread(_objectSpread({}, acc), target), transitionEnd);\n    }\n\n    return acc;\n  };\n  /**\n   * This just allows us to inject mocked animation functions\n   * @internal\n   */\n\n\n  function setAnimateFunction(makeAnimator) {\n    animate = makeAnimator(visualElement);\n  }\n  /**\n   * When we receive new props, we need to:\n   * 1. Create a list of protected keys for each type. This is a directory of\n   *    value keys that are currently being \"handled\" by types of a higher priority\n   *    so that whenever an animation is played of a given type, these values are\n   *    protected from being animated.\n   * 2. Determine if an animation type needs animating.\n   * 3. Determine if any values have been removed from a type and figure out\n   *    what to animate those to.\n   */\n\n\n  function animateChanges(options, changedActiveType) {\n    var _a;\n\n    var props = visualElement.getProps();\n    var context = visualElement.getVariantContext(true) || {};\n    /**\n     * A list of animations that we'll build into as we iterate through the animation\n     * types. This will get executed at the end of the function.\n     */\n\n    var animations = [];\n    /**\n     * Keep track of which values have been removed. Then, as we hit lower priority\n     * animation types, we can check if they contain removed values and animate to that.\n     */\n\n    var removedKeys = new Set();\n    /**\n     * A dictionary of all encountered keys. This is an object to let us build into and\n     * copy it without iteration. Each time we hit an animation type we set its protected\n     * keys - the keys its not allowed to animate - to the latest version of this object.\n     */\n\n    var encounteredKeys = {};\n    /**\n     * If a variant has been removed at a given index, and this component is controlling\n     * variant animations, we want to ensure lower-priority variants are forced to animate.\n     */\n\n    var removedVariantIndex = Infinity;\n    /**\n     * Iterate through all animation types in reverse priority order. For each, we want to\n     * detect which values it's handling and whether or not they've changed (and therefore\n     * need to be animated). If any values have been removed, we want to detect those in\n     * lower priority props and flag for animation.\n     */\n\n    var _loop = function _loop(i) {\n      var type = reversePriorityOrder[i];\n      var typeState = state[type];\n      var prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];\n      var propIsVariant = isVariantLabel(prop);\n      /**\n       * If this type has *just* changed isActive status, set activeDelta\n       * to that status. Otherwise set to null.\n       */\n\n      var activeDelta = type === changedActiveType ? typeState.isActive : null;\n      if (activeDelta === false) removedVariantIndex = i;\n      /**\n       * If this prop is an inherited variant, rather than been set directly on the\n       * component itself, we want to make sure we allow the parent to trigger animations.\n       *\n       * TODO: Can probably change this to a !isControllingVariants check\n       */\n\n      var isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n      /**\n       *\n       */\n\n      if (isInherited && isInitialRender && visualElement.manuallyAnimateOnMount) {\n        isInherited = false;\n      }\n      /**\n       * Set all encountered keys so far as the protected keys for this type. This will\n       * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n       */\n\n\n      typeState.protectedKeys = _objectSpread({}, encounteredKeys); // Check if we can skip analysing this prop early\n\n      if ( // If it isn't active and hasn't *just* been set as inactive\n      !typeState.isActive && activeDelta === null || // If we didn't and don't have any defined prop for this animation type\n      !prop && !typeState.prevProp || // Or if the prop doesn't define an animation\n      isAnimationControls(prop) || typeof prop === \"boolean\") {\n        return \"continue\";\n      }\n      /**\n       * As we go look through the values defined on this type, if we detect\n       * a changed value or a value that was removed in a higher priority, we set\n       * this to true and add this prop to the animation list.\n       */\n\n\n      var variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n      var shouldAnimateType = variantDidChange || // If we're making this variant active, we want to always make it active\n      type === changedActiveType && typeState.isActive && !isInherited && propIsVariant || // If we removed a higher-priority variant (i is in reverse order)\n      i > removedVariantIndex && propIsVariant;\n      /**\n       * As animations can be set as variant lists, variants or target objects, we\n       * coerce everything to an array if it isn't one already\n       */\n\n      var definitionList = Array.isArray(prop) ? prop : [prop];\n      /**\n       * Build an object of all the resolved values. We'll use this in the subsequent\n       * animateChanges calls to determine whether a value has changed.\n       */\n\n      var resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n      if (activeDelta === false) resolvedValues = {};\n      /**\n       * Now we need to loop through all the keys in the prev prop and this prop,\n       * and decide:\n       * 1. If the value has changed, and needs animating\n       * 2. If it has been removed, and needs adding to the removedKeys set\n       * 3. If it has been removed in a higher priority type and needs animating\n       * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n       *    needs adding to the type's protectedKeys list.\n       */\n\n      var _typeState$prevResolv = typeState.prevResolvedValues,\n          prevResolvedValues = _typeState$prevResolv === void 0 ? {} : _typeState$prevResolv;\n\n      var allKeys = _objectSpread(_objectSpread({}, prevResolvedValues), resolvedValues);\n\n      var markToAnimate = function markToAnimate(key) {\n        shouldAnimateType = true;\n        removedKeys.delete(key);\n        typeState.needsAnimating[key] = true;\n      };\n\n      for (var key in allKeys) {\n        var next = resolvedValues[key];\n        var prev = prevResolvedValues[key]; // If we've already handled this we can just skip ahead\n\n        if (encounteredKeys.hasOwnProperty(key)) continue;\n        /**\n         * If the value has changed, we probably want to animate it.\n         */\n\n        if (next !== prev) {\n          /**\n           * If both values are keyframes, we need to shallow compare them to\n           * detect whether any value has changed. If it has, we animate it.\n           */\n          if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n            if (!shallowCompare(next, prev) || variantDidChange) {\n              markToAnimate(key);\n            } else {\n              /**\n               * If it hasn't changed, we want to ensure it doesn't animate by\n               * adding it to the list of protected keys.\n               */\n              typeState.protectedKeys[key] = true;\n            }\n          } else if (next !== undefined) {\n            // If next is defined and doesn't equal prev, it needs animating\n            markToAnimate(key);\n          } else {\n            // If it's undefined, it's been removed.\n            removedKeys.add(key);\n          }\n        } else if (next !== undefined && removedKeys.has(key)) {\n          /**\n           * If next hasn't changed and it isn't undefined, we want to check if it's\n           * been removed by a higher priority\n           */\n          markToAnimate(key);\n        } else {\n          /**\n           * If it hasn't changed, we add it to the list of protected values\n           * to ensure it doesn't get animated.\n           */\n          typeState.protectedKeys[key] = true;\n        }\n      }\n      /**\n       * Update the typeState so next time animateChanges is called we can compare the\n       * latest prop and resolvedValues to these.\n       */\n\n\n      typeState.prevProp = prop;\n      typeState.prevResolvedValues = resolvedValues;\n      /**\n       *\n       */\n\n      if (typeState.isActive) {\n        encounteredKeys = _objectSpread(_objectSpread({}, encounteredKeys), resolvedValues);\n      }\n\n      if (isInitialRender && visualElement.blockInitialAnimation) {\n        shouldAnimateType = false;\n      }\n      /**\n       * If this is an inherited prop we want to hard-block animations\n       * TODO: Test as this should probably still handle animations triggered\n       * by removed values?\n       */\n\n\n      if (shouldAnimateType && !isInherited) {\n        animations.push.apply(animations, _toConsumableArray(definitionList.map(function (animation) {\n          return {\n            animation: animation,\n            options: _objectSpread({\n              type: type\n            }, options)\n          };\n        })));\n      }\n    };\n\n    for (var i = 0; i < numAnimationTypes; i++) {\n      var _ret = _loop(i);\n\n      if (_ret === \"continue\") continue;\n    }\n    /**\n     * If there are some removed value that haven't been dealt with,\n     * we need to create a new animation that falls back either to the value\n     * defined in the style prop, or the last read value.\n     */\n\n\n    if (removedKeys.size) {\n      var fallbackAnimation = {};\n      removedKeys.forEach(function (key) {\n        var fallbackTarget = visualElement.getBaseTarget(key);\n\n        if (fallbackTarget !== undefined) {\n          fallbackAnimation[key] = fallbackTarget;\n        }\n      });\n      animations.push({\n        animation: fallbackAnimation\n      });\n    }\n\n    var shouldAnimate = Boolean(animations.length);\n\n    if (isInitialRender && props.initial === false && !visualElement.manuallyAnimateOnMount) {\n      shouldAnimate = false;\n    }\n\n    isInitialRender = false;\n    return shouldAnimate ? animate(animations) : Promise.resolve();\n  }\n  /**\n   * Change whether a certain animation type is active.\n   */\n\n\n  function setActive(type, isActive, options) {\n    var _a; // If the active state hasn't changed, we can safely do nothing here\n\n\n    if (state[type].isActive === isActive) return Promise.resolve(); // Propagate active change to children\n\n    (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n      var _a;\n\n      return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive);\n    });\n    state[type].isActive = isActive;\n    var animations = animateChanges(options, type);\n\n    for (var key in state) {\n      state[key].protectedKeys = {};\n    }\n\n    return animations;\n  }\n\n  return {\n    animateChanges: animateChanges,\n    setActive: setActive,\n    setAnimateFunction: setAnimateFunction,\n    getState: function getState() {\n      return state;\n    }\n  };\n}\n\nfunction checkVariantsDidChange(prev, next) {\n  if (typeof next === \"string\") {\n    return next !== prev;\n  } else if (Array.isArray(next)) {\n    return !shallowCompare(next, prev);\n  }\n\n  return false;\n}\n\nfunction createTypeState() {\n  var isActive = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n  return {\n    isActive: isActive,\n    protectedKeys: {},\n    needsAnimating: {},\n    prevResolvedValues: {}\n  };\n}\n\nfunction createState() {\n  var _ref2;\n\n  return _ref2 = {}, _defineProperty(_ref2, AnimationType.Animate, createTypeState(true)), _defineProperty(_ref2, AnimationType.InView, createTypeState()), _defineProperty(_ref2, AnimationType.Hover, createTypeState()), _defineProperty(_ref2, AnimationType.Tap, createTypeState()), _defineProperty(_ref2, AnimationType.Drag, createTypeState()), _defineProperty(_ref2, AnimationType.Focus, createTypeState()), _defineProperty(_ref2, AnimationType.Exit, createTypeState()), _ref2;\n}\n\nexport { checkVariantsDidChange, createAnimationState, variantPriorityOrder };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/render/utils/animation-state.mjs"],"names":["isAnimationControls","isKeyframesTarget","shallowCompare","animateVisualElement","isVariantLabel","AnimationType","resolveVariant","variantPriorityOrder","Animate","InView","Focus","Hover","Tap","Drag","Exit","reversePriorityOrder","reverse","numAnimationTypes","length","animateList","visualElement","animations","Promise","all","map","animation","options","createAnimationState","animate","state","createState","isInitialRender","buildResolvedTypeValues","acc","definition","resolved","transition","transitionEnd","target","setAnimateFunction","makeAnimator","animateChanges","changedActiveType","_a","props","getProps","context","getVariantContext","removedKeys","Set","encounteredKeys","removedVariantIndex","Infinity","i","type","typeState","prop","propIsVariant","activeDelta","isActive","isInherited","manuallyAnimateOnMount","protectedKeys","prevProp","variantDidChange","checkVariantsDidChange","shouldAnimateType","definitionList","Array","isArray","resolvedValues","reduce","prevResolvedValues","allKeys","markToAnimate","key","delete","needsAnimating","next","prev","hasOwnProperty","undefined","add","has","blockInitialAnimation","push","size","fallbackAnimation","forEach","fallbackTarget","getBaseTarget","shouldAnimate","Boolean","initial","resolve","setActive","variantChildren","child","animationState","getState","createTypeState"],"mappings":"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","sourcesContent":["import { isAnimationControls } from '../../animation/utils/is-animation-controls.mjs';\nimport { isKeyframesTarget } from '../../animation/utils/is-keyframes-target.mjs';\nimport { shallowCompare } from '../../utils/shallow-compare.mjs';\nimport { animateVisualElement } from './animation.mjs';\nimport { isVariantLabel } from './is-variant-label.mjs';\nimport { AnimationType } from './types.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\nconst variantPriorityOrder = [\n    AnimationType.Animate,\n    AnimationType.InView,\n    AnimationType.Focus,\n    AnimationType.Hover,\n    AnimationType.Tap,\n    AnimationType.Drag,\n    AnimationType.Exit,\n];\nconst reversePriorityOrder = [...variantPriorityOrder].reverse();\nconst numAnimationTypes = variantPriorityOrder.length;\nfunction animateList(visualElement) {\n    return (animations) => Promise.all(animations.map(({ animation, options }) => animateVisualElement(visualElement, animation, options)));\n}\nfunction createAnimationState(visualElement) {\n    let animate = animateList(visualElement);\n    const state = createState();\n    let isInitialRender = true;\n    /**\n     * This function will be used to reduce the animation definitions for\n     * each active animation type into an object of resolved values for it.\n     */\n    const buildResolvedTypeValues = (acc, definition) => {\n        const resolved = resolveVariant(visualElement, definition);\n        if (resolved) {\n            const { transition, transitionEnd, ...target } = resolved;\n            acc = { ...acc, ...target, ...transitionEnd };\n        }\n        return acc;\n    };\n    /**\n     * This just allows us to inject mocked animation functions\n     * @internal\n     */\n    function setAnimateFunction(makeAnimator) {\n        animate = makeAnimator(visualElement);\n    }\n    /**\n     * When we receive new props, we need to:\n     * 1. Create a list of protected keys for each type. This is a directory of\n     *    value keys that are currently being \"handled\" by types of a higher priority\n     *    so that whenever an animation is played of a given type, these values are\n     *    protected from being animated.\n     * 2. Determine if an animation type needs animating.\n     * 3. Determine if any values have been removed from a type and figure out\n     *    what to animate those to.\n     */\n    function animateChanges(options, changedActiveType) {\n        var _a;\n        const props = visualElement.getProps();\n        const context = visualElement.getVariantContext(true) || {};\n        /**\n         * A list of animations that we'll build into as we iterate through the animation\n         * types. This will get executed at the end of the function.\n         */\n        const animations = [];\n        /**\n         * Keep track of which values have been removed. Then, as we hit lower priority\n         * animation types, we can check if they contain removed values and animate to that.\n         */\n        const removedKeys = new Set();\n        /**\n         * A dictionary of all encountered keys. This is an object to let us build into and\n         * copy it without iteration. Each time we hit an animation type we set its protected\n         * keys - the keys its not allowed to animate - to the latest version of this object.\n         */\n        let encounteredKeys = {};\n        /**\n         * If a variant has been removed at a given index, and this component is controlling\n         * variant animations, we want to ensure lower-priority variants are forced to animate.\n         */\n        let removedVariantIndex = Infinity;\n        /**\n         * Iterate through all animation types in reverse priority order. For each, we want to\n         * detect which values it's handling and whether or not they've changed (and therefore\n         * need to be animated). If any values have been removed, we want to detect those in\n         * lower priority props and flag for animation.\n         */\n        for (let i = 0; i < numAnimationTypes; i++) {\n            const type = reversePriorityOrder[i];\n            const typeState = state[type];\n            const prop = (_a = props[type]) !== null && _a !== void 0 ? _a : context[type];\n            const propIsVariant = isVariantLabel(prop);\n            /**\n             * If this type has *just* changed isActive status, set activeDelta\n             * to that status. Otherwise set to null.\n             */\n            const activeDelta = type === changedActiveType ? typeState.isActive : null;\n            if (activeDelta === false)\n                removedVariantIndex = i;\n            /**\n             * If this prop is an inherited variant, rather than been set directly on the\n             * component itself, we want to make sure we allow the parent to trigger animations.\n             *\n             * TODO: Can probably change this to a !isControllingVariants check\n             */\n            let isInherited = prop === context[type] && prop !== props[type] && propIsVariant;\n            /**\n             *\n             */\n            if (isInherited &&\n                isInitialRender &&\n                visualElement.manuallyAnimateOnMount) {\n                isInherited = false;\n            }\n            /**\n             * Set all encountered keys so far as the protected keys for this type. This will\n             * be any key that has been animated or otherwise handled by active, higher-priortiy types.\n             */\n            typeState.protectedKeys = { ...encounteredKeys };\n            // Check if we can skip analysing this prop early\n            if (\n            // If it isn't active and hasn't *just* been set as inactive\n            (!typeState.isActive && activeDelta === null) ||\n                // If we didn't and don't have any defined prop for this animation type\n                (!prop && !typeState.prevProp) ||\n                // Or if the prop doesn't define an animation\n                isAnimationControls(prop) ||\n                typeof prop === \"boolean\") {\n                continue;\n            }\n            /**\n             * As we go look through the values defined on this type, if we detect\n             * a changed value or a value that was removed in a higher priority, we set\n             * this to true and add this prop to the animation list.\n             */\n            const variantDidChange = checkVariantsDidChange(typeState.prevProp, prop);\n            let shouldAnimateType = variantDidChange ||\n                // If we're making this variant active, we want to always make it active\n                (type === changedActiveType &&\n                    typeState.isActive &&\n                    !isInherited &&\n                    propIsVariant) ||\n                // If we removed a higher-priority variant (i is in reverse order)\n                (i > removedVariantIndex && propIsVariant);\n            /**\n             * As animations can be set as variant lists, variants or target objects, we\n             * coerce everything to an array if it isn't one already\n             */\n            const definitionList = Array.isArray(prop) ? prop : [prop];\n            /**\n             * Build an object of all the resolved values. We'll use this in the subsequent\n             * animateChanges calls to determine whether a value has changed.\n             */\n            let resolvedValues = definitionList.reduce(buildResolvedTypeValues, {});\n            if (activeDelta === false)\n                resolvedValues = {};\n            /**\n             * Now we need to loop through all the keys in the prev prop and this prop,\n             * and decide:\n             * 1. If the value has changed, and needs animating\n             * 2. If it has been removed, and needs adding to the removedKeys set\n             * 3. If it has been removed in a higher priority type and needs animating\n             * 4. If it hasn't been removed in a higher priority but hasn't changed, and\n             *    needs adding to the type's protectedKeys list.\n             */\n            const { prevResolvedValues = {} } = typeState;\n            const allKeys = {\n                ...prevResolvedValues,\n                ...resolvedValues,\n            };\n            const markToAnimate = (key) => {\n                shouldAnimateType = true;\n                removedKeys.delete(key);\n                typeState.needsAnimating[key] = true;\n            };\n            for (const key in allKeys) {\n                const next = resolvedValues[key];\n                const prev = prevResolvedValues[key];\n                // If we've already handled this we can just skip ahead\n                if (encounteredKeys.hasOwnProperty(key))\n                    continue;\n                /**\n                 * If the value has changed, we probably want to animate it.\n                 */\n                if (next !== prev) {\n                    /**\n                     * If both values are keyframes, we need to shallow compare them to\n                     * detect whether any value has changed. If it has, we animate it.\n                     */\n                    if (isKeyframesTarget(next) && isKeyframesTarget(prev)) {\n                        if (!shallowCompare(next, prev) || variantDidChange) {\n                            markToAnimate(key);\n                        }\n                        else {\n                            /**\n                             * If it hasn't changed, we want to ensure it doesn't animate by\n                             * adding it to the list of protected keys.\n                             */\n                            typeState.protectedKeys[key] = true;\n                        }\n                    }\n                    else if (next !== undefined) {\n                        // If next is defined and doesn't equal prev, it needs animating\n                        markToAnimate(key);\n                    }\n                    else {\n                        // If it's undefined, it's been removed.\n                        removedKeys.add(key);\n                    }\n                }\n                else if (next !== undefined && removedKeys.has(key)) {\n                    /**\n                     * If next hasn't changed and it isn't undefined, we want to check if it's\n                     * been removed by a higher priority\n                     */\n                    markToAnimate(key);\n                }\n                else {\n                    /**\n                     * If it hasn't changed, we add it to the list of protected values\n                     * to ensure it doesn't get animated.\n                     */\n                    typeState.protectedKeys[key] = true;\n                }\n            }\n            /**\n             * Update the typeState so next time animateChanges is called we can compare the\n             * latest prop and resolvedValues to these.\n             */\n            typeState.prevProp = prop;\n            typeState.prevResolvedValues = resolvedValues;\n            /**\n             *\n             */\n            if (typeState.isActive) {\n                encounteredKeys = { ...encounteredKeys, ...resolvedValues };\n            }\n            if (isInitialRender && visualElement.blockInitialAnimation) {\n                shouldAnimateType = false;\n            }\n            /**\n             * If this is an inherited prop we want to hard-block animations\n             * TODO: Test as this should probably still handle animations triggered\n             * by removed values?\n             */\n            if (shouldAnimateType && !isInherited) {\n                animations.push(...definitionList.map((animation) => ({\n                    animation: animation,\n                    options: { type, ...options },\n                })));\n            }\n        }\n        /**\n         * If there are some removed value that haven't been dealt with,\n         * we need to create a new animation that falls back either to the value\n         * defined in the style prop, or the last read value.\n         */\n        if (removedKeys.size) {\n            const fallbackAnimation = {};\n            removedKeys.forEach((key) => {\n                const fallbackTarget = visualElement.getBaseTarget(key);\n                if (fallbackTarget !== undefined) {\n                    fallbackAnimation[key] = fallbackTarget;\n                }\n            });\n            animations.push({ animation: fallbackAnimation });\n        }\n        let shouldAnimate = Boolean(animations.length);\n        if (isInitialRender &&\n            props.initial === false &&\n            !visualElement.manuallyAnimateOnMount) {\n            shouldAnimate = false;\n        }\n        isInitialRender = false;\n        return shouldAnimate ? animate(animations) : Promise.resolve();\n    }\n    /**\n     * Change whether a certain animation type is active.\n     */\n    function setActive(type, isActive, options) {\n        var _a;\n        // If the active state hasn't changed, we can safely do nothing here\n        if (state[type].isActive === isActive)\n            return Promise.resolve();\n        // Propagate active change to children\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => { var _a; return (_a = child.animationState) === null || _a === void 0 ? void 0 : _a.setActive(type, isActive); });\n        state[type].isActive = isActive;\n        const animations = animateChanges(options, type);\n        for (const key in state) {\n            state[key].protectedKeys = {};\n        }\n        return animations;\n    }\n    return {\n        animateChanges,\n        setActive,\n        setAnimateFunction,\n        getState: () => state,\n    };\n}\nfunction checkVariantsDidChange(prev, next) {\n    if (typeof next === \"string\") {\n        return next !== prev;\n    }\n    else if (Array.isArray(next)) {\n        return !shallowCompare(next, prev);\n    }\n    return false;\n}\nfunction createTypeState(isActive = false) {\n    return {\n        isActive,\n        protectedKeys: {},\n        needsAnimating: {},\n        prevResolvedValues: {},\n    };\n}\nfunction createState() {\n    return {\n        [AnimationType.Animate]: createTypeState(true),\n        [AnimationType.InView]: createTypeState(),\n        [AnimationType.Hover]: createTypeState(),\n        [AnimationType.Tap]: createTypeState(),\n        [AnimationType.Drag]: createTypeState(),\n        [AnimationType.Focus]: createTypeState(),\n        [AnimationType.Exit]: createTypeState(),\n    };\n}\n\nexport { checkVariantsDidChange, createAnimationState, variantPriorityOrder };\n"]},"metadata":{},"sourceType":"module"}