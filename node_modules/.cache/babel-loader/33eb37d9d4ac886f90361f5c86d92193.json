{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\n\nvar OperatorSubscriber = function (_super) {\n  __extends(OperatorSubscriber, _super);\n\n  function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.onFinalize = onFinalize;\n    _this.shouldUnsubscribe = shouldUnsubscribe;\n    _this._next = onNext ? function (value) {\n      try {\n        onNext(value);\n      } catch (err) {\n        destination.error(err);\n      }\n    } : _super.prototype._next;\n    _this._error = onError ? function (err) {\n      try {\n        onError(err);\n      } catch (err) {\n        destination.error(err);\n      } finally {\n        this.unsubscribe();\n      }\n    } : _super.prototype._error;\n    _this._complete = onComplete ? function () {\n      try {\n        onComplete();\n      } catch (err) {\n        destination.error(err);\n      } finally {\n        this.unsubscribe();\n      }\n    } : _super.prototype._complete;\n    return _this;\n  }\n\n  OperatorSubscriber.prototype.unsubscribe = function () {\n    var _a;\n\n    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n      var closed_1 = this.closed;\n\n      _super.prototype.unsubscribe.call(this);\n\n      !closed_1 && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n    }\n  };\n\n  return OperatorSubscriber;\n}(Subscriber);\n\nexport { OperatorSubscriber };","map":{"version":3,"mappings":";AAAA,SAASA,UAAT,QAA2B,eAA3B;AAcA,OAAM,SAAUC,wBAAV,CACJC,WADI,EAEJC,MAFI,EAGJC,UAHI,EAIJC,OAJI,EAKJC,UALI,EAKmB;AAEvB,SAAO,IAAIC,kBAAJ,CAAuBL,WAAvB,EAAoCC,MAApC,EAA4CC,UAA5C,EAAwDC,OAAxD,EAAiEC,UAAjE,CAAP;AACD;;AAMD;AAA2CE;;AAiBzC,8BACEN,WADF,EAEEC,MAFF,EAGEC,UAHF,EAIEC,OAJF,EAKUC,UALV,EAMUG,iBANV,EAM2C;AAN3C,gBAoBEC,kBAAMR,WAAN,KAAkB,IApBpB;;AAKUS;AACAA;AAeRA,SAAI,CAACC,KAAL,GAAaT,MAAM,GACf,UAAuCU,KAAvC,EAA+C;AAC7C,UAAI;AACFV,cAAM,CAACU,KAAD,CAAN;AACD,OAFD,CAEE,OAAOC,GAAP,EAAY;AACZZ,mBAAW,CAACa,KAAZ,CAAkBD,GAAlB;AACD;AACF,KAPc,GAQfJ,iBAAME,KARV;AASAD,SAAI,CAACK,MAAL,GAAcX,OAAO,GACjB,UAAuCS,GAAvC,EAA+C;AAC7C,UAAI;AACFT,eAAO,CAACS,GAAD,CAAP;AACD,OAFD,CAEE,OAAOA,GAAP,EAAY;AAEZZ,mBAAW,CAACa,KAAZ,CAAkBD,GAAlB;AACD,OALD,SAKU;AAER,aAAKG,WAAL;AACD;AACF,KAXgB,GAYjBP,iBAAMM,MAZV;AAaAL,SAAI,CAACO,SAAL,GAAiBd,UAAU,GACvB;AACE,UAAI;AACFA,kBAAU;AACX,OAFD,CAEE,OAAOU,GAAP,EAAY;AAEZZ,mBAAW,CAACa,KAAZ,CAAkBD,GAAlB;AACD,OALD,SAKU;AAER,aAAKG,WAAL;AACD;AACF,KAXsB,GAYvBP,iBAAMQ,SAZV;;AAaD;;AAEDX;;;AACE,QAAI,CAAC,KAAKE,iBAAN,IAA2B,KAAKA,iBAAL,EAA/B,EAAyD;AAC/C,kBAAM,GAAK,KAAIU,MAAf;;AACRT,uBAAMO,WAAN,CAAiBG,IAAjB,CAAiB,IAAjB;;AAEA,OAACC,QAAD,KAAW,WAAKf,UAAL,MAAe,IAAf,IAAegB,aAAf,GAAe,MAAf,GAAeA,QAAf,IAAe,CAA1B;AACD;AACF,GAPD;;AAQF;AAnFA,EAA2CtB,UAA3C","names":["Subscriber","createOperatorSubscriber","destination","onNext","onComplete","onError","onFinalize","OperatorSubscriber","__extends","shouldUnsubscribe","_super","_this","_next","value","err","error","_error","unsubscribe","_complete","closed","call","closed_1","_a"],"sources":["D:\\Web Data\\Personal-Website\\client\\node_modules\\rxjs\\src\\internal\\operators\\OperatorSubscriber.ts"],"sourcesContent":["import { Subscriber } from '../Subscriber';\n\n/**\n * Creates an instance of an `OperatorSubscriber`.\n * @param destination The downstream subscriber.\n * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n * and send to the `destination` error handler.\n * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n * this handler are sent to the `destination` error handler.\n * @param onFinalize Additional teardown logic here. This will only be called on teardown if the\n * subscriber itself is not already closed. This is called after all other teardown logic is executed.\n */\nexport function createOperatorSubscriber<T>(\n  destination: Subscriber<any>,\n  onNext?: (value: T) => void,\n  onComplete?: () => void,\n  onError?: (err: any) => void,\n  onFinalize?: () => void\n): Subscriber<T> {\n  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);\n}\n\n/**\n * A generic helper for allowing operators to be created with a Subscriber and\n * use closures to capture necessary state from the operator function itself.\n */\nexport class OperatorSubscriber<T> extends Subscriber<T> {\n  /**\n   * Creates an instance of an `OperatorSubscriber`.\n   * @param destination The downstream subscriber.\n   * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n   * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n   * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n   * and send to the `destination` error handler.\n   * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n   * this handler are sent to the `destination` error handler.\n   * @param onFinalize Additional finalization logic here. This will only be called on finalization if the\n   * subscriber itself is not already closed. This is called after all other finalization logic is executed.\n   * @param shouldUnsubscribe An optional check to see if an unsubscribe call should truly unsubscribe.\n   * NOTE: This currently **ONLY** exists to support the strange behavior of {@link groupBy}, where unsubscription\n   * to the resulting observable does not actually disconnect from the source if there are active subscriptions\n   * to any grouped observable. (DO NOT EXPOSE OR USE EXTERNALLY!!!)\n   */\n  constructor(\n    destination: Subscriber<any>,\n    onNext?: (value: T) => void,\n    onComplete?: () => void,\n    onError?: (err: any) => void,\n    private onFinalize?: () => void,\n    private shouldUnsubscribe?: () => boolean\n  ) {\n    // It's important - for performance reasons - that all of this class's\n    // members are initialized and that they are always initialized in the same\n    // order. This will ensure that all OperatorSubscriber instances have the\n    // same hidden class in V8. This, in turn, will help keep the number of\n    // hidden classes involved in property accesses within the base class as\n    // low as possible. If the number of hidden classes involved exceeds four,\n    // the property accesses will become megamorphic and performance penalties\n    // will be incurred - i.e. inline caches won't be used.\n    //\n    // The reasons for ensuring all instances have the same hidden class are\n    // further discussed in this blog post from Benedikt Meurer:\n    // https://benediktmeurer.de/2018/03/23/impact-of-polymorphism-on-component-based-frameworks-like-react/\n    super(destination);\n    this._next = onNext\n      ? function (this: OperatorSubscriber<T>, value: T) {\n          try {\n            onNext(value);\n          } catch (err) {\n            destination.error(err);\n          }\n        }\n      : super._next;\n    this._error = onError\n      ? function (this: OperatorSubscriber<T>, err: any) {\n          try {\n            onError(err);\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._error;\n    this._complete = onComplete\n      ? function (this: OperatorSubscriber<T>) {\n          try {\n            onComplete();\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure finalization.\n            this.unsubscribe();\n          }\n        }\n      : super._complete;\n  }\n\n  unsubscribe() {\n    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {\n      const { closed } = this;\n      super.unsubscribe();\n      // Execute additional teardown if we have any and we didn't already do so.\n      !closed && this.onFinalize?.();\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}