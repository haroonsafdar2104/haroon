{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\n\nvar ConnectableObservable = function (_super) {\n  __extends(ConnectableObservable, _super);\n\n  function ConnectableObservable(source, subjectFactory) {\n    var _this = _super.call(this) || this;\n\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._subject = null;\n    _this._refCount = 0;\n    _this._connection = null;\n\n    if (hasLift(source)) {\n      _this.lift = source.lift;\n    }\n\n    return _this;\n  }\n\n  ConnectableObservable.prototype._subscribe = function (subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  };\n\n  ConnectableObservable.prototype.getSubject = function () {\n    var subject = this._subject;\n\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n\n    return this._subject;\n  };\n\n  ConnectableObservable.prototype._teardown = function () {\n    this._refCount = 0;\n    var _connection = this._connection;\n    this._subject = this._connection = null;\n    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();\n  };\n\n  ConnectableObservable.prototype.connect = function () {\n    var _this = this;\n\n    var connection = this._connection;\n\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      var subject_1 = this.getSubject();\n      connection.add(this.source.subscribe(createOperatorSubscriber(subject_1, undefined, function () {\n        _this._teardown();\n\n        subject_1.complete();\n      }, function (err) {\n        _this._teardown();\n\n        subject_1.error(err);\n      }, function () {\n        return _this._teardown();\n      })));\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n\n    return connection;\n  };\n\n  ConnectableObservable.prototype.refCount = function () {\n    return higherOrderRefCount()(this);\n  };\n\n  return ConnectableObservable;\n}(Observable);\n\nexport { ConnectableObservable };","map":{"version":3,"mappings":";AACA,SAASA,UAAT,QAA2B,eAA3B;AAEA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,QAAQ,IAAIC,mBAArB,QAAgD,uBAAhD;AACA,SAASC,wBAAT,QAAyC,iCAAzC;AACA,SAASC,OAAT,QAAwB,cAAxB;;AASA;AAA8CC;;AAgB5C,iCAAmBC,MAAnB,EAAoDC,cAApD,EAAoF;AAApF,gBACEC,qBAAO,IADT;;AAAmBC;AAAiCA;AAf1CA,qBAA8B,IAA9B;AACAA,sBAAoB,CAApB;AACAA,wBAAmC,IAAnC;;AAkBR,QAAIL,OAAO,CAACE,MAAD,CAAX,EAAqB;AACnBG,WAAI,CAACC,IAAL,GAAYJ,MAAM,CAACI,IAAnB;AACD;;;AACF;;AAGSC,+CAAV,UAAqBC,UAArB,EAA8C;AAC5C,WAAO,KAAKC,UAAL,GAAkBC,SAAlB,CAA4BF,UAA5B,CAAP;AACD,GAFS;;AAIAD,+CAAV;AACE,QAAMI,OAAO,GAAG,KAAKC,QAArB;;AACA,QAAI,CAACD,OAAD,IAAYA,OAAO,CAACE,SAAxB,EAAmC;AACjC,WAAKD,QAAL,GAAgB,KAAKT,cAAL,EAAhB;AACD;;AACD,WAAO,KAAKS,QAAZ;AACD,GANS;;AAQAL,8CAAV;AACE,SAAKO,SAAL,GAAiB,CAAjB;AACQ,mBAAW,GAAK,KAAIC,WAApB;AACR,SAAKH,QAAL,GAAgB,KAAKG,WAAL,GAAmB,IAAnC;AACAA,eAAW,SAAX,eAAW,WAAX,GAAW,MAAX,cAAW,CAAEC,WAAb;AACD,GALS;;AAWVT;AAAA;;AACE,QAAIU,UAAU,GAAG,KAAKF,WAAtB;;AACA,QAAI,CAACE,UAAL,EAAiB;AACfA,gBAAU,GAAG,KAAKF,WAAL,GAAmB,IAAInB,YAAJ,EAAhC;AACA,UAAMsB,SAAO,GAAG,KAAKT,UAAL,EAAhB;AACAQ,gBAAU,CAACE,GAAX,CACE,KAAKjB,MAAL,CAAYQ,SAAZ,CACEX,wBAAwB,CACtBmB,SADsB,EAEtBE,SAFsB,EAGtB;AACEf,aAAI,CAACgB,SAAL;;AACAH,iBAAO,CAACI,QAAR;AACD,OANqB,EAOtB,UAACC,GAAD,EAAI;AACFlB,aAAI,CAACgB,SAAL;;AACAH,iBAAO,CAACM,KAAR,CAAcD,GAAd;AACD,OAVqB,EAWtB;AAAM,oBAAI,CAACF,SAAL;AAAgB,OAXA,CAD1B,CADF;;AAkBA,UAAIJ,UAAU,CAACQ,MAAf,EAAuB;AACrB,aAAKV,WAAL,GAAmB,IAAnB;AACAE,kBAAU,GAAGrB,YAAY,CAAC8B,KAA1B;AACD;AACF;;AACD,WAAOT,UAAP;AACD,GA7BD;;AAmCAV;AACE,WAAOT,mBAAmB,GAAG,IAAH,CAA1B;AACD,GAFD;;AAGF;AAxFA,EAA8CH,UAA9C","names":["Observable","Subscription","refCount","higherOrderRefCount","createOperatorSubscriber","hasLift","__extends","source","subjectFactory","_super","_this","lift","ConnectableObservable","subscriber","getSubject","subscribe","subject","_subject","isStopped","_refCount","_connection","unsubscribe","connection","subject_1","add","undefined","_teardown","complete","err","error","closed","EMPTY"],"sources":["C:\\Users\\Admin\\Downloads\\portpoliopro-main\\client\\node_modules\\rxjs\\src\\internal\\observable\\ConnectableObservable.ts"],"sourcesContent":["import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\n\n/**\n * @class ConnectableObservable<T>\n * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n * If you are using the `refCount` method of `ConnectableObservable`, use the {@link share} operator\n * instead.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n  protected _subject: Subject<T> | null = null;\n  protected _refCount: number = 0;\n  protected _connection: Subscription | null = null;\n\n  /**\n   * @param source The source observable\n   * @param subjectFactory The factory that creates the subject used internally.\n   * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n   * `new ConnectableObservable(source, factory)` is equivalent to\n   * `connectable(source, { connector: factory })`.\n   * When the `refCount()` method is needed, the {@link share} operator should be used instead:\n   * `new ConnectableObservable(source, factory).refCount()` is equivalent to\n   * `source.pipe(share({ connector: factory }))`.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  constructor(public source: Observable<T>, protected subjectFactory: () => Subject<T>) {\n    super();\n    // If we have lift, monkey patch that here. This is done so custom observable\n    // types will compose through multicast. Otherwise the resulting observable would\n    // simply be an instance of `ConnectableObservable`.\n    if (hasLift(source)) {\n      this.lift = source.lift;\n    }\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject!;\n  }\n\n  protected _teardown() {\n    this._refCount = 0;\n    const { _connection } = this;\n    this._subject = this._connection = null;\n    _connection?.unsubscribe();\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use {@link connectable} instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      const subject = this.getSubject();\n      connection.add(\n        this.source.subscribe(\n          createOperatorSubscriber(\n            subject as any,\n            undefined,\n            () => {\n              this._teardown();\n              subject.complete();\n            },\n            (err) => {\n              this._teardown();\n              subject.error(err);\n            },\n            () => this._teardown()\n          )\n        )\n      );\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use the {@link share} operator instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}