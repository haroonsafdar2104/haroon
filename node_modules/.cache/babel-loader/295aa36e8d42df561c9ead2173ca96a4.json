{"ast":null,"code":"import _classCallCheck from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { addUniqueItem, removeItem } from './array.mjs';\n\nvar SubscriptionManager = /*#__PURE__*/function () {\n  function SubscriptionManager() {\n    _classCallCheck(this, SubscriptionManager);\n\n    this.subscriptions = [];\n  }\n\n  _createClass(SubscriptionManager, [{\n    key: \"add\",\n    value: function add(handler) {\n      var _this = this;\n\n      addUniqueItem(this.subscriptions, handler);\n      return function () {\n        return removeItem(_this.subscriptions, handler);\n      };\n    }\n  }, {\n    key: \"notify\",\n    value: function notify(a, b, c) {\n      var numSubscriptions = this.subscriptions.length;\n      if (!numSubscriptions) return;\n\n      if (numSubscriptions === 1) {\n        /**\n         * If there's only a single handler we can just call it without invoking a loop.\n         */\n        this.subscriptions[0](a, b, c);\n      } else {\n        for (var i = 0; i < numSubscriptions; i++) {\n          /**\n           * Check whether the handler exists before firing as it's possible\n           * the subscriptions were modified during this loop running.\n           */\n          var handler = this.subscriptions[i];\n          handler && handler(a, b, c);\n        }\n      }\n    }\n  }, {\n    key: \"getSize\",\n    value: function getSize() {\n      return this.subscriptions.length;\n    }\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this.subscriptions.length = 0;\n    }\n  }]);\n\n  return SubscriptionManager;\n}();\n\nexport { SubscriptionManager };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/utils/subscription-manager.mjs"],"names":["addUniqueItem","removeItem","SubscriptionManager","subscriptions","handler","a","b","c","numSubscriptions","length","i"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,aAA1C;;IAEMC,mB;AACF,iCAAc;AAAA;;AACV,SAAKC,aAAL,GAAqB,EAArB;AACH;;;;WACD,aAAIC,OAAJ,EAAa;AAAA;;AACTJ,MAAAA,aAAa,CAAC,KAAKG,aAAN,EAAqBC,OAArB,CAAb;AACA,aAAO;AAAA,eAAMH,UAAU,CAAC,KAAI,CAACE,aAAN,EAAqBC,OAArB,CAAhB;AAAA,OAAP;AACH;;;WACD,gBAAOC,CAAP,EAAUC,CAAV,EAAaC,CAAb,EAAgB;AACZ,UAAMC,gBAAgB,GAAG,KAAKL,aAAL,CAAmBM,MAA5C;AACA,UAAI,CAACD,gBAAL,EACI;;AACJ,UAAIA,gBAAgB,KAAK,CAAzB,EAA4B;AACxB;AACZ;AACA;AACY,aAAKL,aAAL,CAAmB,CAAnB,EAAsBE,CAAtB,EAAyBC,CAAzB,EAA4BC,CAA5B;AACH,OALD,MAMK;AACD,aAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,gBAApB,EAAsCE,CAAC,EAAvC,EAA2C;AACvC;AAChB;AACA;AACA;AACgB,cAAMN,OAAO,GAAG,KAAKD,aAAL,CAAmBO,CAAnB,CAAhB;AACAN,UAAAA,OAAO,IAAIA,OAAO,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAlB;AACH;AACJ;AACJ;;;WACD,mBAAU;AACN,aAAO,KAAKJ,aAAL,CAAmBM,MAA1B;AACH;;;WACD,iBAAQ;AACJ,WAAKN,aAAL,CAAmBM,MAAnB,GAA4B,CAA5B;AACH;;;;;;AAGL,SAASP,mBAAT","sourcesContent":["import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nexport { SubscriptionManager };\n"]},"metadata":{},"sourceType":"module"}