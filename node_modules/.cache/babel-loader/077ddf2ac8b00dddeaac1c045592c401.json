{"ast":null,"code":"import _slicedToArray from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { wrap } from 'popmotion';\nimport { useRef, useState, useCallback } from 'react';\n/**\n * Cycles through a series of visual properties. Can be used to toggle between or cycle through animations. It works similar to `useState` in React. It is provided an initial array of possible states, and returns an array of two arguments.\n *\n * An index value can be passed to the returned `cycle` function to cycle to a specific index.\n *\n * ```jsx\n * import * as React from \"react\"\n * import { motion, useCycle } from \"framer-motion\"\n *\n * export const MyComponent = () => {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <motion.div\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @param items - items to cycle through\n * @returns [currentState, cycleState]\n *\n * @public\n */\n\nfunction useCycle() {\n  for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n    items[_key] = arguments[_key];\n  }\n\n  var index = useRef(0);\n\n  var _useState = useState(items[index.current]),\n      _useState2 = _slicedToArray(_useState, 2),\n      item = _useState2[0],\n      setItem = _useState2[1];\n\n  var runCycle = useCallback(function (next) {\n    index.current = typeof next !== \"number\" ? wrap(0, items.length, index.current + 1) : next;\n    setItem(items[index.current]);\n  }, // The array will change on each call, but by putting items.length at\n  // the front of this array, we guarantee the dependency comparison will match up\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [items.length].concat(items));\n  return [item, runCycle];\n}\n\nexport { useCycle };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/utils/use-cycle.mjs"],"names":["wrap","useRef","useState","useCallback","useCycle","items","index","current","item","setItem","runCycle","next","length"],"mappings":";AAAA,SAASA,IAAT,QAAqB,WAArB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,WAA3B,QAA8C,OAA9C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,GAA4B;AAAA,oCAAPC,KAAO;AAAPA,IAAAA,KAAO;AAAA;;AACxB,MAAMC,KAAK,GAAGL,MAAM,CAAC,CAAD,CAApB;;AACA,kBAAwBC,QAAQ,CAACG,KAAK,CAACC,KAAK,CAACC,OAAP,CAAN,CAAhC;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AACA,MAAMC,QAAQ,GAAGP,WAAW,CAAC,UAACQ,IAAD,EAAU;AACnCL,IAAAA,KAAK,CAACC,OAAN,GACI,OAAOI,IAAP,KAAgB,QAAhB,GACMX,IAAI,CAAC,CAAD,EAAIK,KAAK,CAACO,MAAV,EAAkBN,KAAK,CAACC,OAAN,GAAgB,CAAlC,CADV,GAEMI,IAHV;AAIAF,IAAAA,OAAO,CAACJ,KAAK,CAACC,KAAK,CAACC,OAAP,CAAN,CAAP;AACH,GAN2B,EAO5B;AACA;AACA;AAT4B,GAU3BF,KAAK,CAACO,MAVqB,SAUVP,KAVU,EAA5B;AAWA,SAAO,CAACG,IAAD,EAAOE,QAAP,CAAP;AACH;;AAED,SAASN,QAAT","sourcesContent":["import { wrap } from 'popmotion';\nimport { useRef, useState, useCallback } from 'react';\n\n/**\n * Cycles through a series of visual properties. Can be used to toggle between or cycle through animations. It works similar to `useState` in React. It is provided an initial array of possible states, and returns an array of two arguments.\n *\n * An index value can be passed to the returned `cycle` function to cycle to a specific index.\n *\n * ```jsx\n * import * as React from \"react\"\n * import { motion, useCycle } from \"framer-motion\"\n *\n * export const MyComponent = () => {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <motion.div\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @param items - items to cycle through\n * @returns [currentState, cycleState]\n *\n * @public\n */\nfunction useCycle(...items) {\n    const index = useRef(0);\n    const [item, setItem] = useState(items[index.current]);\n    const runCycle = useCallback((next) => {\n        index.current =\n            typeof next !== \"number\"\n                ? wrap(0, items.length, index.current + 1)\n                : next;\n        setItem(items[index.current]);\n    }, \n    // The array will change on each call, but by putting items.length at\n    // the front of this array, we guarantee the dependency comparison will match up\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [items.length, ...items]);\n    return [item, runCycle];\n}\n\nexport { useCycle };\n"]},"metadata":{},"sourceType":"module"}