{"ast":null,"code":"export default function slideToLoop(index, speed, runCallbacks, internal) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  if (typeof index === 'string') {\n    /**\n     * The `index` argument converted from `string` to `number`.\n     * @type {number}\n     */\n    const indexAsNumber = parseInt(index, 10);\n    /**\n     * Determines whether the `index` argument is a valid `number`\n     * after being converted from the `string` type.\n     * @type {boolean}\n     */\n\n    const isValidNumber = isFinite(indexAsNumber);\n\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n\n    index = indexAsNumber;\n  }\n\n  const swiper = this;\n  let newIndex = index;\n\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/swiper/core/slide/slideToLoop.js"],"names":["slideToLoop","index","speed","runCallbacks","internal","params","indexAsNumber","parseInt","isValidNumber","isFinite","Error","swiper","newIndex","loop","loopedSlides","slideTo"],"mappings":"AAAA,eAAe,SAASA,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,YAAnC,EAAiDC,QAAjD,EAA2D;AACxE,MAAIH,KAAK,KAAK,KAAK,CAAnB,EAAsB;AACpBA,IAAAA,KAAK,GAAG,CAAR;AACD;;AAED,MAAIC,KAAK,KAAK,KAAK,CAAnB,EAAsB;AACpBA,IAAAA,KAAK,GAAG,KAAKG,MAAL,CAAYH,KAApB;AACD;;AAED,MAAIC,YAAY,KAAK,KAAK,CAA1B,EAA6B;AAC3BA,IAAAA,YAAY,GAAG,IAAf;AACD;;AAED,MAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AAC7B;AACJ;AACA;AACA;AACI,UAAMK,aAAa,GAAGC,QAAQ,CAACN,KAAD,EAAQ,EAAR,CAA9B;AACA;AACJ;AACA;AACA;AACA;;AAEI,UAAMO,aAAa,GAAGC,QAAQ,CAACH,aAAD,CAA9B;;AAEA,QAAI,CAACE,aAAL,EAAoB;AAClB,YAAM,IAAIE,KAAJ,CAAW,sEAAqET,KAAM,UAAtF,CAAN;AACD,KAhB4B,CAgB3B;AACF;;;AAGAA,IAAAA,KAAK,GAAGK,aAAR;AACD;;AAED,QAAMK,MAAM,GAAG,IAAf;AACA,MAAIC,QAAQ,GAAGX,KAAf;;AAEA,MAAIU,MAAM,CAACN,MAAP,CAAcQ,IAAlB,EAAwB;AACtBD,IAAAA,QAAQ,IAAID,MAAM,CAACG,YAAnB;AACD;;AAED,SAAOH,MAAM,CAACI,OAAP,CAAeH,QAAf,EAAyBV,KAAzB,EAAgCC,YAAhC,EAA8CC,QAA9C,CAAP;AACD","sourcesContent":["export default function slideToLoop(index, speed, runCallbacks, internal) {\n  if (index === void 0) {\n    index = 0;\n  }\n\n  if (speed === void 0) {\n    speed = this.params.speed;\n  }\n\n  if (runCallbacks === void 0) {\n    runCallbacks = true;\n  }\n\n  if (typeof index === 'string') {\n    /**\n     * The `index` argument converted from `string` to `number`.\n     * @type {number}\n     */\n    const indexAsNumber = parseInt(index, 10);\n    /**\n     * Determines whether the `index` argument is a valid `number`\n     * after being converted from the `string` type.\n     * @type {boolean}\n     */\n\n    const isValidNumber = isFinite(indexAsNumber);\n\n    if (!isValidNumber) {\n      throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${index}] given.`);\n    } // Knowing that the converted `index` is a valid number,\n    // we can update the original argument's value.\n\n\n    index = indexAsNumber;\n  }\n\n  const swiper = this;\n  let newIndex = index;\n\n  if (swiper.params.loop) {\n    newIndex += swiper.loopedSlides;\n  }\n\n  return swiper.slideTo(newIndex, speed, runCallbacks, internal);\n}"]},"metadata":{},"sourceType":"module"}