{"ast":null,"code":"import { defaults, noop, time } from '@motionone/utils';\nimport { stopAnimation } from './stop-animation.es.js';\n\nvar createAnimation = function createAnimation(factory) {\n  return factory();\n};\n\nvar withControls = function withControls(animationFactory, options) {\n  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaults.duration;\n  return new Proxy({\n    animations: animationFactory.map(createAnimation).filter(Boolean),\n    duration: duration,\n    options: options\n  }, controls);\n};\n/**\n * TODO:\n * Currently this returns the first animation, ideally it would return\n * the first active animation.\n */\n\n\nvar getActiveAnimation = function getActiveAnimation(state) {\n  return state.animations[0];\n};\n\nvar controls = {\n  get: function get(target, key) {\n    var activeAnimation = getActiveAnimation(target);\n\n    switch (key) {\n      case \"duration\":\n        return target.duration;\n\n      case \"currentTime\":\n        return time.s((activeAnimation === null || activeAnimation === void 0 ? void 0 : activeAnimation[key]) || 0);\n\n      case \"playbackRate\":\n      case \"playState\":\n        return activeAnimation === null || activeAnimation === void 0 ? void 0 : activeAnimation[key];\n\n      case \"finished\":\n        if (!target.finished) {\n          target.finished = Promise.all(target.animations.map(selectFinished)).catch(noop);\n        }\n\n        return target.finished;\n\n      case \"stop\":\n        return function () {\n          target.animations.forEach(function (animation) {\n            return stopAnimation(animation);\n          });\n        };\n\n      case \"forEachNative\":\n        /**\n         * This is for internal use only, fire a callback for each\n         * underlying animation.\n         */\n        return function (callback) {\n          target.animations.forEach(function (animation) {\n            return callback(animation, target);\n          });\n        };\n\n      default:\n        return typeof (activeAnimation === null || activeAnimation === void 0 ? void 0 : activeAnimation[key]) === \"undefined\" ? undefined : function () {\n          return target.animations.forEach(function (animation) {\n            return animation[key]();\n          });\n        };\n    }\n  },\n  set: function set(target, key, value) {\n    switch (key) {\n      case \"currentTime\":\n        value = time.ms(value);\n\n      case \"currentTime\":\n      case \"playbackRate\":\n        for (var i = 0; i < target.animations.length; i++) {\n          target.animations[i][key] = value;\n        }\n\n        return true;\n    }\n\n    return false;\n  }\n};\n\nvar selectFinished = function selectFinished(animation) {\n  return animation.finished;\n};\n\nexport { controls, withControls };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/@motionone/dom/dist/animate/utils/controls.es.js"],"names":["defaults","noop","time","stopAnimation","createAnimation","factory","withControls","animationFactory","options","duration","Proxy","animations","map","filter","Boolean","controls","getActiveAnimation","state","get","target","key","activeAnimation","s","finished","Promise","all","selectFinished","catch","forEach","animation","callback","undefined","set","value","ms","i","length"],"mappings":"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","sourcesContent":["import { defaults, noop, time } from '@motionone/utils';\nimport { stopAnimation } from './stop-animation.es.js';\n\nconst createAnimation = (factory) => factory();\nconst withControls = (animationFactory, options, duration = defaults.duration) => {\n    return new Proxy({\n        animations: animationFactory.map(createAnimation).filter(Boolean),\n        duration,\n        options,\n    }, controls);\n};\n/**\n * TODO:\n * Currently this returns the first animation, ideally it would return\n * the first active animation.\n */\nconst getActiveAnimation = (state) => state.animations[0];\nconst controls = {\n    get: (target, key) => {\n        const activeAnimation = getActiveAnimation(target);\n        switch (key) {\n            case \"duration\":\n                return target.duration;\n            case \"currentTime\":\n                return time.s((activeAnimation === null || activeAnimation === void 0 ? void 0 : activeAnimation[key]) || 0);\n            case \"playbackRate\":\n            case \"playState\":\n                return activeAnimation === null || activeAnimation === void 0 ? void 0 : activeAnimation[key];\n            case \"finished\":\n                if (!target.finished) {\n                    target.finished = Promise.all(target.animations.map(selectFinished)).catch(noop);\n                }\n                return target.finished;\n            case \"stop\":\n                return () => {\n                    target.animations.forEach((animation) => stopAnimation(animation));\n                };\n            case \"forEachNative\":\n                /**\n                 * This is for internal use only, fire a callback for each\n                 * underlying animation.\n                 */\n                return (callback) => {\n                    target.animations.forEach((animation) => callback(animation, target));\n                };\n            default:\n                return typeof (activeAnimation === null || activeAnimation === void 0 ? void 0 : activeAnimation[key]) === \"undefined\"\n                    ? undefined\n                    : () => target.animations.forEach((animation) => animation[key]());\n        }\n    },\n    set: (target, key, value) => {\n        switch (key) {\n            case \"currentTime\":\n                value = time.ms(value);\n            case \"currentTime\":\n            case \"playbackRate\":\n                for (let i = 0; i < target.animations.length; i++) {\n                    target.animations[i][key] = value;\n                }\n                return true;\n        }\n        return false;\n    },\n};\nconst selectFinished = (animation) => animation.finished;\n\nexport { controls, withControls };\n"]},"metadata":{},"sourceType":"module"}