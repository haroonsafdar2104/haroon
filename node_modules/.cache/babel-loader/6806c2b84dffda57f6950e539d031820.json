{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AsyncScheduler } from './AsyncScheduler';\n\nvar AsapScheduler = function (_super) {\n  __extends(AsapScheduler, _super);\n\n  function AsapScheduler() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AsapScheduler.prototype.flush = function (action) {\n    this._active = true;\n    var flushId = this._scheduled;\n    this._scheduled = undefined;\n    var actions = this.actions;\n    var error;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while ((action = actions[0]) && action.id === flushId && actions.shift());\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  return AsapScheduler;\n}(AsyncScheduler);\n\nexport { AsapScheduler };","map":{"version":3,"mappings":";AACA,SAASA,cAAT,QAA+B,kBAA/B;;AAEA;AAAmCC;;AAAnC;;AAkCC;;AAjCQC,kCAAP,UAAaC,MAAb,EAAsC;AACpC,SAAKC,OAAL,GAAe,IAAf;AAUA,QAAMC,OAAO,GAAG,KAAKC,UAArB;AACA,SAAKA,UAAL,GAAkBC,SAAlB;AAEQ,eAAO,GAAK,KAAIC,OAAhB;AACR,QAAIC,KAAJ;AACAN,UAAM,GAAGA,MAAM,IAAIK,OAAO,CAACE,KAAR,EAAnB;;AAEA,OAAG;AACD,UAAKD,KAAK,GAAGN,MAAM,CAACQ,OAAP,CAAeR,MAAM,CAACS,KAAtB,EAA6BT,MAAM,CAACU,KAApC,CAAb,EAA0D;AACxD;AACD;AACF,KAJD,QAIS,CAACV,MAAM,GAAGK,OAAO,CAAC,CAAD,CAAjB,KAAyBL,MAAM,CAACW,EAAP,KAAcT,OAAvC,IAAkDG,OAAO,CAACE,KAAR,EAJ3D;;AAMA,SAAKN,OAAL,GAAe,KAAf;;AAEA,QAAIK,KAAJ,EAAW;AACT,aAAO,CAACN,MAAM,GAAGK,OAAO,CAAC,CAAD,CAAjB,KAAyBL,MAAM,CAACW,EAAP,KAAcT,OAAvC,IAAkDG,OAAO,CAACE,KAAR,EAAzD,EAA0E;AACxEP,cAAM,CAACY,WAAP;AACD;;AACD,YAAMN,KAAN;AACD;AACF,GAhCM;;AAiCT;AAlCA,EAAmCT,cAAnC","names":["AsyncScheduler","__extends","AsapScheduler","action","_active","flushId","_scheduled","undefined","actions","error","shift","execute","state","delay","id","unsubscribe"],"sources":["C:\\Users\\Admin\\Downloads\\portpoliopro-main\\client\\node_modules\\rxjs\\src\\internal\\scheduler\\AsapScheduler.ts"],"sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n    this._active = true;\n    // The async id that effects a call to flush is stored in _scheduled.\n    // Before executing an action, it's necessary to check the action's async\n    // id to determine whether it's supposed to be executed in the current\n    // flush.\n    // Previous implementations of this method used a count to determine this,\n    // but that was unsound, as actions that are unsubscribed - i.e. cancelled -\n    // are removed from the actions array and that can shift actions that are\n    // scheduled to be executed in a subsequent flush into positions at which\n    // they are executed within the current flush.\n    const flushId = this._scheduled;\n    this._scheduled = undefined;\n\n    const { actions } = this;\n    let error: any;\n    action = action || actions.shift()!;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions[0]) && action.id === flushId && actions.shift());\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions[0]) && action.id === flushId && actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}