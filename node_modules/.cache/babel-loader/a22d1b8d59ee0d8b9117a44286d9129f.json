{"ast":null,"code":"import { isFunction } from './isFunction';\nexport function hasLift(source) {\n  return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\nexport function operate(init) {\n  return function (source) {\n    if (hasLift(source)) {\n      return source.lift(function (liftedSource) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}","map":{"version":3,"mappings":"AAGA,SAASA,UAAT,QAA2B,cAA3B;AAKA,OAAM,SAAUC,OAAV,CAAkBC,MAAlB,EAA6B;AACjC,SAAOF,UAAU,CAACE,MAAM,SAAN,UAAM,WAAN,GAAM,MAAN,SAAM,CAAEC,IAAT,CAAjB;AACD;AAMD,OAAM,SAAUC,OAAV,CACJC,IADI,EACiF;AAErF,SAAO,UAACH,MAAD,EAAsB;AAC3B,QAAID,OAAO,CAACC,MAAD,CAAX,EAAqB;AACnB,aAAOA,MAAM,CAACC,IAAP,CAAY,UAA+BG,YAA/B,EAA0D;AAC3E,YAAI;AACF,iBAAOD,IAAI,CAACC,YAAD,EAAe,IAAf,CAAX;AACD,SAFD,CAEE,OAAOC,GAAP,EAAY;AACZ,eAAKC,KAAL,CAAWD,GAAX;AACD;AACF,OANM,CAAP;AAOD;;AACD,UAAM,IAAIE,SAAJ,CAAc,wCAAd,CAAN;AACD,GAXD;AAYD","names":["isFunction","hasLift","source","lift","operate","init","liftedSource","err","error","TypeError"],"sources":["C:\\Users\\Admin\\Downloads\\portpoliopro-main\\client\\node_modules\\rxjs\\src\\internal\\util\\lift.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\nimport { isFunction } from './isFunction';\n\n/**\n * Used to determine if an object is an Observable with a lift function.\n */\nexport function hasLift(source: any): source is { lift: InstanceType<typeof Observable>['lift'] } {\n  return isFunction(source?.lift);\n}\n\n/**\n * Creates an `OperatorFunction`. Used to define operators throughout the library in a concise way.\n * @param init The logic to connect the liftedSource to the subscriber at the moment of subscription.\n */\nexport function operate<T, R>(\n  init: (liftedSource: Observable<T>, subscriber: Subscriber<R>) => (() => void) | void\n): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    if (hasLift(source)) {\n      return source.lift(function (this: Subscriber<R>, liftedSource: Observable<T>) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n"]},"metadata":{},"sourceType":"module"}