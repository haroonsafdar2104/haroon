{"ast":null,"code":"import { __values } from \"tslib\";\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\nexport function windowToggle(openings, closingSelector) {\n  return operate(function (source, subscriber) {\n    var windows = [];\n\n    var handleError = function (err) {\n      while (0 < windows.length) {\n        windows.shift().error(err);\n      }\n\n      subscriber.error(err);\n    };\n\n    innerFrom(openings).subscribe(createOperatorSubscriber(subscriber, function (openValue) {\n      var window = new Subject();\n      windows.push(window);\n      var closingSubscription = new Subscription();\n\n      var closeWindow = function () {\n        arrRemove(windows, window);\n        window.complete();\n        closingSubscription.unsubscribe();\n      };\n\n      var closingNotifier;\n\n      try {\n        closingNotifier = innerFrom(closingSelector(openValue));\n      } catch (err) {\n        handleError(err);\n        return;\n      }\n\n      subscriber.next(window.asObservable());\n      closingSubscription.add(closingNotifier.subscribe(createOperatorSubscriber(subscriber, closeWindow, noop, handleError)));\n    }, noop));\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n\n      var windowsCopy = windows.slice();\n\n      try {\n        for (var windowsCopy_1 = __values(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {\n          var window_1 = windowsCopy_1_1.value;\n          window_1.next(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }, function () {\n      while (0 < windows.length) {\n        windows.shift().complete();\n      }\n\n      subscriber.complete();\n    }, handleError, function () {\n      while (0 < windows.length) {\n        windows.shift().unsubscribe();\n      }\n    }));\n  });\n}","map":{"version":3,"mappings":";AACA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,wBAAT,QAAyC,sBAAzC;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAiDA,OAAM,SAAUC,YAAV,CACJC,QADI,EAEJC,eAFI,EAEmD;AAEvD,SAAOP,OAAO,CAAC,UAACQ,MAAD,EAASC,UAAT,EAAmB;AAChC,QAAMC,OAAO,GAAiB,EAA9B;;AAEA,QAAMC,WAAW,GAAG,UAACC,GAAD,EAAS;AAC3B,aAAO,IAAIF,OAAO,CAACG,MAAnB,EAA2B;AACzBH,eAAO,CAACI,KAAR,GAAiBC,KAAjB,CAAuBH,GAAvB;AACD;;AACDH,gBAAU,CAACM,KAAX,CAAiBH,GAAjB;AACD,KALD;;AAOAX,aAAS,CAACK,QAAD,CAAT,CAAoBU,SAApB,CACEd,wBAAwB,CACtBO,UADsB,EAEtB,UAACQ,SAAD,EAAU;AACR,UAAMC,MAAM,GAAG,IAAIpB,OAAJ,EAAf;AACAY,aAAO,CAACS,IAAR,CAAaD,MAAb;AACA,UAAME,mBAAmB,GAAG,IAAIrB,YAAJ,EAA5B;;AACA,UAAMsB,WAAW,GAAG;AAClBjB,iBAAS,CAACM,OAAD,EAAUQ,MAAV,CAAT;AACAA,cAAM,CAACI,QAAP;AACAF,2BAAmB,CAACG,WAApB;AACD,OAJD;;AAMA,UAAIC,eAAJ;;AACA,UAAI;AACFA,uBAAe,GAAGvB,SAAS,CAACM,eAAe,CAACU,SAAD,CAAhB,CAA3B;AACD,OAFD,CAEE,OAAOL,GAAP,EAAY;AACZD,mBAAW,CAACC,GAAD,CAAX;AACA;AACD;;AAEDH,gBAAU,CAACgB,IAAX,CAAgBP,MAAM,CAACQ,YAAP,EAAhB;AAEAN,yBAAmB,CAACO,GAApB,CAAwBH,eAAe,CAACR,SAAhB,CAA0Bd,wBAAwB,CAACO,UAAD,EAAaY,WAAb,EAA0BlB,IAA1B,EAAgCQ,WAAhC,CAAlD,CAAxB;AACD,KAvBqB,EAwBtBR,IAxBsB,CAD1B;AA8BAK,UAAM,CAACQ,SAAP,CACEd,wBAAwB,CACtBO,UADsB,EAEtB,UAACmB,KAAD,EAAS;;;AAGP,UAAMC,WAAW,GAAGnB,OAAO,CAACoB,KAAR,EAApB;;;AACA,aAAqB,2CAAWC,sCAAhC,EAAgC,qBAAhC,EAAgCA,sCAAhC,EAAkC;AAA7B,cAAMC,QAAM,wBAAZ;AACHA,kBAAM,CAACP,IAAP,CAAYG,KAAZ;AACD;;;;;;;;;;;;AACF,KATqB,EAUtB;AAEE,aAAO,IAAIlB,OAAO,CAACG,MAAnB,EAA2B;AACzBH,eAAO,CAACI,KAAR,GAAiBQ,QAAjB;AACD;;AACDb,gBAAU,CAACa,QAAX;AACD,KAhBqB,EAiBtBX,WAjBsB,EAkBtB;AAME,aAAO,IAAID,OAAO,CAACG,MAAnB,EAA2B;AACzBH,eAAO,CAACI,KAAR,GAAiBS,WAAjB;AACD;AACF,KA3BqB,CAD1B;AA+BD,GAvEa,CAAd;AAwED","names":["Subject","Subscription","operate","innerFrom","createOperatorSubscriber","noop","arrRemove","windowToggle","openings","closingSelector","source","subscriber","windows","handleError","err","length","shift","error","subscribe","openValue","window","push","closingSubscription","closeWindow","complete","unsubscribe","closingNotifier","next","asObservable","add","value","windowsCopy","slice","windowsCopy_1_1","window_1"],"sources":["C:\\Users\\Admin\\Downloads\\portpoliopro-main\\client\\node_modules\\rxjs\\src\\internal\\operators\\windowToggle.ts"],"sourcesContent":["import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowToggle.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * ## Example\n *\n * Every other second, emit the click events from the next 500ms\n *\n * ```ts\n * import { fromEvent, interval, windowToggle, EMPTY, mergeAll } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const result = clicks.pipe(\n *   windowToggle(openings, i => i % 2 ? interval(500) : EMPTY),\n *   mergeAll()\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits a next notification, signals that the\n * associated window should complete.\n * @return A function that returns an Observable of windows, which in turn are\n * Observables.\n */\nexport function windowToggle<T, O>(\n  openings: ObservableInput<O>,\n  closingSelector: (openValue: O) => ObservableInput<any>\n): OperatorFunction<T, Observable<T>> {\n  return operate((source, subscriber) => {\n    const windows: Subject<T>[] = [];\n\n    const handleError = (err: any) => {\n      while (0 < windows.length) {\n        windows.shift()!.error(err);\n      }\n      subscriber.error(err);\n    };\n\n    innerFrom(openings).subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (openValue) => {\n          const window = new Subject<T>();\n          windows.push(window);\n          const closingSubscription = new Subscription();\n          const closeWindow = () => {\n            arrRemove(windows, window);\n            window.complete();\n            closingSubscription.unsubscribe();\n          };\n\n          let closingNotifier: Observable<any>;\n          try {\n            closingNotifier = innerFrom(closingSelector(openValue));\n          } catch (err) {\n            handleError(err);\n            return;\n          }\n\n          subscriber.next(window.asObservable());\n\n          closingSubscription.add(closingNotifier.subscribe(createOperatorSubscriber(subscriber, closeWindow, noop, handleError)));\n        },\n        noop\n      )\n    );\n\n    // Subcribe to the source to get things started.\n    source.subscribe(\n      createOperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // Copy the windows array before we emit to\n          // make sure we don't have issues with reentrant code.\n          const windowsCopy = windows.slice();\n          for (const window of windowsCopy) {\n            window.next(value);\n          }\n        },\n        () => {\n          // Complete all of our windows before we complete.\n          while (0 < windows.length) {\n            windows.shift()!.complete();\n          }\n          subscriber.complete();\n        },\n        handleError,\n        () => {\n          // Add this finalization so that all window subjects are\n          // disposed of. This way, if a user tries to subscribe\n          // to a window *after* the outer subscription has been unsubscribed,\n          // they will get an error, instead of waiting forever to\n          // see if a value arrives.\n          while (0 < windows.length) {\n            windows.shift()!.unsubscribe();\n          }\n        }\n      )\n    );\n  });\n}\n"]},"metadata":{},"sourceType":"module"}