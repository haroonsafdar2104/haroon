{"ast":null,"code":"import _slicedToArray from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { invariant } from 'hey-listen';\nimport { cubicBezier, linear, easeIn, easeInOut, easeOut, circIn, circInOut, circOut, backIn, backInOut, backOut, anticipate, bounceIn, bounceInOut, bounceOut } from 'popmotion';\nvar easingLookup = {\n  linear: linear,\n  easeIn: easeIn,\n  easeInOut: easeInOut,\n  easeOut: easeOut,\n  circIn: circIn,\n  circInOut: circInOut,\n  circOut: circOut,\n  backIn: backIn,\n  backInOut: backInOut,\n  backOut: backOut,\n  anticipate: anticipate,\n  bounceIn: bounceIn,\n  bounceInOut: bounceInOut,\n  bounceOut: bounceOut\n};\n\nvar easingDefinitionToFunction = function easingDefinitionToFunction(definition) {\n  if (Array.isArray(definition)) {\n    // If cubic bezier definition, create bezier curve\n    invariant(definition.length === 4, \"Cubic bezier arrays must contain four numerical values.\");\n\n    var _definition = _slicedToArray(definition, 4),\n        x1 = _definition[0],\n        y1 = _definition[1],\n        x2 = _definition[2],\n        y2 = _definition[3];\n\n    return cubicBezier(x1, y1, x2, y2);\n  } else if (typeof definition === \"string\") {\n    // Else lookup from table\n    invariant(easingLookup[definition] !== undefined, \"Invalid easing type '\".concat(definition, \"'\"));\n    return easingLookup[definition];\n  }\n\n  return definition;\n};\n\nvar isEasingArray = function isEasingArray(ease) {\n  return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { easingDefinitionToFunction, isEasingArray };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/animation/utils/easing.mjs"],"names":["invariant","cubicBezier","linear","easeIn","easeInOut","easeOut","circIn","circInOut","circOut","backIn","backInOut","backOut","anticipate","bounceIn","bounceInOut","bounceOut","easingLookup","easingDefinitionToFunction","definition","Array","isArray","length","x1","y1","x2","y2","undefined","isEasingArray","ease"],"mappings":";AAAA,SAASA,SAAT,QAA0B,YAA1B;AACA,SAASC,WAAT,EAAsBC,MAAtB,EAA8BC,MAA9B,EAAsCC,SAAtC,EAAiDC,OAAjD,EAA0DC,MAA1D,EAAkEC,SAAlE,EAA6EC,OAA7E,EAAsFC,MAAtF,EAA8FC,SAA9F,EAAyGC,OAAzG,EAAkHC,UAAlH,EAA8HC,QAA9H,EAAwIC,WAAxI,EAAqJC,SAArJ,QAAsK,WAAtK;AAEA,IAAMC,YAAY,GAAG;AACjBd,EAAAA,MAAM,EAANA,MADiB;AAEjBC,EAAAA,MAAM,EAANA,MAFiB;AAGjBC,EAAAA,SAAS,EAATA,SAHiB;AAIjBC,EAAAA,OAAO,EAAPA,OAJiB;AAKjBC,EAAAA,MAAM,EAANA,MALiB;AAMjBC,EAAAA,SAAS,EAATA,SANiB;AAOjBC,EAAAA,OAAO,EAAPA,OAPiB;AAQjBC,EAAAA,MAAM,EAANA,MARiB;AASjBC,EAAAA,SAAS,EAATA,SATiB;AAUjBC,EAAAA,OAAO,EAAPA,OAViB;AAWjBC,EAAAA,UAAU,EAAVA,UAXiB;AAYjBC,EAAAA,QAAQ,EAARA,QAZiB;AAajBC,EAAAA,WAAW,EAAXA,WAbiB;AAcjBC,EAAAA,SAAS,EAATA;AAdiB,CAArB;;AAgBA,IAAME,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,UAAD,EAAgB;AAC/C,MAAIC,KAAK,CAACC,OAAN,CAAcF,UAAd,CAAJ,EAA+B;AAC3B;AACAlB,IAAAA,SAAS,CAACkB,UAAU,CAACG,MAAX,KAAsB,CAAvB,4DAAT;;AACA,qCAAyBH,UAAzB;AAAA,QAAOI,EAAP;AAAA,QAAWC,EAAX;AAAA,QAAeC,EAAf;AAAA,QAAmBC,EAAnB;;AACA,WAAOxB,WAAW,CAACqB,EAAD,EAAKC,EAAL,EAASC,EAAT,EAAaC,EAAb,CAAlB;AACH,GALD,MAMK,IAAI,OAAOP,UAAP,KAAsB,QAA1B,EAAoC;AACrC;AACAlB,IAAAA,SAAS,CAACgB,YAAY,CAACE,UAAD,CAAZ,KAA6BQ,SAA9B,iCAAiER,UAAjE,OAAT;AACA,WAAOF,YAAY,CAACE,UAAD,CAAnB;AACH;;AACD,SAAOA,UAAP;AACH,CAbD;;AAcA,IAAMS,aAAa,GAAG,SAAhBA,aAAgB,CAACC,IAAD,EAAU;AAC5B,SAAOT,KAAK,CAACC,OAAN,CAAcQ,IAAd,KAAuB,OAAOA,IAAI,CAAC,CAAD,CAAX,KAAmB,QAAjD;AACH,CAFD;;AAIA,SAASX,0BAAT,EAAqCU,aAArC","sourcesContent":["import { invariant } from 'hey-listen';\nimport { cubicBezier, linear, easeIn, easeInOut, easeOut, circIn, circInOut, circOut, backIn, backInOut, backOut, anticipate, bounceIn, bounceInOut, bounceOut } from 'popmotion';\n\nconst easingLookup = {\n    linear,\n    easeIn,\n    easeInOut,\n    easeOut,\n    circIn,\n    circInOut,\n    circOut,\n    backIn,\n    backInOut,\n    backOut,\n    anticipate,\n    bounceIn,\n    bounceInOut,\n    bounceOut,\n};\nconst easingDefinitionToFunction = (definition) => {\n    if (Array.isArray(definition)) {\n        // If cubic bezier definition, create bezier curve\n        invariant(definition.length === 4, `Cubic bezier arrays must contain four numerical values.`);\n        const [x1, y1, x2, y2] = definition;\n        return cubicBezier(x1, y1, x2, y2);\n    }\n    else if (typeof definition === \"string\") {\n        // Else lookup from table\n        invariant(easingLookup[definition] !== undefined, `Invalid easing type '${definition}'`);\n        return easingLookup[definition];\n    }\n    return definition;\n};\nconst isEasingArray = (ease) => {\n    return Array.isArray(ease) && typeof ease[0] !== \"number\";\n};\n\nexport { easingDefinitionToFunction, isEasingArray };\n"]},"metadata":{},"sourceType":"module"}