{"ast":null,"code":"import _objectSpread from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { useContext, useRef, useMemo } from 'react';\nimport { animate } from 'popmotion';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { useOnChange } from './use-on-change.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\n\nfunction useSpring(source) {\n  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _useContext = useContext(MotionConfigContext),\n      isStatic = _useContext.isStatic;\n\n  var activeSpringAnimation = useRef(null);\n  var value = useMotionValue(isMotionValue(source) ? source.get() : source);\n  useMemo(function () {\n    return value.attach(function (v, set) {\n      /**\n       * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n       * at that level, but this will work for now\n       */\n      if (isStatic) return set(v);\n\n      if (activeSpringAnimation.current) {\n        activeSpringAnimation.current.stop();\n      }\n\n      activeSpringAnimation.current = animate(_objectSpread(_objectSpread({\n        from: value.get(),\n        to: v,\n        velocity: value.getVelocity()\n      }, config), {}, {\n        onUpdate: set\n      }));\n      return value.get();\n    });\n  }, [JSON.stringify(config)]);\n  useOnChange(source, function (v) {\n    return value.set(parseFloat(v));\n  });\n  return value;\n}\n\nexport { useSpring };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/value/use-spring.mjs"],"names":["useContext","useRef","useMemo","animate","isMotionValue","useMotionValue","useOnChange","MotionConfigContext","useSpring","source","config","isStatic","activeSpringAnimation","value","get","attach","v","set","current","stop","from","to","velocity","getVelocity","onUpdate","JSON","stringify","parseFloat"],"mappings":";AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,OAA7B,QAA4C,OAA5C;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAASC,cAAT,QAA+B,wBAA/B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,mBAAT,QAAoC,oCAApC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,SAAT,CAAmBC,MAAnB,EAAwC;AAAA,MAAbC,MAAa,uEAAJ,EAAI;;AACpC,oBAAqBV,UAAU,CAACO,mBAAD,CAA/B;AAAA,MAAQI,QAAR,eAAQA,QAAR;;AACA,MAAMC,qBAAqB,GAAGX,MAAM,CAAC,IAAD,CAApC;AACA,MAAMY,KAAK,GAAGR,cAAc,CAACD,aAAa,CAACK,MAAD,CAAb,GAAwBA,MAAM,CAACK,GAAP,EAAxB,GAAuCL,MAAxC,CAA5B;AACAP,EAAAA,OAAO,CAAC,YAAM;AACV,WAAOW,KAAK,CAACE,MAAN,CAAa,UAACC,CAAD,EAAIC,GAAJ,EAAY;AAC5B;AACZ;AACA;AACA;AACY,UAAIN,QAAJ,EACI,OAAOM,GAAG,CAACD,CAAD,CAAV;;AACJ,UAAIJ,qBAAqB,CAACM,OAA1B,EAAmC;AAC/BN,QAAAA,qBAAqB,CAACM,OAAtB,CAA8BC,IAA9B;AACH;;AACDP,MAAAA,qBAAqB,CAACM,OAAtB,GAAgCf,OAAO;AACnCiB,QAAAA,IAAI,EAAEP,KAAK,CAACC,GAAN,EAD6B;AAEnCO,QAAAA,EAAE,EAAEL,CAF+B;AAGnCM,QAAAA,QAAQ,EAAET,KAAK,CAACU,WAAN;AAHyB,SAIhCb,MAJgC;AAKnCc,QAAAA,QAAQ,EAAEP;AALyB,SAAvC;AAOA,aAAOJ,KAAK,CAACC,GAAN,EAAP;AACH,KAlBM,CAAP;AAmBH,GApBM,EAoBJ,CAACW,IAAI,CAACC,SAAL,CAAehB,MAAf,CAAD,CApBI,CAAP;AAqBAJ,EAAAA,WAAW,CAACG,MAAD,EAAS,UAACO,CAAD;AAAA,WAAOH,KAAK,CAACI,GAAN,CAAUU,UAAU,CAACX,CAAD,CAApB,CAAP;AAAA,GAAT,CAAX;AACA,SAAOH,KAAP;AACH;;AAED,SAASL,SAAT","sourcesContent":["import { useContext, useRef, useMemo } from 'react';\nimport { animate } from 'popmotion';\nimport { isMotionValue } from './utils/is-motion-value.mjs';\nimport { useMotionValue } from './use-motion-value.mjs';\nimport { useOnChange } from './use-on-change.mjs';\nimport { MotionConfigContext } from '../context/MotionConfigContext.mjs';\n\n/**\n * Creates a `MotionValue` that, when `set`, will use a spring animation to animate to its new state.\n *\n * It can either work as a stand-alone `MotionValue` by initialising it with a value, or as a subscriber\n * to another `MotionValue`.\n *\n * @remarks\n *\n * ```jsx\n * const x = useSpring(0, { stiffness: 300 })\n * const y = useSpring(x, { damping: 10 })\n * ```\n *\n * @param inputValue - `MotionValue` or number. If provided a `MotionValue`, when the input `MotionValue` changes, the created `MotionValue` will spring towards that value.\n * @param springConfig - Configuration options for the spring.\n * @returns `MotionValue`\n *\n * @public\n */\nfunction useSpring(source, config = {}) {\n    const { isStatic } = useContext(MotionConfigContext);\n    const activeSpringAnimation = useRef(null);\n    const value = useMotionValue(isMotionValue(source) ? source.get() : source);\n    useMemo(() => {\n        return value.attach((v, set) => {\n            /**\n             * A more hollistic approach to this might be to use isStatic to fix VisualElement animations\n             * at that level, but this will work for now\n             */\n            if (isStatic)\n                return set(v);\n            if (activeSpringAnimation.current) {\n                activeSpringAnimation.current.stop();\n            }\n            activeSpringAnimation.current = animate({\n                from: value.get(),\n                to: v,\n                velocity: value.getVelocity(),\n                ...config,\n                onUpdate: set,\n            });\n            return value.get();\n        });\n    }, [JSON.stringify(config)]);\n    useOnChange(source, (v) => value.set(parseFloat(v)));\n    return value;\n}\n\nexport { useSpring };\n"]},"metadata":{},"sourceType":"module"}