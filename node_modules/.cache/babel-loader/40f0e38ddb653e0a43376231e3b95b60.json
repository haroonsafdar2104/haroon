{"ast":null,"code":"import * as React from 'react';\nimport { useState, useRef, useEffect } from 'react';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { loadFeatures } from '../../motion/features/load-features.mjs';\n/**\n * Used in conjunction with the `m` component to reduce bundle size.\n *\n * `m` is a version of the `motion` component that only loads functionality\n * critical for the initial render.\n *\n * `LazyMotion` can then be used to either synchronously or asynchronously\n * load animation and gesture support.\n *\n * ```jsx\n * // Synchronous loading\n * import { LazyMotion, m, domAnimations } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={domAnimations}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n *\n * // Asynchronous loading\n * import { LazyMotion, m } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={() => import('./path/to/domAnimations')}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n * ```\n *\n * @public\n */\n\nfunction LazyMotion(_ref) {\n  let {\n    children,\n    features,\n    strict = false\n  } = _ref;\n  const [, setIsLoaded] = useState(!isLazyBundle(features));\n  const loadedRenderer = useRef(undefined);\n  /**\n   * If this is a synchronous load, load features immediately\n   */\n\n  if (!isLazyBundle(features)) {\n    const {\n      renderer,\n      ...loadedFeatures\n    } = features;\n    loadedRenderer.current = renderer;\n    loadFeatures(loadedFeatures);\n  }\n\n  useEffect(() => {\n    if (isLazyBundle(features)) {\n      features().then(_ref2 => {\n        let {\n          renderer,\n          ...loadedFeatures\n        } = _ref2;\n        loadFeatures(loadedFeatures);\n        loadedRenderer.current = renderer;\n        setIsLoaded(true);\n      });\n    }\n  }, []);\n  return React.createElement(LazyContext.Provider, {\n    value: {\n      renderer: loadedRenderer.current,\n      strict\n    }\n  }, children);\n}\n\nfunction isLazyBundle(features) {\n  return typeof features === \"function\";\n}\n\nexport { LazyMotion };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/components/LazyMotion/index.mjs"],"names":["React","useState","useRef","useEffect","LazyContext","loadFeatures","LazyMotion","children","features","strict","setIsLoaded","isLazyBundle","loadedRenderer","undefined","renderer","loadedFeatures","current","then","createElement","Provider","value"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,QAAT,EAAmBC,MAAnB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,YAAT,QAA6B,yCAA7B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,UAAT,OAA4D;AAAA,MAAxC;AAAEC,IAAAA,QAAF;AAAYC,IAAAA,QAAZ;AAAsBC,IAAAA,MAAM,GAAG;AAA/B,GAAwC;AACxD,QAAM,GAAGC,WAAH,IAAkBT,QAAQ,CAAC,CAACU,YAAY,CAACH,QAAD,CAAd,CAAhC;AACA,QAAMI,cAAc,GAAGV,MAAM,CAACW,SAAD,CAA7B;AACA;AACJ;AACA;;AACI,MAAI,CAACF,YAAY,CAACH,QAAD,CAAjB,EAA6B;AACzB,UAAM;AAAEM,MAAAA,QAAF;AAAY,SAAGC;AAAf,QAAkCP,QAAxC;AACAI,IAAAA,cAAc,CAACI,OAAf,GAAyBF,QAAzB;AACAT,IAAAA,YAAY,CAACU,cAAD,CAAZ;AACH;;AACDZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIQ,YAAY,CAACH,QAAD,CAAhB,EAA4B;AACxBA,MAAAA,QAAQ,GAAGS,IAAX,CAAgB,SAAqC;AAAA,YAApC;AAAEH,UAAAA,QAAF;AAAY,aAAGC;AAAf,SAAoC;AACjDV,QAAAA,YAAY,CAACU,cAAD,CAAZ;AACAH,QAAAA,cAAc,CAACI,OAAf,GAAyBF,QAAzB;AACAJ,QAAAA,WAAW,CAAC,IAAD,CAAX;AACH,OAJD;AAKH;AACJ,GARQ,EAQN,EARM,CAAT;AASA,SAAQV,KAAK,CAACkB,aAAN,CAAoBd,WAAW,CAACe,QAAhC,EAA0C;AAAEC,IAAAA,KAAK,EAAE;AAAEN,MAAAA,QAAQ,EAAEF,cAAc,CAACI,OAA3B;AAAoCP,MAAAA;AAApC;AAAT,GAA1C,EAAmGF,QAAnG,CAAR;AACH;;AACD,SAASI,YAAT,CAAsBH,QAAtB,EAAgC;AAC5B,SAAO,OAAOA,QAAP,KAAoB,UAA3B;AACH;;AAED,SAASF,UAAT","sourcesContent":["import * as React from 'react';\nimport { useState, useRef, useEffect } from 'react';\nimport { LazyContext } from '../../context/LazyContext.mjs';\nimport { loadFeatures } from '../../motion/features/load-features.mjs';\n\n/**\n * Used in conjunction with the `m` component to reduce bundle size.\n *\n * `m` is a version of the `motion` component that only loads functionality\n * critical for the initial render.\n *\n * `LazyMotion` can then be used to either synchronously or asynchronously\n * load animation and gesture support.\n *\n * ```jsx\n * // Synchronous loading\n * import { LazyMotion, m, domAnimations } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={domAnimations}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n *\n * // Asynchronous loading\n * import { LazyMotion, m } from \"framer-motion\"\n *\n * function App() {\n *   return (\n *     <LazyMotion features={() => import('./path/to/domAnimations')}>\n *       <m.div animate={{ scale: 2 }} />\n *     </LazyMotion>\n *   )\n * }\n * ```\n *\n * @public\n */\nfunction LazyMotion({ children, features, strict = false }) {\n    const [, setIsLoaded] = useState(!isLazyBundle(features));\n    const loadedRenderer = useRef(undefined);\n    /**\n     * If this is a synchronous load, load features immediately\n     */\n    if (!isLazyBundle(features)) {\n        const { renderer, ...loadedFeatures } = features;\n        loadedRenderer.current = renderer;\n        loadFeatures(loadedFeatures);\n    }\n    useEffect(() => {\n        if (isLazyBundle(features)) {\n            features().then(({ renderer, ...loadedFeatures }) => {\n                loadFeatures(loadedFeatures);\n                loadedRenderer.current = renderer;\n                setIsLoaded(true);\n            });\n        }\n    }, []);\n    return (React.createElement(LazyContext.Provider, { value: { renderer: loadedRenderer.current, strict } }, children));\n}\nfunction isLazyBundle(features) {\n    return typeof features === \"function\";\n}\n\nexport { LazyMotion };\n"]},"metadata":{},"sourceType":"module"}