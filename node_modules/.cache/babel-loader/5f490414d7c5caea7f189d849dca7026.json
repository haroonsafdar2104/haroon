{"ast":null,"code":"import { isFunction, defaults, isCubicBezier, progress } from '@motionone/utils';\nimport { supports } from './feature-detection.es.js'; // Create a linear easing point for every x second\n\nconst resolution = 0.015;\n\nconst generateLinearEasingPoints = (easing, duration) => {\n  let points = \"\";\n  const numPoints = Math.round(duration / resolution);\n\n  for (let i = 0; i < numPoints; i++) {\n    points += easing(progress(0, numPoints - 1, i)) + \", \";\n  }\n\n  return points.substring(0, points.length - 2);\n};\n\nconst convertEasing = (easing, duration) => {\n  if (isFunction(easing)) {\n    return supports.linearEasing() ? `linear(${generateLinearEasingPoints(easing, duration)})` : defaults.easing;\n  } else {\n    return isCubicBezier(easing) ? cubicBezierAsString(easing) : easing;\n  }\n};\n\nconst cubicBezierAsString = _ref => {\n  let [a, b, c, d] = _ref;\n  return `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\n};\n\nexport { convertEasing, cubicBezierAsString, generateLinearEasingPoints };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/@motionone/dom/dist/animate/utils/easing.es.js"],"names":["isFunction","defaults","isCubicBezier","progress","supports","resolution","generateLinearEasingPoints","easing","duration","points","numPoints","Math","round","i","substring","length","convertEasing","linearEasing","cubicBezierAsString","a","b","c","d"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,QAArB,EAA+BC,aAA/B,EAA8CC,QAA9C,QAA8D,kBAA9D;AACA,SAASC,QAAT,QAAyB,2BAAzB,C,CAEA;;AACA,MAAMC,UAAU,GAAG,KAAnB;;AACA,MAAMC,0BAA0B,GAAG,CAACC,MAAD,EAASC,QAAT,KAAsB;AACrD,MAAIC,MAAM,GAAG,EAAb;AACA,QAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWJ,QAAQ,GAAGH,UAAtB,CAAlB;;AACA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,SAApB,EAA+BG,CAAC,EAAhC,EAAoC;AAChCJ,IAAAA,MAAM,IAAIF,MAAM,CAACJ,QAAQ,CAAC,CAAD,EAAIO,SAAS,GAAG,CAAhB,EAAmBG,CAAnB,CAAT,CAAN,GAAwC,IAAlD;AACH;;AACD,SAAOJ,MAAM,CAACK,SAAP,CAAiB,CAAjB,EAAoBL,MAAM,CAACM,MAAP,GAAgB,CAApC,CAAP;AACH,CAPD;;AAQA,MAAMC,aAAa,GAAG,CAACT,MAAD,EAASC,QAAT,KAAsB;AACxC,MAAIR,UAAU,CAACO,MAAD,CAAd,EAAwB;AACpB,WAAOH,QAAQ,CAACa,YAAT,KACA,UAASX,0BAA0B,CAACC,MAAD,EAASC,QAAT,CAAmB,GADtD,GAEDP,QAAQ,CAACM,MAFf;AAGH,GAJD,MAKK;AACD,WAAOL,aAAa,CAACK,MAAD,CAAb,GAAwBW,mBAAmB,CAACX,MAAD,CAA3C,GAAsDA,MAA7D;AACH;AACJ,CATD;;AAUA,MAAMW,mBAAmB,GAAG;AAAA,MAAC,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,CAAD;AAAA,SAAmB,gBAAeH,CAAE,KAAIC,CAAE,KAAIC,CAAE,KAAIC,CAAE,GAAtD;AAAA,CAA5B;;AAEA,SAASN,aAAT,EAAwBE,mBAAxB,EAA6CZ,0BAA7C","sourcesContent":["import { isFunction, defaults, isCubicBezier, progress } from '@motionone/utils';\nimport { supports } from './feature-detection.es.js';\n\n// Create a linear easing point for every x second\nconst resolution = 0.015;\nconst generateLinearEasingPoints = (easing, duration) => {\n    let points = \"\";\n    const numPoints = Math.round(duration / resolution);\n    for (let i = 0; i < numPoints; i++) {\n        points += easing(progress(0, numPoints - 1, i)) + \", \";\n    }\n    return points.substring(0, points.length - 2);\n};\nconst convertEasing = (easing, duration) => {\n    if (isFunction(easing)) {\n        return supports.linearEasing()\n            ? `linear(${generateLinearEasingPoints(easing, duration)})`\n            : defaults.easing;\n    }\n    else {\n        return isCubicBezier(easing) ? cubicBezierAsString(easing) : easing;\n    }\n};\nconst cubicBezierAsString = ([a, b, c, d]) => `cubic-bezier(${a}, ${b}, ${c}, ${d})`;\n\nexport { convertEasing, cubicBezierAsString, generateLinearEasingPoints };\n"]},"metadata":{},"sourceType":"module"}