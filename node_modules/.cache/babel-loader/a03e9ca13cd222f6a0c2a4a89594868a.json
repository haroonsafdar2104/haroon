{"ast":null,"code":"import _toConsumableArray from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"transitionEnd\", \"transition\"];\nimport { complex } from 'style-value-types';\nimport { isNumericalString } from '../../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { getAnimatableNone } from '../dom/value-types/animatable-none.mjs';\nimport { findValueType } from '../dom/value-types/find.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\n\nfunction setMotionValue(visualElement, key, value) {\n  if (visualElement.hasValue(key)) {\n    visualElement.getValue(key).set(value);\n  } else {\n    visualElement.addValue(key, motionValue(value));\n  }\n}\n\nfunction setTarget(visualElement, definition) {\n  var resolved = resolveVariant(visualElement, definition);\n\n  var _ref = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {},\n      _ref$transitionEnd = _ref.transitionEnd,\n      transitionEnd = _ref$transitionEnd === void 0 ? {} : _ref$transitionEnd,\n      _ref$transition = _ref.transition,\n      transition = _ref$transition === void 0 ? {} : _ref$transition,\n      target = _objectWithoutProperties(_ref, _excluded);\n\n  target = _objectSpread(_objectSpread({}, target), transitionEnd);\n\n  for (var key in target) {\n    var value = resolveFinalValueInKeyframes(target[key]);\n    setMotionValue(visualElement, key, value);\n  }\n}\n\nfunction setVariants(visualElement, variantLabels) {\n  var reversedLabels = _toConsumableArray(variantLabels).reverse();\n\n  reversedLabels.forEach(function (key) {\n    var _a;\n\n    var variant = visualElement.getVariant(key);\n    variant && setTarget(visualElement, variant);\n    (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {\n      setVariants(child, variantLabels);\n    });\n  });\n}\n\nfunction setValues(visualElement, definition) {\n  if (Array.isArray(definition)) {\n    return setVariants(visualElement, definition);\n  } else if (typeof definition === \"string\") {\n    return setVariants(visualElement, [definition]);\n  } else {\n    setTarget(visualElement, definition);\n  }\n}\n\nfunction checkTargetForNewValues(visualElement, target, origin) {\n  var _a, _b;\n\n  var newValueKeys = Object.keys(target).filter(function (key) {\n    return !visualElement.hasValue(key);\n  });\n  var numNewValues = newValueKeys.length;\n  if (!numNewValues) return;\n\n  for (var i = 0; i < numNewValues; i++) {\n    var key = newValueKeys[i];\n    var targetValue = target[key];\n    var value = null;\n    /**\n     * If the target is a series of keyframes, we can use the first value\n     * in the array. If this first value is null, we'll still need to read from the DOM.\n     */\n\n    if (Array.isArray(targetValue)) {\n      value = targetValue[0];\n    }\n    /**\n     * If the target isn't keyframes, or the first keyframe was null, we need to\n     * first check if an origin value was explicitly defined in the transition as \"from\",\n     * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n     */\n\n\n    if (value === null) {\n      value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n    }\n    /**\n     * If value is still undefined or null, ignore it. Preferably this would throw,\n     * but this was causing issues in Framer.\n     */\n\n\n    if (value === undefined || value === null) continue;\n\n    if (typeof value === \"string\" && (isNumericalString(value) || isZeroValueString(value))) {\n      // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n      value = parseFloat(value);\n    } else if (!findValueType(value) && complex.test(targetValue)) {\n      value = getAnimatableNone(key, targetValue);\n    }\n\n    visualElement.addValue(key, motionValue(value));\n\n    if (origin[key] === undefined) {\n      origin[key] = value;\n    }\n\n    visualElement.setBaseTarget(key, value);\n  }\n}\n\nfunction getOriginFromTransition(key, transition) {\n  if (!transition) return;\n  var valueTransition = transition[key] || transition[\"default\"] || transition;\n  return valueTransition.from;\n}\n\nfunction getOrigin(target, transition, visualElement) {\n  var _a;\n\n  var origin = {};\n\n  for (var key in target) {\n    var transitionOrigin = getOriginFromTransition(key, transition);\n    origin[key] = transitionOrigin !== undefined ? transitionOrigin : (_a = visualElement.getValue(key)) === null || _a === void 0 ? void 0 : _a.get();\n  }\n\n  return origin;\n}\n\nexport { checkTargetForNewValues, getOrigin, getOriginFromTransition, setTarget, setValues };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/render/utils/setters.mjs"],"names":["complex","isNumericalString","isZeroValueString","resolveFinalValueInKeyframes","motionValue","getAnimatableNone","findValueType","resolveVariant","setMotionValue","visualElement","key","value","hasValue","getValue","set","addValue","setTarget","definition","resolved","makeTargetAnimatable","transitionEnd","transition","target","setVariants","variantLabels","reversedLabels","reverse","forEach","_a","variant","getVariant","variantChildren","child","setValues","Array","isArray","checkTargetForNewValues","origin","_b","newValueKeys","Object","keys","filter","numNewValues","length","i","targetValue","readValue","undefined","parseFloat","test","setBaseTarget","getOriginFromTransition","valueTransition","from","getOrigin","transitionOrigin","get"],"mappings":"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","sourcesContent":["import { complex } from 'style-value-types';\nimport { isNumericalString } from '../../utils/is-numerical-string.mjs';\nimport { isZeroValueString } from '../../utils/is-zero-value-string.mjs';\nimport { resolveFinalValueInKeyframes } from '../../utils/resolve-value.mjs';\nimport { motionValue } from '../../value/index.mjs';\nimport { getAnimatableNone } from '../dom/value-types/animatable-none.mjs';\nimport { findValueType } from '../dom/value-types/find.mjs';\nimport { resolveVariant } from './resolve-dynamic-variants.mjs';\n\n/**\n * Set VisualElement's MotionValue, creating a new MotionValue for it if\n * it doesn't exist.\n */\nfunction setMotionValue(visualElement, key, value) {\n    if (visualElement.hasValue(key)) {\n        visualElement.getValue(key).set(value);\n    }\n    else {\n        visualElement.addValue(key, motionValue(value));\n    }\n}\nfunction setTarget(visualElement, definition) {\n    const resolved = resolveVariant(visualElement, definition);\n    let { transitionEnd = {}, transition = {}, ...target } = resolved ? visualElement.makeTargetAnimatable(resolved, false) : {};\n    target = { ...target, ...transitionEnd };\n    for (const key in target) {\n        const value = resolveFinalValueInKeyframes(target[key]);\n        setMotionValue(visualElement, key, value);\n    }\n}\nfunction setVariants(visualElement, variantLabels) {\n    const reversedLabels = [...variantLabels].reverse();\n    reversedLabels.forEach((key) => {\n        var _a;\n        const variant = visualElement.getVariant(key);\n        variant && setTarget(visualElement, variant);\n        (_a = visualElement.variantChildren) === null || _a === void 0 ? void 0 : _a.forEach((child) => {\n            setVariants(child, variantLabels);\n        });\n    });\n}\nfunction setValues(visualElement, definition) {\n    if (Array.isArray(definition)) {\n        return setVariants(visualElement, definition);\n    }\n    else if (typeof definition === \"string\") {\n        return setVariants(visualElement, [definition]);\n    }\n    else {\n        setTarget(visualElement, definition);\n    }\n}\nfunction checkTargetForNewValues(visualElement, target, origin) {\n    var _a, _b;\n    const newValueKeys = Object.keys(target).filter((key) => !visualElement.hasValue(key));\n    const numNewValues = newValueKeys.length;\n    if (!numNewValues)\n        return;\n    for (let i = 0; i < numNewValues; i++) {\n        const key = newValueKeys[i];\n        const targetValue = target[key];\n        let value = null;\n        /**\n         * If the target is a series of keyframes, we can use the first value\n         * in the array. If this first value is null, we'll still need to read from the DOM.\n         */\n        if (Array.isArray(targetValue)) {\n            value = targetValue[0];\n        }\n        /**\n         * If the target isn't keyframes, or the first keyframe was null, we need to\n         * first check if an origin value was explicitly defined in the transition as \"from\",\n         * if not read the value from the DOM. As an absolute fallback, take the defined target value.\n         */\n        if (value === null) {\n            value = (_b = (_a = origin[key]) !== null && _a !== void 0 ? _a : visualElement.readValue(key)) !== null && _b !== void 0 ? _b : target[key];\n        }\n        /**\n         * If value is still undefined or null, ignore it. Preferably this would throw,\n         * but this was causing issues in Framer.\n         */\n        if (value === undefined || value === null)\n            continue;\n        if (typeof value === \"string\" &&\n            (isNumericalString(value) || isZeroValueString(value))) {\n            // If this is a number read as a string, ie \"0\" or \"200\", convert it to a number\n            value = parseFloat(value);\n        }\n        else if (!findValueType(value) && complex.test(targetValue)) {\n            value = getAnimatableNone(key, targetValue);\n        }\n        visualElement.addValue(key, motionValue(value));\n        if (origin[key] === undefined) {\n            origin[key] = value;\n        }\n        visualElement.setBaseTarget(key, value);\n    }\n}\nfunction getOriginFromTransition(key, transition) {\n    if (!transition)\n        return;\n    const valueTransition = transition[key] || transition[\"default\"] || transition;\n    return valueTransition.from;\n}\nfunction getOrigin(target, transition, visualElement) {\n    var _a;\n    const origin = {};\n    for (const key in target) {\n        const transitionOrigin = getOriginFromTransition(key, transition);\n        origin[key] =\n            transitionOrigin !== undefined\n                ? transitionOrigin\n                : (_a = visualElement.getValue(key)) === null || _a === void 0 ? void 0 : _a.get();\n    }\n    return origin;\n}\n\nexport { checkTargetForNewValues, getOrigin, getOriginFromTransition, setTarget, setValues };\n"]},"metadata":{},"sourceType":"module"}