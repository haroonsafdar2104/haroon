{"ast":null,"code":"import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n  constructor() {\n    this.subscriptions = [];\n  }\n\n  add(handler) {\n    addUniqueItem(this.subscriptions, handler);\n    return () => removeItem(this.subscriptions, handler);\n  }\n\n  notify(a, b, c) {\n    const numSubscriptions = this.subscriptions.length;\n    if (!numSubscriptions) return;\n\n    if (numSubscriptions === 1) {\n      /**\n       * If there's only a single handler we can just call it without invoking a loop.\n       */\n      this.subscriptions[0](a, b, c);\n    } else {\n      for (let i = 0; i < numSubscriptions; i++) {\n        /**\n         * Check whether the handler exists before firing as it's possible\n         * the subscriptions were modified during this loop running.\n         */\n        const handler = this.subscriptions[i];\n        handler && handler(a, b, c);\n      }\n    }\n  }\n\n  getSize() {\n    return this.subscriptions.length;\n  }\n\n  clear() {\n    this.subscriptions.length = 0;\n  }\n\n}\n\nexport { SubscriptionManager };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/utils/subscription-manager.mjs"],"names":["addUniqueItem","removeItem","SubscriptionManager","constructor","subscriptions","add","handler","notify","a","b","c","numSubscriptions","length","i","getSize","clear"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,UAAxB,QAA0C,aAA1C;;AAEA,MAAMC,mBAAN,CAA0B;AACtBC,EAAAA,WAAW,GAAG;AACV,SAAKC,aAAL,GAAqB,EAArB;AACH;;AACDC,EAAAA,GAAG,CAACC,OAAD,EAAU;AACTN,IAAAA,aAAa,CAAC,KAAKI,aAAN,EAAqBE,OAArB,CAAb;AACA,WAAO,MAAML,UAAU,CAAC,KAAKG,aAAN,EAAqBE,OAArB,CAAvB;AACH;;AACDC,EAAAA,MAAM,CAACC,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAU;AACZ,UAAMC,gBAAgB,GAAG,KAAKP,aAAL,CAAmBQ,MAA5C;AACA,QAAI,CAACD,gBAAL,EACI;;AACJ,QAAIA,gBAAgB,KAAK,CAAzB,EAA4B;AACxB;AACZ;AACA;AACY,WAAKP,aAAL,CAAmB,CAAnB,EAAsBI,CAAtB,EAAyBC,CAAzB,EAA4BC,CAA5B;AACH,KALD,MAMK;AACD,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,gBAApB,EAAsCE,CAAC,EAAvC,EAA2C;AACvC;AAChB;AACA;AACA;AACgB,cAAMP,OAAO,GAAG,KAAKF,aAAL,CAAmBS,CAAnB,CAAhB;AACAP,QAAAA,OAAO,IAAIA,OAAO,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,CAAlB;AACH;AACJ;AACJ;;AACDI,EAAAA,OAAO,GAAG;AACN,WAAO,KAAKV,aAAL,CAAmBQ,MAA1B;AACH;;AACDG,EAAAA,KAAK,GAAG;AACJ,SAAKX,aAAL,CAAmBQ,MAAnB,GAA4B,CAA5B;AACH;;AAlCqB;;AAqC1B,SAASV,mBAAT","sourcesContent":["import { addUniqueItem, removeItem } from './array.mjs';\n\nclass SubscriptionManager {\n    constructor() {\n        this.subscriptions = [];\n    }\n    add(handler) {\n        addUniqueItem(this.subscriptions, handler);\n        return () => removeItem(this.subscriptions, handler);\n    }\n    notify(a, b, c) {\n        const numSubscriptions = this.subscriptions.length;\n        if (!numSubscriptions)\n            return;\n        if (numSubscriptions === 1) {\n            /**\n             * If there's only a single handler we can just call it without invoking a loop.\n             */\n            this.subscriptions[0](a, b, c);\n        }\n        else {\n            for (let i = 0; i < numSubscriptions; i++) {\n                /**\n                 * Check whether the handler exists before firing as it's possible\n                 * the subscriptions were modified during this loop running.\n                 */\n                const handler = this.subscriptions[i];\n                handler && handler(a, b, c);\n            }\n        }\n    }\n    getSize() {\n        return this.subscriptions.length;\n    }\n    clear() {\n        this.subscriptions.length = 0;\n    }\n}\n\nexport { SubscriptionManager };\n"]},"metadata":{},"sourceType":"module"}