{"ast":null,"code":"import _classCallCheck from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { useConstant } from '../../utils/use-constant.mjs';\n/**\n * Can manually trigger a drag gesture on one or more `drag`-enabled `motion` components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\n\nvar DragControls = /*#__PURE__*/function () {\n  function DragControls() {\n    _classCallCheck(this, DragControls);\n\n    this.componentControls = new Set();\n  }\n  /**\n   * Subscribe a component's internal `VisualElementDragControls` to the user-facing API.\n   *\n   * @internal\n   */\n\n\n  _createClass(DragControls, [{\n    key: \"subscribe\",\n    value: function subscribe(controls) {\n      var _this = this;\n\n      this.componentControls.add(controls);\n      return function () {\n        return _this.componentControls.delete(controls);\n      };\n    }\n    /**\n     * Start a drag gesture on every `motion` component that has this set of drag controls\n     * passed into it via the `dragControls` prop.\n     *\n     * ```jsx\n     * dragControls.start(e, {\n     *   snapToCursor: true\n     * })\n     * ```\n     *\n     * @param event - PointerEvent\n     * @param options - Options\n     *\n     * @public\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(event, options) {\n      this.componentControls.forEach(function (controls) {\n        controls.start(event.nativeEvent || event, options);\n      });\n    }\n  }]);\n\n  return DragControls;\n}();\n\nvar createDragControls = function createDragControls() {\n  return new DragControls();\n};\n/**\n * Usually, dragging is initiated by pressing down on a `motion` component with a `drag` prop\n * and moving it. For some use-cases, for instance clicking at an arbitrary point on a video scrubber, we\n * might want to initiate that dragging from a different component than the draggable one.\n *\n * By creating a `dragControls` using the `useDragControls` hook, we can pass this into\n * the draggable component's `dragControls` prop. It exposes a `start` method\n * that can start dragging from pointer events on other components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\n\n\nfunction useDragControls() {\n  return useConstant(createDragControls);\n}\n\nexport { DragControls, useDragControls };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/gestures/drag/use-drag-controls.mjs"],"names":["useConstant","DragControls","componentControls","Set","controls","add","delete","event","options","forEach","start","nativeEvent","createDragControls","useDragControls"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,8BAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,Y;AACF,0BAAc;AAAA;;AACV,SAAKC,iBAAL,GAAyB,IAAIC,GAAJ,EAAzB;AACH;AACD;AACJ;AACA;AACA;AACA;;;;;WACI,mBAAUC,QAAV,EAAoB;AAAA;;AAChB,WAAKF,iBAAL,CAAuBG,GAAvB,CAA2BD,QAA3B;AACA,aAAO;AAAA,eAAM,KAAI,CAACF,iBAAL,CAAuBI,MAAvB,CAA8BF,QAA9B,CAAN;AAAA,OAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;WACI,eAAMG,KAAN,EAAaC,OAAb,EAAsB;AAClB,WAAKN,iBAAL,CAAuBO,OAAvB,CAA+B,UAACL,QAAD,EAAc;AACzCA,QAAAA,QAAQ,CAACM,KAAT,CAAeH,KAAK,CAACI,WAAN,IAAqBJ,KAApC,EAA2CC,OAA3C;AACH,OAFD;AAGH;;;;;;AAEL,IAAMI,kBAAkB,GAAG,SAArBA,kBAAqB;AAAA,SAAM,IAAIX,YAAJ,EAAN;AAAA,CAA3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASY,eAAT,GAA2B;AACvB,SAAOb,WAAW,CAACY,kBAAD,CAAlB;AACH;;AAED,SAASX,YAAT,EAAuBY,eAAvB","sourcesContent":["import { useConstant } from '../../utils/use-constant.mjs';\n\n/**\n * Can manually trigger a drag gesture on one or more `drag`-enabled `motion` components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\nclass DragControls {\n    constructor() {\n        this.componentControls = new Set();\n    }\n    /**\n     * Subscribe a component's internal `VisualElementDragControls` to the user-facing API.\n     *\n     * @internal\n     */\n    subscribe(controls) {\n        this.componentControls.add(controls);\n        return () => this.componentControls.delete(controls);\n    }\n    /**\n     * Start a drag gesture on every `motion` component that has this set of drag controls\n     * passed into it via the `dragControls` prop.\n     *\n     * ```jsx\n     * dragControls.start(e, {\n     *   snapToCursor: true\n     * })\n     * ```\n     *\n     * @param event - PointerEvent\n     * @param options - Options\n     *\n     * @public\n     */\n    start(event, options) {\n        this.componentControls.forEach((controls) => {\n            controls.start(event.nativeEvent || event, options);\n        });\n    }\n}\nconst createDragControls = () => new DragControls();\n/**\n * Usually, dragging is initiated by pressing down on a `motion` component with a `drag` prop\n * and moving it. For some use-cases, for instance clicking at an arbitrary point on a video scrubber, we\n * might want to initiate that dragging from a different component than the draggable one.\n *\n * By creating a `dragControls` using the `useDragControls` hook, we can pass this into\n * the draggable component's `dragControls` prop. It exposes a `start` method\n * that can start dragging from pointer events on other components.\n *\n * ```jsx\n * const dragControls = useDragControls()\n *\n * function startDrag(event) {\n *   dragControls.start(event, { snapToCursor: true })\n * }\n *\n * return (\n *   <>\n *     <div onPointerDown={startDrag} />\n *     <motion.div drag=\"x\" dragControls={dragControls} />\n *   </>\n * )\n * ```\n *\n * @public\n */\nfunction useDragControls() {\n    return useConstant(createDragControls);\n}\n\nexport { DragControls, useDragControls };\n"]},"metadata":{},"sourceType":"module"}