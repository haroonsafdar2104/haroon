{"ast":null,"code":"import { __read, __spreadArray } from \"tslib\";\nimport { isScheduler } from '../util/isScheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { observeOn } from '../operators/observeOn';\nimport { AsyncSubject } from '../AsyncSubject';\nexport function bindCallbackInternals(isNodeStyle, callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return bindCallbackInternals(isNodeStyle, callbackFunc, scheduler).apply(this, args).pipe(mapOneOrManyArgs(resultSelector));\n      };\n    }\n  }\n\n  if (scheduler) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return bindCallbackInternals(isNodeStyle, callbackFunc).apply(this, args).pipe(subscribeOn(scheduler), observeOn(scheduler));\n    };\n  }\n\n  return function () {\n    var _this = this;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var subject = new AsyncSubject();\n    var uninitialized = true;\n    return new Observable(function (subscriber) {\n      var subs = subject.subscribe(subscriber);\n\n      if (uninitialized) {\n        uninitialized = false;\n        var isAsync_1 = false;\n        var isComplete_1 = false;\n        callbackFunc.apply(_this, __spreadArray(__spreadArray([], __read(args)), [function () {\n          var results = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            results[_i] = arguments[_i];\n          }\n\n          if (isNodeStyle) {\n            var err = results.shift();\n\n            if (err != null) {\n              subject.error(err);\n              return;\n            }\n          }\n\n          subject.next(1 < results.length ? results : results[0]);\n          isComplete_1 = true;\n\n          if (isAsync_1) {\n            subject.complete();\n          }\n        }]));\n\n        if (isComplete_1) {\n          subject.complete();\n        }\n\n        isAsync_1 = true;\n      }\n\n      return subs;\n    });\n  };\n}","map":{"version":3,"mappings":";AACA,SAASA,WAAT,QAA4B,qBAA5B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,WAAT,QAA4B,0BAA5B;AACA,SAASC,gBAAT,QAAiC,0BAAjC;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,OAAM,SAAUC,qBAAV,CACJC,WADI,EAEJC,YAFI,EAGJC,cAHI,EAIJC,SAJI,EAIqB;AAEzB,MAAID,cAAJ,EAAoB;AAClB,QAAIT,WAAW,CAACS,cAAD,CAAf,EAAiC;AAC/BC,eAAS,GAAGD,cAAZ;AACD,KAFD,MAEO;AAEL,aAAO;AAAqB;;aAAA,yCAAc;AAAdE;;;AAC1B,eAAQL,qBAAqB,CAACC,WAAD,EAAcC,YAAd,EAA4BE,SAA5B,CAArB,CACLE,KADK,CACC,IADD,EACOD,IADP,EAELE,IAFK,CAEAV,gBAAgB,CAACM,cAAD,CAFhB,CAAR;AAGD,OAJD;AAKD;AACF;;AAID,MAAIC,SAAJ,EAAe;AACb,WAAO;AAAqB;;WAAA,yCAAc;AAAdC;;;AAC1B,aAAQL,qBAAqB,CAACC,WAAD,EAAcC,YAAd,CAArB,CACLI,KADK,CACC,IADD,EACOD,IADP,EAELE,IAFK,CAEAX,WAAW,CAACQ,SAAD,CAFX,EAEyBN,SAAS,CAACM,SAAD,CAFlC,CAAR;AAGD,KAJD;AAKD;;AAED,SAAO;AAAA;;AAAqB;;SAAA,yCAAc;AAAdC;;;AAG1B,QAAMG,OAAO,GAAG,IAAIT,YAAJ,EAAhB;AAGA,QAAIU,aAAa,GAAG,IAApB;AACA,WAAO,IAAId,UAAJ,CAAe,UAACe,UAAD,EAAW;AAE/B,UAAMC,IAAI,GAAGH,OAAO,CAACI,SAAR,CAAkBF,UAAlB,CAAb;;AAEA,UAAID,aAAJ,EAAmB;AACjBA,qBAAa,GAAG,KAAhB;AAMA,YAAII,SAAO,GAAG,KAAd;AAGA,YAAIC,YAAU,GAAG,KAAjB;AAKAZ,oBAAY,CAACI,KAAb,CAEES,KAFF,EAEMC,uCAGCX,IAHD,IAGK,CAEP;AAAC;;eAAA,yCAAiB;AAAjBY;;;AACC,cAAIhB,WAAJ,EAAiB;AAIf,gBAAMiB,GAAG,GAAGD,OAAO,CAACE,KAAR,EAAZ;;AACA,gBAAID,GAAG,IAAI,IAAX,EAAiB;AACfV,qBAAO,CAACY,KAAR,CAAcF,GAAd;AAGA;AACD;AACF;;AAKDV,iBAAO,CAACa,IAAR,CAAa,IAAIJ,OAAO,CAACK,MAAZ,GAAqBL,OAArB,GAA+BA,OAAO,CAAC,CAAD,CAAnD;AAGAH,sBAAU,GAAG,IAAb;;AAMA,cAAID,SAAJ,EAAa;AACXL,mBAAO,CAACe,QAAR;AACD;AACF,SA/BM,CAHL,CAFN;;AA0CA,YAAIT,YAAJ,EAAgB;AACdN,iBAAO,CAACe,QAAR;AACD;;AAIDV,iBAAO,GAAG,IAAV;AACD;;AAGD,aAAOF,IAAP;AACD,KAxEM,CAAP;AAyED,GAhFD;AAiFD","names":["isScheduler","Observable","subscribeOn","mapOneOrManyArgs","observeOn","AsyncSubject","bindCallbackInternals","isNodeStyle","callbackFunc","resultSelector","scheduler","args","apply","pipe","subject","uninitialized","subscriber","subs","subscribe","isAsync_1","isComplete_1","_this","__spreadArray","results","err","shift","error","next","length","complete"],"sources":["D:\\Web Data\\Personal-Website\\client\\node_modules\\rxjs\\src\\internal\\observable\\bindCallbackInternals.ts"],"sourcesContent":["import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { observeOn } from '../operators/observeOn';\nimport { AsyncSubject } from '../AsyncSubject';\n\nexport function bindCallbackInternals(\n  isNodeStyle: boolean,\n  callbackFunc: any,\n  resultSelector?: any,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<unknown> {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      // The user provided a result selector.\n      return function (this: any, ...args: any[]) {\n        return (bindCallbackInternals(isNodeStyle, callbackFunc, scheduler) as any)\n          .apply(this, args)\n          .pipe(mapOneOrManyArgs(resultSelector as any));\n      };\n    }\n  }\n\n  // If a scheduler was passed, use our `subscribeOn` and `observeOn` operators\n  // to compose that behavior for the user.\n  if (scheduler) {\n    return function (this: any, ...args: any[]) {\n      return (bindCallbackInternals(isNodeStyle, callbackFunc) as any)\n        .apply(this, args)\n        .pipe(subscribeOn(scheduler!), observeOn(scheduler!));\n    };\n  }\n\n  return function (this: any, ...args: any[]): Observable<any> {\n    // We're using AsyncSubject, because it emits when it completes,\n    // and it will play the value to all late-arriving subscribers.\n    const subject = new AsyncSubject<any>();\n\n    // If this is true, then we haven't called our function yet.\n    let uninitialized = true;\n    return new Observable((subscriber) => {\n      // Add our subscriber to the subject.\n      const subs = subject.subscribe(subscriber);\n\n      if (uninitialized) {\n        uninitialized = false;\n        // We're going to execute the bound function\n        // This bit is to signal that we are hitting the callback asychronously.\n        // Because we don't have any anti-\"Zalgo\" gaurantees with whatever\n        // function we are handed, we use this bit to figure out whether or not\n        // we are getting hit in a callback synchronously during our call.\n        let isAsync = false;\n\n        // This is used to signal that the callback completed synchronously.\n        let isComplete = false;\n\n        // Call our function that has a callback. If at any time during this\n        // call, an error is thrown, it will be caught by the Observable\n        // subscription process and sent to the consumer.\n        callbackFunc.apply(\n          // Pass the appropriate `this` context.\n          this,\n          [\n            // Pass the arguments.\n            ...args,\n            // And our callback handler.\n            (...results: any[]) => {\n              if (isNodeStyle) {\n                // If this is a node callback, shift the first value off of the\n                // results and check it, as it is the error argument. By shifting,\n                // we leave only the argument(s) we want to pass to the consumer.\n                const err = results.shift();\n                if (err != null) {\n                  subject.error(err);\n                  // If we've errored, we can stop processing this function\n                  // as there's nothing else to do. Just return to escape.\n                  return;\n                }\n              }\n              // If we have one argument, notify the consumer\n              // of it as a single value, otherwise, if there's more than one, pass\n              // them as an array. Note that if there are no arguments, `undefined`\n              // will be emitted.\n              subject.next(1 < results.length ? results : results[0]);\n              // Flip this flag, so we know we can complete it in the synchronous\n              // case below.\n              isComplete = true;\n              // If we're not asynchronous, we need to defer the `complete` call\n              // until after the call to the function is over. This is because an\n              // error could be thrown in the function after it calls our callback,\n              // and if that is the case, if we complete here, we are unable to notify\n              // the consumer than an error occured.\n              if (isAsync) {\n                subject.complete();\n              }\n            },\n          ]\n        );\n        // If we flipped `isComplete` during the call, we resolved synchronously,\n        // notify complete, because we skipped it in the callback to wait\n        // to make sure there were no errors during the call.\n        if (isComplete) {\n          subject.complete();\n        }\n\n        // We're no longer synchronous. If the callback is called at this point\n        // we can notify complete on the spot.\n        isAsync = true;\n      }\n\n      // Return the subscription fron adding our subscriber to the subject.\n      return subs;\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}