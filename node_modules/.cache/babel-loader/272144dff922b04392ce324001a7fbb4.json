{"ast":null,"code":"import _defineProperty from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nexport default function Grid(_ref) {\n  var swiper = _ref.swiper,\n      extendParams = _ref.extendParams;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  var slidesNumberEvenToRows;\n  var slidesPerRow;\n  var numFullColumns;\n\n  var initSlides = function initSlides(slidesLength) {\n    var slidesPerView = swiper.params.slidesPerView;\n    var _swiper$params$grid = swiper.params.grid,\n        rows = _swiper$params$grid.rows,\n        fill = _swiper$params$grid.fill;\n    slidesPerRow = slidesNumberEvenToRows / rows;\n    numFullColumns = Math.floor(slidesLength / rows);\n\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n  };\n\n  var updateSlide = function updateSlide(i, slide, slidesLength, getDirectionLabel) {\n    var _swiper$params = swiper.params,\n        slidesPerGroup = _swiper$params.slidesPerGroup,\n        spaceBetween = _swiper$params.spaceBetween;\n    var _swiper$params$grid2 = swiper.params.grid,\n        rows = _swiper$params$grid2.rows,\n        fill = _swiper$params$grid2.fill; // Set slides order\n\n    var newSlideOrderIndex;\n    var column;\n    var row;\n\n    if (fill === 'row' && slidesPerGroup > 1) {\n      var groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      var slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      var columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.css({\n        '-webkit-order': newSlideOrderIndex,\n        order: newSlideOrderIndex\n      });\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n\n    slide.css(getDirectionLabel('margin-top'), row !== 0 ? spaceBetween && \"\".concat(spaceBetween, \"px\") : '');\n  };\n\n  var updateWrapperSize = function updateWrapperSize(slideSize, snapGrid, getDirectionLabel) {\n    var _swiper$params2 = swiper.params,\n        spaceBetween = _swiper$params2.spaceBetween,\n        centeredSlides = _swiper$params2.centeredSlides,\n        roundLengths = _swiper$params2.roundLengths;\n    var rows = swiper.params.grid.rows;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.$wrapperEl.css(_defineProperty({}, getDirectionLabel('width'), \"\".concat(swiper.virtualSize + spaceBetween, \"px\")));\n\n    if (centeredSlides) {\n      snapGrid.splice(0, snapGrid.length);\n      var newSlidesGrid = [];\n\n      for (var i = 0; i < snapGrid.length; i += 1) {\n        var slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n\n      snapGrid.push.apply(snapGrid, newSlidesGrid);\n    }\n  };\n\n  swiper.grid = {\n    initSlides: initSlides,\n    updateSlide: updateSlide,\n    updateWrapperSize: updateWrapperSize\n  };\n}","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/swiper/modules/grid/grid.js"],"names":["Grid","_ref","swiper","extendParams","grid","rows","fill","slidesNumberEvenToRows","slidesPerRow","numFullColumns","initSlides","slidesLength","slidesPerView","params","Math","floor","ceil","max","updateSlide","i","slide","getDirectionLabel","slidesPerGroup","spaceBetween","newSlideOrderIndex","column","row","groupIndex","slideIndexInGroup","columnsInGroup","min","css","order","updateWrapperSize","slideSize","snapGrid","centeredSlides","roundLengths","virtualSize","$wrapperEl","splice","length","newSlidesGrid","slidesGridItem","push"],"mappings":"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","sourcesContent":["export default function Grid(_ref) {\n  let {\n    swiper,\n    extendParams\n  } = _ref;\n  extendParams({\n    grid: {\n      rows: 1,\n      fill: 'column'\n    }\n  });\n  let slidesNumberEvenToRows;\n  let slidesPerRow;\n  let numFullColumns;\n\n  const initSlides = slidesLength => {\n    const {\n      slidesPerView\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid;\n    slidesPerRow = slidesNumberEvenToRows / rows;\n    numFullColumns = Math.floor(slidesLength / rows);\n\n    if (Math.floor(slidesLength / rows) === slidesLength / rows) {\n      slidesNumberEvenToRows = slidesLength;\n    } else {\n      slidesNumberEvenToRows = Math.ceil(slidesLength / rows) * rows;\n    }\n\n    if (slidesPerView !== 'auto' && fill === 'row') {\n      slidesNumberEvenToRows = Math.max(slidesNumberEvenToRows, slidesPerView * rows);\n    }\n  };\n\n  const updateSlide = (i, slide, slidesLength, getDirectionLabel) => {\n    const {\n      slidesPerGroup,\n      spaceBetween\n    } = swiper.params;\n    const {\n      rows,\n      fill\n    } = swiper.params.grid; // Set slides order\n\n    let newSlideOrderIndex;\n    let column;\n    let row;\n\n    if (fill === 'row' && slidesPerGroup > 1) {\n      const groupIndex = Math.floor(i / (slidesPerGroup * rows));\n      const slideIndexInGroup = i - rows * slidesPerGroup * groupIndex;\n      const columnsInGroup = groupIndex === 0 ? slidesPerGroup : Math.min(Math.ceil((slidesLength - groupIndex * rows * slidesPerGroup) / rows), slidesPerGroup);\n      row = Math.floor(slideIndexInGroup / columnsInGroup);\n      column = slideIndexInGroup - row * columnsInGroup + groupIndex * slidesPerGroup;\n      newSlideOrderIndex = column + row * slidesNumberEvenToRows / rows;\n      slide.css({\n        '-webkit-order': newSlideOrderIndex,\n        order: newSlideOrderIndex\n      });\n    } else if (fill === 'column') {\n      column = Math.floor(i / rows);\n      row = i - column * rows;\n\n      if (column > numFullColumns || column === numFullColumns && row === rows - 1) {\n        row += 1;\n\n        if (row >= rows) {\n          row = 0;\n          column += 1;\n        }\n      }\n    } else {\n      row = Math.floor(i / slidesPerRow);\n      column = i - row * slidesPerRow;\n    }\n\n    slide.css(getDirectionLabel('margin-top'), row !== 0 ? spaceBetween && `${spaceBetween}px` : '');\n  };\n\n  const updateWrapperSize = (slideSize, snapGrid, getDirectionLabel) => {\n    const {\n      spaceBetween,\n      centeredSlides,\n      roundLengths\n    } = swiper.params;\n    const {\n      rows\n    } = swiper.params.grid;\n    swiper.virtualSize = (slideSize + spaceBetween) * slidesNumberEvenToRows;\n    swiper.virtualSize = Math.ceil(swiper.virtualSize / rows) - spaceBetween;\n    swiper.$wrapperEl.css({\n      [getDirectionLabel('width')]: `${swiper.virtualSize + spaceBetween}px`\n    });\n\n    if (centeredSlides) {\n      snapGrid.splice(0, snapGrid.length);\n      const newSlidesGrid = [];\n\n      for (let i = 0; i < snapGrid.length; i += 1) {\n        let slidesGridItem = snapGrid[i];\n        if (roundLengths) slidesGridItem = Math.floor(slidesGridItem);\n        if (snapGrid[i] < swiper.virtualSize + snapGrid[0]) newSlidesGrid.push(slidesGridItem);\n      }\n\n      snapGrid.push(...newSlidesGrid);\n    }\n  };\n\n  swiper.grid = {\n    initSlides,\n    updateSlide,\n    updateWrapperSize\n  };\n}"]},"metadata":{},"sourceType":"module"}