{"ast":null,"code":"import _slicedToArray from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport sync from 'framesync';\nimport React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\nvar MeasureLayoutWithContext = /*#__PURE__*/function (_React__default$Compo) {\n  _inherits(MeasureLayoutWithContext, _React__default$Compo);\n\n  var _super = _createSuper(MeasureLayoutWithContext);\n\n  function MeasureLayoutWithContext() {\n    _classCallCheck(this, MeasureLayoutWithContext);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MeasureLayoutWithContext, [{\n    key: \"componentDidMount\",\n    value:\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    function componentDidMount() {\n      var _this = this;\n\n      var _this$props = this.props,\n          visualElement = _this$props.visualElement,\n          layoutGroup = _this$props.layoutGroup,\n          switchLayoutGroup = _this$props.switchLayoutGroup,\n          layoutId = _this$props.layoutId;\n      var projection = visualElement.projection;\n      addScaleCorrector(defaultScaleCorrectors);\n\n      if (projection) {\n        if (layoutGroup.group) layoutGroup.group.add(projection);\n\n        if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n          switchLayoutGroup.register(projection);\n        }\n\n        projection.root.didUpdate();\n        projection.addEventListener(\"animationComplete\", function () {\n          _this.safeToRemove();\n        });\n        projection.setOptions(_objectSpread(_objectSpread({}, projection.options), {}, {\n          onExitComplete: function onExitComplete() {\n            return _this.safeToRemove();\n          }\n        }));\n      }\n\n      globalProjectionState.hasEverUpdated = true;\n    }\n  }, {\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps) {\n      var _this2 = this;\n\n      var _this$props2 = this.props,\n          layoutDependency = _this$props2.layoutDependency,\n          visualElement = _this$props2.visualElement,\n          drag = _this$props2.drag,\n          isPresent = _this$props2.isPresent;\n      var projection = visualElement.projection;\n      if (!projection) return null;\n      /**\n       * TODO: We use this data in relegate to determine whether to\n       * promote a previous element. There's no guarantee its presence data\n       * will have updated by this point - if a bug like this arises it will\n       * have to be that we markForRelegation and then find a new lead some other way,\n       * perhaps in didUpdate\n       */\n\n      projection.isPresent = isPresent;\n\n      if (drag || prevProps.layoutDependency !== layoutDependency || layoutDependency === undefined) {\n        projection.willUpdate();\n      } else {\n        this.safeToRemove();\n      }\n\n      if (prevProps.isPresent !== isPresent) {\n        if (isPresent) {\n          projection.promote();\n        } else if (!projection.relegate()) {\n          /**\n           * If there's another stack member taking over from this one,\n           * it's in charge of the exit animation and therefore should\n           * be in charge of the safe to remove. Otherwise we call it here.\n           */\n          sync.postRender(function () {\n            var _a;\n\n            if (!((_a = projection.getStack()) === null || _a === void 0 ? void 0 : _a.members.length)) {\n              _this2.safeToRemove();\n            }\n          });\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var projection = this.props.visualElement.projection;\n\n      if (projection) {\n        projection.root.didUpdate();\n\n        if (!projection.currentAnimation && projection.isLead()) {\n          this.safeToRemove();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props3 = this.props,\n          visualElement = _this$props3.visualElement,\n          layoutGroup = _this$props3.layoutGroup,\n          promoteContext = _this$props3.switchLayoutGroup;\n      var projection = visualElement.projection;\n\n      if (projection) {\n        projection.scheduleCheckAfterUnmount();\n        if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group) layoutGroup.group.remove(projection);\n        if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister) promoteContext.deregister(projection);\n      }\n    }\n  }, {\n    key: \"safeToRemove\",\n    value: function safeToRemove() {\n      var safeToRemove = this.props.safeToRemove;\n      safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return MeasureLayoutWithContext;\n}(React__default.Component);\n\nfunction MeasureLayout(props) {\n  var _usePresence = usePresence(),\n      _usePresence2 = _slicedToArray(_usePresence, 2),\n      isPresent = _usePresence2[0],\n      safeToRemove = _usePresence2[1];\n\n  var layoutGroup = useContext(LayoutGroupContext);\n  return React__default.createElement(MeasureLayoutWithContext, _objectSpread(_objectSpread({}, props), {}, {\n    layoutGroup: layoutGroup,\n    switchLayoutGroup: useContext(SwitchLayoutGroupContext),\n    isPresent: isPresent,\n    safeToRemove: safeToRemove\n  }));\n}\n\nvar defaultScaleCorrectors = {\n  borderRadius: _objectSpread(_objectSpread({}, correctBorderRadius), {}, {\n    applyTo: [\"borderTopLeftRadius\", \"borderTopRightRadius\", \"borderBottomLeftRadius\", \"borderBottomRightRadius\"]\n  }),\n  borderTopLeftRadius: correctBorderRadius,\n  borderTopRightRadius: correctBorderRadius,\n  borderBottomLeftRadius: correctBorderRadius,\n  borderBottomRightRadius: correctBorderRadius,\n  boxShadow: correctBoxShadow\n};\nexport { MeasureLayout };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.mjs"],"names":["sync","React__default","useContext","usePresence","LayoutGroupContext","SwitchLayoutGroupContext","globalProjectionState","correctBorderRadius","correctBoxShadow","addScaleCorrector","MeasureLayoutWithContext","props","visualElement","layoutGroup","switchLayoutGroup","layoutId","projection","defaultScaleCorrectors","group","add","register","root","didUpdate","addEventListener","safeToRemove","setOptions","options","onExitComplete","hasEverUpdated","prevProps","layoutDependency","drag","isPresent","undefined","willUpdate","promote","relegate","postRender","_a","getStack","members","length","currentAnimation","isLead","promoteContext","scheduleCheckAfterUnmount","remove","deregister","Component","MeasureLayout","createElement","borderRadius","applyTo","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","boxShadow"],"mappings":"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","sourcesContent":["import sync from 'framesync';\nimport React__default, { useContext } from 'react';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.mjs';\nimport { LayoutGroupContext } from '../../../context/LayoutGroupContext.mjs';\nimport { SwitchLayoutGroupContext } from '../../../context/SwitchLayoutGroupContext.mjs';\nimport { globalProjectionState } from '../../../projection/node/state.mjs';\nimport { correctBorderRadius } from '../../../projection/styles/scale-border-radius.mjs';\nimport { correctBoxShadow } from '../../../projection/styles/scale-box-shadow.mjs';\nimport { addScaleCorrector } from '../../../projection/styles/scale-correction.mjs';\n\nclass MeasureLayoutWithContext extends React__default.Component {\n    /**\n     * This only mounts projection nodes for components that\n     * need measuring, we might want to do it for all components\n     * in order to incorporate transforms\n     */\n    componentDidMount() {\n        const { visualElement, layoutGroup, switchLayoutGroup, layoutId } = this.props;\n        const { projection } = visualElement;\n        addScaleCorrector(defaultScaleCorrectors);\n        if (projection) {\n            if (layoutGroup.group)\n                layoutGroup.group.add(projection);\n            if (switchLayoutGroup && switchLayoutGroup.register && layoutId) {\n                switchLayoutGroup.register(projection);\n            }\n            projection.root.didUpdate();\n            projection.addEventListener(\"animationComplete\", () => {\n                this.safeToRemove();\n            });\n            projection.setOptions({\n                ...projection.options,\n                onExitComplete: () => this.safeToRemove(),\n            });\n        }\n        globalProjectionState.hasEverUpdated = true;\n    }\n    getSnapshotBeforeUpdate(prevProps) {\n        const { layoutDependency, visualElement, drag, isPresent } = this.props;\n        const projection = visualElement.projection;\n        if (!projection)\n            return null;\n        /**\n         * TODO: We use this data in relegate to determine whether to\n         * promote a previous element. There's no guarantee its presence data\n         * will have updated by this point - if a bug like this arises it will\n         * have to be that we markForRelegation and then find a new lead some other way,\n         * perhaps in didUpdate\n         */\n        projection.isPresent = isPresent;\n        if (drag ||\n            prevProps.layoutDependency !== layoutDependency ||\n            layoutDependency === undefined) {\n            projection.willUpdate();\n        }\n        else {\n            this.safeToRemove();\n        }\n        if (prevProps.isPresent !== isPresent) {\n            if (isPresent) {\n                projection.promote();\n            }\n            else if (!projection.relegate()) {\n                /**\n                 * If there's another stack member taking over from this one,\n                 * it's in charge of the exit animation and therefore should\n                 * be in charge of the safe to remove. Otherwise we call it here.\n                 */\n                sync.postRender(() => {\n                    var _a;\n                    if (!((_a = projection.getStack()) === null || _a === void 0 ? void 0 : _a.members.length)) {\n                        this.safeToRemove();\n                    }\n                });\n            }\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        const { projection } = this.props.visualElement;\n        if (projection) {\n            projection.root.didUpdate();\n            if (!projection.currentAnimation && projection.isLead()) {\n                this.safeToRemove();\n            }\n        }\n    }\n    componentWillUnmount() {\n        const { visualElement, layoutGroup, switchLayoutGroup: promoteContext, } = this.props;\n        const { projection } = visualElement;\n        if (projection) {\n            projection.scheduleCheckAfterUnmount();\n            if (layoutGroup === null || layoutGroup === void 0 ? void 0 : layoutGroup.group)\n                layoutGroup.group.remove(projection);\n            if (promoteContext === null || promoteContext === void 0 ? void 0 : promoteContext.deregister)\n                promoteContext.deregister(projection);\n        }\n    }\n    safeToRemove() {\n        const { safeToRemove } = this.props;\n        safeToRemove === null || safeToRemove === void 0 ? void 0 : safeToRemove();\n    }\n    render() {\n        return null;\n    }\n}\nfunction MeasureLayout(props) {\n    const [isPresent, safeToRemove] = usePresence();\n    const layoutGroup = useContext(LayoutGroupContext);\n    return (React__default.createElement(MeasureLayoutWithContext, { ...props, layoutGroup: layoutGroup, switchLayoutGroup: useContext(SwitchLayoutGroupContext), isPresent: isPresent, safeToRemove: safeToRemove }));\n}\nconst defaultScaleCorrectors = {\n    borderRadius: {\n        ...correctBorderRadius,\n        applyTo: [\n            \"borderTopLeftRadius\",\n            \"borderTopRightRadius\",\n            \"borderBottomLeftRadius\",\n            \"borderBottomRightRadius\",\n        ],\n    },\n    borderTopLeftRadius: correctBorderRadius,\n    borderTopRightRadius: correctBorderRadius,\n    borderBottomLeftRadius: correctBorderRadius,\n    borderBottomRightRadius: correctBorderRadius,\n    boxShadow: correctBoxShadow,\n};\n\nexport { MeasureLayout };\n"]},"metadata":{},"sourceType":"module"}