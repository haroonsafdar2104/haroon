{"ast":null,"code":"import _objectSpread from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/Web Data/Personal-Website/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\nvar transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\n\nvar animationTarget = 1000;\n\nfunction createProjectionNode(_ref) {\n  var attachResizeListener = _ref.attachResizeListener,\n      defaultParent = _ref.defaultParent,\n      measureScroll = _ref.measureScroll,\n      checkIsScrollRoot = _ref.checkIsScrollRoot,\n      _resetTransform = _ref.resetTransform;\n  return /*#__PURE__*/function () {\n    function ProjectionNode(id) {\n      var _this = this;\n\n      var latestValues = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n\n      _classCallCheck(this, ProjectionNode);\n\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n\n      this.isLayoutDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to actually\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n\n      this.eventHandlers = new Map(); // Note: Currently only running on root node\n\n      this.potentialNodes = new Map();\n\n      this.checkUpdateFailed = function () {\n        if (_this.isUpdating) {\n          _this.isUpdating = false;\n\n          _this.clearAllSnapshots();\n        }\n      };\n\n      this.updateProjection = function () {\n        _this.nodes.forEach(resolveTargetDelta);\n\n        _this.nodes.forEach(calcProjection);\n      };\n\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n\n      this.sharedNodes = new Map();\n      this.id = id;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? [].concat(_toConsumableArray(parent.path), [parent]) : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      id && this.root.registerPotentialNode(id, this);\n\n      for (var i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n\n    _createClass(ProjectionNode, [{\n      key: \"addEventListener\",\n      value: function addEventListener(name, handler) {\n        if (!this.eventHandlers.has(name)) {\n          this.eventHandlers.set(name, new SubscriptionManager());\n        }\n\n        return this.eventHandlers.get(name).add(handler);\n      }\n    }, {\n      key: \"notifyListeners\",\n      value: function notifyListeners(name) {\n        var subscriptionManager = this.eventHandlers.get(name);\n\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n\n        subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, args);\n      }\n    }, {\n      key: \"hasListeners\",\n      value: function hasListeners(name) {\n        return this.eventHandlers.has(name);\n      }\n    }, {\n      key: \"registerPotentialNode\",\n      value: function registerPotentialNode(id, node) {\n        this.potentialNodes.set(id, node);\n      }\n      /**\n       * Lifecycles\n       */\n\n    }, {\n      key: \"mount\",\n      value: function mount(instance) {\n        var _this2 = this;\n\n        var isLayoutDirty = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        var _a;\n\n        if (this.instance) return;\n        this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n        this.instance = instance;\n        var _this$options = this.options,\n            layoutId = _this$options.layoutId,\n            layout = _this$options.layout,\n            visualElement = _this$options.visualElement;\n\n        if (visualElement && !visualElement.getInstance()) {\n          visualElement.mount(instance);\n        }\n\n        this.root.nodes.add(this);\n        (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n        this.id && this.root.potentialNodes.delete(this.id);\n\n        if (isLayoutDirty && (layout || layoutId)) {\n          this.isLayoutDirty = true;\n        }\n\n        if (attachResizeListener) {\n          var unblockTimeout;\n\n          var resizeUnblockUpdate = function resizeUnblockUpdate() {\n            return _this2.root.updateBlockedByResize = false;\n          };\n\n          attachResizeListener(instance, function () {\n            _this2.root.updateBlockedByResize = true;\n            clearTimeout(unblockTimeout);\n            unblockTimeout = window.setTimeout(resizeUnblockUpdate, 250);\n\n            if (globalProjectionState.hasAnimatedSinceResize) {\n              globalProjectionState.hasAnimatedSinceResize = false;\n\n              _this2.nodes.forEach(finishAnimation);\n            }\n          });\n        }\n\n        if (layoutId) {\n          this.root.registerSharedNode(layoutId, this);\n        } // Only register the handler if it requires layout animation\n\n\n        if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n          this.addEventListener(\"didUpdate\", function (_ref2) {\n            var delta = _ref2.delta,\n                hasLayoutChanged = _ref2.hasLayoutChanged,\n                hasRelativeTargetChanged = _ref2.hasRelativeTargetChanged,\n                newLayout = _ref2.layout;\n\n            var _a, _b, _c, _d, _e;\n\n            if (_this2.isTreeAnimationBlocked()) {\n              _this2.target = undefined;\n              _this2.relativeTarget = undefined;\n              return;\n            } // TODO: Check here if an animation exists\n\n\n            var layoutTransition = (_b = (_a = _this2.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n\n            var _visualElement$getPro = visualElement.getProps(),\n                onLayoutAnimationStart = _visualElement$getPro.onLayoutAnimationStart,\n                onLayoutAnimationComplete = _visualElement$getPro.onLayoutAnimationComplete;\n            /**\n             * The target layout of the element might stay the same,\n             * but its position relative to its parent has changed.\n             */\n\n\n            var targetChanged = !_this2.targetLayout || !boxEquals(_this2.targetLayout, newLayout) || hasRelativeTargetChanged;\n            /**\n             * If the layout hasn't seemed to have changed, it might be that the\n             * element is visually in the same place in the document but its position\n             * relative to its parent has indeed changed. So here we check for that.\n             */\n\n            var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n\n            if (((_c = _this2.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this2.currentAnimation)) {\n              if (_this2.resumeFrom) {\n                _this2.resumingFrom = _this2.resumeFrom;\n                _this2.resumingFrom.resumingFrom = undefined;\n              }\n\n              _this2.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n\n              var animationOptions = _objectSpread(_objectSpread({}, getValueTransition(layoutTransition, \"layout\")), {}, {\n                onPlay: onLayoutAnimationStart,\n                onComplete: onLayoutAnimationComplete\n              });\n\n              if (visualElement.shouldReduceMotion) {\n                animationOptions.delay = 0;\n                animationOptions.type = false;\n              }\n\n              _this2.startAnimation(animationOptions);\n            } else {\n              /**\n               * If the layout hasn't changed and we have an animation that hasn't started yet,\n               * finish it immediately. Otherwise it will be animating from a location\n               * that was probably never commited to screen and look like a jumpy box.\n               */\n              if (!hasLayoutChanged && _this2.animationProgress === 0) {\n                _this2.finishAnimation();\n              }\n\n              _this2.isLead() && ((_e = (_d = _this2.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n            }\n\n            _this2.targetLayout = newLayout;\n          });\n        }\n      }\n    }, {\n      key: \"unmount\",\n      value: function unmount() {\n        var _a, _b;\n\n        this.options.layoutId && this.willUpdate();\n        this.root.nodes.remove(this);\n        (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n        (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n        this.instance = undefined;\n        cancelSync.preRender(this.updateProjection);\n      } // only on the root\n\n    }, {\n      key: \"blockUpdate\",\n      value: function blockUpdate() {\n        this.updateManuallyBlocked = true;\n      }\n    }, {\n      key: \"unblockUpdate\",\n      value: function unblockUpdate() {\n        this.updateManuallyBlocked = false;\n      }\n    }, {\n      key: \"isUpdateBlocked\",\n      value: function isUpdateBlocked() {\n        return this.updateManuallyBlocked || this.updateBlockedByResize;\n      }\n    }, {\n      key: \"isTreeAnimationBlocked\",\n      value: function isTreeAnimationBlocked() {\n        var _a;\n\n        return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n      } // Note: currently only running on root node\n\n    }, {\n      key: \"startUpdate\",\n      value: function startUpdate() {\n        var _a;\n\n        if (this.isUpdateBlocked()) return;\n        this.isUpdating = true;\n        (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n      }\n    }, {\n      key: \"willUpdate\",\n      value: function willUpdate() {\n        var shouldNotifyListeners = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        var _a, _b, _c;\n\n        if (this.root.isUpdateBlocked()) {\n          (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n          return;\n        }\n\n        !this.root.isUpdating && this.root.startUpdate();\n        if (this.isLayoutDirty) return;\n        this.isLayoutDirty = true;\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          node.shouldResetTransform = true;\n          /**\n           * TODO: Check we haven't updated the scroll\n           * since the last didUpdate\n           */\n\n          node.updateScroll();\n        }\n\n        var _this$options2 = this.options,\n            layoutId = _this$options2.layoutId,\n            layout = _this$options2.layout;\n        if (layoutId === undefined && !layout) return;\n        var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n        this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n        this.updateSnapshot();\n        shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n      } // Note: Currently only running on root node\n\n    }, {\n      key: \"didUpdate\",\n      value: function didUpdate() {\n        var updateWasBlocked = this.isUpdateBlocked(); // When doing an instant transition, we skip the layout update,\n        // but should still clean up the measurements so that the next\n        // snapshot could be taken correctly.\n\n        if (updateWasBlocked) {\n          this.unblockUpdate();\n          this.clearAllSnapshots();\n          this.nodes.forEach(clearMeasurements);\n          return;\n        }\n\n        if (!this.isUpdating) return;\n        this.isUpdating = false;\n        /**\n         * Search for and mount newly-added projection elements.\n         *\n         * TODO: Every time a new component is rendered we could search up the tree for\n         * the closest mounted node and query from there rather than document.\n         */\n\n        if (this.potentialNodes.size) {\n          this.potentialNodes.forEach(mountNodeEarly);\n          this.potentialNodes.clear();\n        }\n        /**\n         * Write\n         */\n\n\n        this.nodes.forEach(resetTransformStyle);\n        /**\n         * Read ==================\n         */\n        // Update layout measurements of updated children\n\n        this.nodes.forEach(updateLayout);\n        /**\n         * Write\n         */\n        // Notify listeners that the layout is updated\n\n        this.nodes.forEach(notifyLayoutUpdate);\n        this.clearAllSnapshots(); // Flush any scheduled updates\n\n        flushSync.update();\n        flushSync.preRender();\n        flushSync.render();\n      }\n    }, {\n      key: \"clearAllSnapshots\",\n      value: function clearAllSnapshots() {\n        this.nodes.forEach(clearSnapshot);\n        this.sharedNodes.forEach(removeLeadSnapshots);\n      }\n    }, {\n      key: \"scheduleUpdateProjection\",\n      value: function scheduleUpdateProjection() {\n        sync.preRender(this.updateProjection, false, true);\n      }\n    }, {\n      key: \"scheduleCheckAfterUnmount\",\n      value: function scheduleCheckAfterUnmount() {\n        var _this3 = this;\n\n        /**\n         * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n         * we manually call didUpdate to give a chance to the siblings to animate.\n         * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n         */\n        sync.postRender(function () {\n          if (_this3.isLayoutDirty) {\n            _this3.root.didUpdate();\n          } else {\n            _this3.root.checkUpdateFailed();\n          }\n        });\n      }\n      /**\n       * Update measurements\n       */\n\n    }, {\n      key: \"updateSnapshot\",\n      value: function updateSnapshot() {\n        if (this.snapshot || !this.instance) return;\n        var measured = this.measure();\n        var layout = this.removeTransform(this.removeElementScroll(measured));\n        roundBox(layout);\n        this.snapshot = {\n          measured: measured,\n          layout: layout,\n          latestValues: {}\n        };\n      }\n    }, {\n      key: \"updateLayout\",\n      value: function updateLayout() {\n        var _a;\n\n        if (!this.instance) return; // TODO: Incorporate into a forwarded scroll offset\n\n        this.updateScroll();\n\n        if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n          return;\n        }\n        /**\n         * When a node is mounted, it simply resumes from the prevLead's\n         * snapshot instead of taking a new one, but the ancestors scroll\n         * might have updated while the prevLead is unmounted. We need to\n         * update the scroll again to make sure the layout we measure is\n         * up to date.\n         */\n\n\n        if (this.resumeFrom && !this.resumeFrom.instance) {\n          for (var i = 0; i < this.path.length; i++) {\n            var node = this.path[i];\n            node.updateScroll();\n          }\n        }\n\n        var measured = this.measure();\n        roundBox(measured);\n        var prevLayout = this.layout;\n        this.layout = {\n          measured: measured,\n          actual: this.removeElementScroll(measured)\n        };\n        this.layoutCorrected = createBox();\n        this.isLayoutDirty = false;\n        this.projectionDelta = undefined;\n        this.notifyListeners(\"measure\", this.layout.actual);\n        (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n      }\n    }, {\n      key: \"updateScroll\",\n      value: function updateScroll() {\n        if (this.options.layoutScroll && this.instance) {\n          this.isScrollRoot = checkIsScrollRoot(this.instance);\n          this.scroll = measureScroll(this.instance);\n        }\n      }\n    }, {\n      key: \"resetTransform\",\n      value: function resetTransform() {\n        var _a;\n\n        if (!_resetTransform) return;\n        var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n        var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n        var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n        var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n        var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n\n        if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n          _resetTransform(this.instance, transformTemplateValue);\n\n          this.shouldResetTransform = false;\n          this.scheduleRender();\n        }\n      }\n    }, {\n      key: \"measure\",\n      value: function measure() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return createBox();\n        var box = visualElement.measureViewportBox(); // Remove viewport scroll to give page-relative coordinates\n\n        var scroll = this.root.scroll;\n\n        if (scroll) {\n          translateAxis(box.x, scroll.x);\n          translateAxis(box.y, scroll.y);\n        }\n\n        return box;\n      }\n    }, {\n      key: \"removeElementScroll\",\n      value: function removeElementScroll(box) {\n        var boxWithoutScroll = createBox();\n        copyBoxInto(boxWithoutScroll, box);\n        /**\n         * Performance TODO: Keep a cumulative scroll offset down the tree\n         * rather than loop back up the path.\n         */\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          var scroll = node.scroll,\n              options = node.options,\n              isScrollRoot = node.isScrollRoot;\n\n          if (node !== this.root && scroll && options.layoutScroll) {\n            /**\n             * If this is a new scroll root, we want to remove all previous scrolls\n             * from the viewport box.\n             */\n            if (isScrollRoot) {\n              copyBoxInto(boxWithoutScroll, box);\n              var rootScroll = this.root.scroll;\n              /**\n               * Undo the application of page scroll that was originally added\n               * to the measured bounding box.\n               */\n\n              if (rootScroll) {\n                translateAxis(boxWithoutScroll.x, -rootScroll.x);\n                translateAxis(boxWithoutScroll.y, -rootScroll.y);\n              }\n            }\n\n            translateAxis(boxWithoutScroll.x, scroll.x);\n            translateAxis(boxWithoutScroll.y, scroll.y);\n          }\n        }\n\n        return boxWithoutScroll;\n      }\n    }, {\n      key: \"applyTransform\",\n      value: function applyTransform(box) {\n        var transformOnly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        var withTransforms = createBox();\n        copyBoxInto(withTransforms, box);\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n\n          if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n            transformBox(withTransforms, {\n              x: -node.scroll.x,\n              y: -node.scroll.y\n            });\n          }\n\n          if (!hasTransform(node.latestValues)) continue;\n          transformBox(withTransforms, node.latestValues);\n        }\n\n        if (hasTransform(this.latestValues)) {\n          transformBox(withTransforms, this.latestValues);\n        }\n\n        return withTransforms;\n      }\n    }, {\n      key: \"removeTransform\",\n      value: function removeTransform(box) {\n        var _a;\n\n        var boxWithoutTransform = createBox();\n        copyBoxInto(boxWithoutTransform, box);\n\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          if (!node.instance) continue;\n          if (!hasTransform(node.latestValues)) continue;\n          hasScale(node.latestValues) && node.updateSnapshot();\n          var sourceBox = createBox();\n          var nodeBox = node.measure();\n          copyBoxInto(sourceBox, nodeBox);\n          removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n        }\n\n        if (hasTransform(this.latestValues)) {\n          removeBoxTransforms(boxWithoutTransform, this.latestValues);\n        }\n\n        return boxWithoutTransform;\n      }\n      /**\n       *\n       */\n\n    }, {\n      key: \"setTargetDelta\",\n      value: function setTargetDelta(delta) {\n        this.targetDelta = delta;\n        this.root.scheduleUpdateProjection();\n      }\n    }, {\n      key: \"setOptions\",\n      value: function setOptions(options) {\n        this.options = _objectSpread(_objectSpread(_objectSpread({}, this.options), options), {}, {\n          crossfade: options.crossfade !== undefined ? options.crossfade : true\n        });\n      }\n    }, {\n      key: \"clearMeasurements\",\n      value: function clearMeasurements() {\n        this.scroll = undefined;\n        this.layout = undefined;\n        this.snapshot = undefined;\n        this.prevTransformTemplateValue = undefined;\n        this.targetDelta = undefined;\n        this.target = undefined;\n        this.isLayoutDirty = false;\n      }\n      /**\n       * Frame calculations\n       */\n\n    }, {\n      key: \"resolveTargetDelta\",\n      value: function resolveTargetDelta() {\n        var _a;\n\n        var _this$options3 = this.options,\n            layout = _this$options3.layout,\n            layoutId = _this$options3.layoutId;\n        /**\n         * If we have no layout, we can't perform projection, so early return\n         */\n\n        if (!this.layout || !(layout || layoutId)) return;\n        /**\n         * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n         * a relativeParent. This will allow a component to perform scale correction\n         * even if no animation has started.\n         */\n        // TODO If this is unsuccessful this currently happens every frame\n\n        if (!this.targetDelta && !this.relativeTarget) {\n          // TODO: This is a semi-repetition of further down this function, make DRY\n          this.relativeParent = this.getClosestProjectingParent();\n\n          if (this.relativeParent && this.relativeParent.layout) {\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          }\n        }\n        /**\n         * If we have no relative target or no target delta our target isn't valid\n         * for this frame.\n         */\n\n\n        if (!this.relativeTarget && !this.targetDelta) return;\n        /**\n         * Lazy-init target data structure\n         */\n\n        if (!this.target) {\n          this.target = createBox();\n          this.targetWithTransforms = createBox();\n        }\n        /**\n         * If we've got a relative box for this component, resolve it into a target relative to the parent.\n         */\n\n\n        if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n          calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n          /**\n           * If we've only got a targetDelta, resolve it into a target\n           */\n        } else if (this.targetDelta) {\n          if (Boolean(this.resumingFrom)) {\n            // TODO: This is creating a new object every frame\n            this.target = this.applyTransform(this.layout.actual);\n          } else {\n            copyBoxInto(this.target, this.layout.actual);\n          }\n\n          applyBoxDelta(this.target, this.targetDelta);\n        } else {\n          /**\n           * If no target, use own layout as target\n           */\n          copyBoxInto(this.target, this.layout.actual);\n        }\n        /**\n         * If we've been told to attempt to resolve a relative target, do so.\n         */\n\n\n        if (this.attemptToResolveRelativeTarget) {\n          this.attemptToResolveRelativeTarget = false;\n          this.relativeParent = this.getClosestProjectingParent();\n\n          if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {\n            this.relativeTarget = createBox();\n            this.relativeTargetOrigin = createBox();\n            calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n            copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n          }\n        }\n      }\n    }, {\n      key: \"getClosestProjectingParent\",\n      value: function getClosestProjectingParent() {\n        if (!this.parent || hasTransform(this.parent.latestValues)) return undefined;\n\n        if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {\n          return this.parent;\n        } else {\n          return this.parent.getClosestProjectingParent();\n        }\n      }\n    }, {\n      key: \"calcProjection\",\n      value: function calcProjection() {\n        var _a;\n\n        var _this$options4 = this.options,\n            layout = _this$options4.layout,\n            layoutId = _this$options4.layoutId;\n        /**\n         * If this section of the tree isn't animating we can\n         * delete our target sources for the following frame.\n         */\n\n        this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n\n        if (!this.isTreeAnimating) {\n          this.targetDelta = this.relativeTarget = undefined;\n        }\n\n        if (!this.layout || !(layout || layoutId)) return;\n        var lead = this.getLead();\n        /**\n         * Reset the corrected box with the latest values from box, as we're then going\n         * to perform mutative operations on it.\n         */\n\n        copyBoxInto(this.layoutCorrected, this.layout.actual);\n        /**\n         * Apply all the parent deltas to this box to produce the corrected box. This\n         * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n         */\n\n        applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n        var target = lead.target;\n        if (!target) return;\n\n        if (!this.projectionDelta) {\n          this.projectionDelta = createDelta();\n          this.projectionDeltaWithTransform = createDelta();\n        }\n\n        var prevTreeScaleX = this.treeScale.x;\n        var prevTreeScaleY = this.treeScale.y;\n        var prevProjectionTransform = this.projectionTransform;\n        /**\n         * Update the delta between the corrected box and the target box before user-set transforms were applied.\n         * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n         * for our layout reprojection, but still allow them to be scaled correctly by the user.\n         * It might be that to simplify this we may want to accept that user-set scale is also corrected\n         * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n         * to allow people to choose whether these styles are corrected based on just the\n         * layout reprojection or the final bounding box.\n         */\n\n        calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n        this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n\n        if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n          this.hasProjected = true;\n          this.scheduleRender();\n          this.notifyListeners(\"projectionUpdate\", target);\n        }\n      }\n    }, {\n      key: \"hide\",\n      value: function hide() {\n        this.isVisible = false; // TODO: Schedule render\n      }\n    }, {\n      key: \"show\",\n      value: function show() {\n        this.isVisible = true; // TODO: Schedule render\n      }\n    }, {\n      key: \"scheduleRender\",\n      value: function scheduleRender() {\n        var notifyAll = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        var _a, _b, _c;\n\n        (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n        notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n\n        if (this.resumingFrom && !this.resumingFrom.instance) {\n          this.resumingFrom = undefined;\n        }\n      }\n    }, {\n      key: \"setAnimationOrigin\",\n      value: function setAnimationOrigin(delta) {\n        var _this4 = this;\n\n        var hasOnlyRelativeTargetChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n        var _a;\n\n        var snapshot = this.snapshot;\n        var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n\n        var mixedValues = _objectSpread({}, this.latestValues);\n\n        var targetDelta = createDelta();\n        this.relativeTarget = this.relativeTargetOrigin = undefined;\n        this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n        var relativeLayout = createBox();\n        var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n        var isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n        var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n        this.animationProgress = 0;\n\n        this.mixTargetDelta = function (latest) {\n          var _a;\n\n          var progress = latest / 1000;\n          mixAxisDelta(targetDelta.x, delta.x, progress);\n          mixAxisDelta(targetDelta.y, delta.y, progress);\n\n          _this4.setTargetDelta(targetDelta);\n\n          if (_this4.relativeTarget && _this4.relativeTargetOrigin && _this4.layout && ((_a = _this4.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n            calcRelativePosition(relativeLayout, _this4.layout.actual, _this4.relativeParent.layout.actual);\n            mixBox(_this4.relativeTarget, _this4.relativeTargetOrigin, relativeLayout, progress);\n          }\n\n          if (isSharedLayoutAnimation) {\n            _this4.animationValues = mixedValues;\n            mixValues(mixedValues, snapshotLatestValues, _this4.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n          }\n\n          _this4.root.scheduleUpdateProjection();\n\n          _this4.scheduleRender();\n\n          _this4.animationProgress = progress;\n        };\n\n        this.mixTargetDelta(0);\n      }\n    }, {\n      key: \"startAnimation\",\n      value: function startAnimation(options) {\n        var _this5 = this;\n\n        var _a, _b;\n\n        this.notifyListeners(\"animationStart\");\n        (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n\n        if (this.resumingFrom) {\n          (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n        }\n\n        if (this.pendingAnimation) {\n          cancelSync.update(this.pendingAnimation);\n          this.pendingAnimation = undefined;\n        }\n        /**\n         * Start the animation in the next frame to have a frame with progress 0,\n         * where the target is the same as when the animation started, so we can\n         * calculate the relative positions correctly for instant transitions.\n         */\n\n\n        this.pendingAnimation = sync.update(function () {\n          globalProjectionState.hasAnimatedSinceResize = true;\n          _this5.currentAnimation = animate(0, animationTarget, _objectSpread(_objectSpread({}, options), {}, {\n            onUpdate: function onUpdate(latest) {\n              var _a;\n\n              _this5.mixTargetDelta(latest);\n\n              (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n            },\n            onComplete: function onComplete() {\n              var _a;\n\n              (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n\n              _this5.completeAnimation();\n            }\n          }));\n\n          if (_this5.resumingFrom) {\n            _this5.resumingFrom.currentAnimation = _this5.currentAnimation;\n          }\n\n          _this5.pendingAnimation = undefined;\n        });\n      }\n    }, {\n      key: \"completeAnimation\",\n      value: function completeAnimation() {\n        var _a;\n\n        if (this.resumingFrom) {\n          this.resumingFrom.currentAnimation = undefined;\n          this.resumingFrom.preserveOpacity = undefined;\n        }\n\n        (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n        this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n        this.notifyListeners(\"animationComplete\");\n      }\n    }, {\n      key: \"finishAnimation\",\n      value: function finishAnimation() {\n        var _a;\n\n        if (this.currentAnimation) {\n          (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n          this.currentAnimation.stop();\n        }\n\n        this.completeAnimation();\n      }\n    }, {\n      key: \"applyTransformsToTarget\",\n      value: function applyTransformsToTarget() {\n        var _this$getLead = this.getLead(),\n            targetWithTransforms = _this$getLead.targetWithTransforms,\n            target = _this$getLead.target,\n            layout = _this$getLead.layout,\n            latestValues = _this$getLead.latestValues;\n\n        if (!targetWithTransforms || !target || !layout) return;\n        copyBoxInto(targetWithTransforms, target);\n        /**\n         * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n         * This is the final box that we will then project into by calculating a transform delta and\n         * applying it to the corrected box.\n         */\n\n        transformBox(targetWithTransforms, latestValues);\n        /**\n         * Update the delta between the corrected box and the final target box, after\n         * user-set transforms are applied to it. This will be used by the renderer to\n         * create a transform style that will reproject the element from its actual layout\n         * into the desired bounding box.\n         */\n\n        calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n      }\n    }, {\n      key: \"registerSharedNode\",\n      value: function registerSharedNode(layoutId, node) {\n        var _a, _b, _c;\n\n        if (!this.sharedNodes.has(layoutId)) {\n          this.sharedNodes.set(layoutId, new NodeStack());\n        }\n\n        var stack = this.sharedNodes.get(layoutId);\n        stack.add(node);\n        node.promote({\n          transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n          preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n        });\n      }\n    }, {\n      key: \"isLead\",\n      value: function isLead() {\n        var stack = this.getStack();\n        return stack ? stack.lead === this : true;\n      }\n    }, {\n      key: \"getLead\",\n      value: function getLead() {\n        var _a;\n\n        var layoutId = this.options.layoutId;\n        return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n      }\n    }, {\n      key: \"getPrevLead\",\n      value: function getPrevLead() {\n        var _a;\n\n        var layoutId = this.options.layoutId;\n        return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n      }\n    }, {\n      key: \"getStack\",\n      value: function getStack() {\n        var layoutId = this.options.layoutId;\n        if (layoutId) return this.root.sharedNodes.get(layoutId);\n      }\n    }, {\n      key: \"promote\",\n      value: function promote() {\n        var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n            needsReset = _ref3.needsReset,\n            transition = _ref3.transition,\n            preserveFollowOpacity = _ref3.preserveFollowOpacity;\n\n        var stack = this.getStack();\n        if (stack) stack.promote(this, preserveFollowOpacity);\n\n        if (needsReset) {\n          this.projectionDelta = undefined;\n          this.needsReset = true;\n        }\n\n        if (transition) this.setOptions({\n          transition: transition\n        });\n      }\n    }, {\n      key: \"relegate\",\n      value: function relegate() {\n        var stack = this.getStack();\n\n        if (stack) {\n          return stack.relegate(this);\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"resetRotation\",\n      value: function resetRotation() {\n        var visualElement = this.options.visualElement;\n        if (!visualElement) return; // If there's no detected rotation values, we can early return without a forced render.\n\n        var hasRotate = false; // Keep a record of all the values we've reset\n\n        var resetValues = {}; // Check the rotate value of all axes and reset to 0\n\n        for (var i = 0; i < transformAxes.length; i++) {\n          var axis = transformAxes[i];\n          var key = \"rotate\" + axis; // If this rotation doesn't exist as a motion value, then we don't\n          // need to reset it\n\n          if (!visualElement.getStaticValue(key)) {\n            continue;\n          }\n\n          hasRotate = true; // Record the rotation and then temporarily set it to 0\n\n          resetValues[key] = visualElement.getStaticValue(key);\n          visualElement.setStaticValue(key, 0);\n        } // If there's no rotation values, we don't need to do any more.\n\n\n        if (!hasRotate) return; // Force a render of this element to apply the transform with all rotations\n        // set to 0.\n\n        visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender(); // Put back all the values we reset\n\n        for (var _key2 in resetValues) {\n          visualElement.setStaticValue(_key2, resetValues[_key2]);\n        } // Schedule a render for the next frame. This ensures we won't visually\n        // see the element with the reset rotate value applied.\n\n\n        visualElement.scheduleRender();\n      }\n    }, {\n      key: \"getProjectionStyles\",\n      value: function getProjectionStyles() {\n        var styleProp = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        var _a, _b, _c; // TODO: Return lifecycle-persistent object\n\n\n        var styles = {};\n        if (!this.instance || this.isSVG) return styles;\n\n        if (!this.isVisible) {\n          return {\n            visibility: \"hidden\"\n          };\n        } else {\n          styles.visibility = \"\";\n        }\n\n        var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n\n        if (this.needsReset) {\n          this.needsReset = false;\n          styles.opacity = \"\";\n          styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n          return styles;\n        }\n\n        var lead = this.getLead();\n\n        if (!this.projectionDelta || !this.layout || !lead.target) {\n          var emptyStyles = {};\n\n          if (this.options.layoutId) {\n            emptyStyles.opacity = this.latestValues.opacity !== undefined ? this.latestValues.opacity : 1;\n            emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n          }\n\n          if (this.hasProjected && !hasTransform(this.latestValues)) {\n            emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n            this.hasProjected = false;\n          }\n\n          return emptyStyles;\n        }\n\n        var valuesToRender = lead.animationValues || lead.latestValues;\n        this.applyTransformsToTarget();\n        styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n\n        if (transformTemplate) {\n          styles.transform = transformTemplate(valuesToRender, styles.transform);\n        }\n\n        var _this$projectionDelta = this.projectionDelta,\n            x = _this$projectionDelta.x,\n            y = _this$projectionDelta.y;\n        styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n\n        if (lead.animationValues) {\n          /**\n           * If the lead component is animating, assign this either the entering/leaving\n           * opacity\n           */\n          styles.opacity = lead === this ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n        } else {\n          /**\n           * Or we're not animating at all, set the lead component to its actual\n           * opacity and other components to hidden.\n           */\n          styles.opacity = lead === this ? valuesToRender.opacity !== undefined ? valuesToRender.opacity : \"\" : valuesToRender.opacityExit !== undefined ? valuesToRender.opacityExit : 0;\n        }\n        /**\n         * Apply scale correction\n         */\n\n\n        for (var key in scaleCorrectors) {\n          if (valuesToRender[key] === undefined) continue;\n          var _scaleCorrectors$key = scaleCorrectors[key],\n              correct = _scaleCorrectors$key.correct,\n              applyTo = _scaleCorrectors$key.applyTo;\n          var corrected = correct(valuesToRender[key], lead);\n\n          if (applyTo) {\n            var num = applyTo.length;\n\n            for (var i = 0; i < num; i++) {\n              styles[applyTo[i]] = corrected;\n            }\n          } else {\n            styles[key] = corrected;\n          }\n        }\n        /**\n         * Disable pointer events on follow components. This is to ensure\n         * that if a follow component covers a lead component it doesn't block\n         * pointer events on the lead.\n         */\n\n\n        if (this.options.layoutId) {\n          styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n        }\n\n        return styles;\n      }\n    }, {\n      key: \"clearSnapshot\",\n      value: function clearSnapshot() {\n        this.resumeFrom = this.snapshot = undefined;\n      } // Only run on root\n\n    }, {\n      key: \"resetTree\",\n      value: function resetTree() {\n        this.root.nodes.forEach(function (node) {\n          var _a;\n\n          return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n        });\n        this.root.nodes.forEach(clearMeasurements);\n        this.root.sharedNodes.clear();\n      }\n    }]);\n\n    return ProjectionNode;\n  }();\n}\n\nfunction updateLayout(node) {\n  node.updateLayout();\n}\n\nfunction notifyLayoutUpdate(node) {\n  var _a, _b, _c;\n\n  var snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    var _node$layout = node.layout,\n        layout = _node$layout.actual,\n        measuredLayout = _node$layout.measured; // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n\n    if (node.options.animationType === \"size\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        var length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (node.options.animationType === \"position\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        var length = calcLength(layout[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n\n    var layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout, snapshot.layout);\n    var visualDelta = createDelta();\n\n    if (snapshot.isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n    } else {\n      calcBoxDelta(visualDelta, layout, snapshot.layout);\n    }\n\n    var hasLayoutChanged = !isDeltaZero(layoutDelta);\n    var hasRelativeTargetChanged = false;\n\n    if (!node.resumeFrom) {\n      node.relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n\n      if (node.relativeParent && !node.relativeParent.resumeFrom) {\n        var _node$relativeParent = node.relativeParent,\n            parentSnapshot = _node$relativeParent.snapshot,\n            parentLayout = _node$relativeParent.layout;\n\n        if (parentSnapshot && parentLayout) {\n          var relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n          var relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout, parentLayout.actual);\n\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n        }\n      }\n    }\n\n    node.notifyListeners(\"didUpdate\", {\n      layout: layout,\n      snapshot: snapshot,\n      delta: visualDelta,\n      layoutDelta: layoutDelta,\n      hasLayoutChanged: hasLayoutChanged,\n      hasRelativeTargetChanged: hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n\n\n  node.options.transition = undefined;\n}\n\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\n\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\n\nfunction resetTransformStyle(node) {\n  var visualElement = node.options.visualElement;\n\n  if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notifyBeforeLayoutMeasure();\n  }\n\n  node.resetTransform();\n}\n\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\n\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\n\nfunction calcProjection(node) {\n  node.calcProjection();\n}\n\nfunction resetRotation(node) {\n  node.resetRotation();\n}\n\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\n\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\n\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\n\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\n\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\n\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\n\nfunction mountNodeEarly(node, id) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  var searchNode = node.root;\n\n  for (var i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n\n  var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(id, \"\\\"]\"));\n  if (element) node.mount(element, true);\n}\n\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\n\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };","map":{"version":3,"sources":["D:/Web Data/Personal-Website/client/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"names":["sync","cancelSync","flushSync","mix","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","FlatTree","resolveMotionValue","globalProjectionState","transformAxes","animationTarget","createProjectionNode","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","id","latestValues","parent","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","length","name","handler","has","set","get","add","subscriptionManager","args","notify","node","instance","_a","SVGElement","tagName","layoutId","layout","visualElement","getInstance","mount","delete","unblockTimeout","resizeUnblockUpdate","clearTimeout","window","setTimeout","hasAnimatedSinceResize","finishAnimation","registerSharedNode","addEventListener","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","_b","_c","_d","_e","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","getProps","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","delay","type","startAnimation","isLead","onExitComplete","call","willUpdate","remove","getStack","preRender","isUpdateBlocked","resetRotation","shouldNotifyListeners","startUpdate","updateScroll","transformTemplate","prevTransformTemplateValue","updateSnapshot","notifyListeners","updateWasBlocked","unblockUpdate","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","postRender","didUpdate","snapshot","measured","measure","removeTransform","removeElementScroll","roundBox","alwaysMeasureLayout","prevLayout","actual","layoutCorrected","projectionDelta","notifyLayoutMeasure","layoutScroll","isScrollRoot","scroll","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","box","measureViewportBox","boxWithoutScroll","rootScroll","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","targetDelta","scheduleUpdateProjection","crossfade","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","Boolean","applyTransform","attemptToResolveRelativeTarget","pendingAnimation","lead","getLead","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isShared","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","setTargetDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","stack","promote","initialPromotionConfig","preserveFollowOpacity","shouldPreserveFollowOpacity","prevLead","setOptions","relegate","hasRotate","resetValues","axis","key","getStaticValue","setStaticValue","syncRender","styleProp","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","applyTransformsToTarget","transformOrigin","origin","opacityExit","correct","applyTo","corrected","num","hasListeners","measuredLayout","animationType","axisSnapshot","min","max","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","notifyBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"mappings":"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","sourcesContent":["import sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\n\nconst transformAxes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nconst animationTarget = 1000;\nfunction createProjectionNode({ attachResizeListener, defaultParent, measureScroll, checkIsScrollRoot, resetTransform, }) {\n    return class ProjectionNode {\n        constructor(id, latestValues = {}, parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent()) {\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to actually\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = () => {\n                if (this.isUpdating) {\n                    this.isUpdating = false;\n                    this.clearAllSnapshots();\n                }\n            };\n            this.updateProjection = () => {\n                this.nodes.forEach(resolveTargetDelta);\n                this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.id = id;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? [...parent.path, parent] : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            id && this.root.registerPotentialNode(id, this);\n            for (let i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        addEventListener(name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        }\n        notifyListeners(name, ...args) {\n            const subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify(...args);\n        }\n        hasListeners(name) {\n            return this.eventHandlers.has(name);\n        }\n        registerPotentialNode(id, node) {\n            this.potentialNodes.set(id, node);\n        }\n        /**\n         * Lifecycles\n         */\n        mount(instance, isLayoutDirty = false) {\n            var _a;\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            const { layoutId, layout, visualElement } = this.options;\n            if (visualElement && !visualElement.getInstance()) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.id && this.root.potentialNodes.delete(this.id);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                let unblockTimeout;\n                const resizeUnblockUpdate = () => (this.root.updateBlockedByResize = false);\n                attachResizeListener(instance, () => {\n                    this.root.updateBlockedByResize = true;\n                    clearTimeout(unblockTimeout);\n                    unblockTimeout = window.setTimeout(resizeUnblockUpdate, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", ({ delta, hasLayoutChanged, hasRelativeTargetChanged, layout: newLayout, }) => {\n                    var _a, _b, _c, _d, _e;\n                    if (this.isTreeAnimationBlocked()) {\n                        this.target = undefined;\n                        this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    const layoutTransition = (_b = (_a = this.options.transition) !== null && _a !== void 0 ? _a : visualElement.getDefaultTransition()) !== null && _b !== void 0 ? _b : defaultLayoutTransition;\n                    const { onLayoutAnimationStart, onLayoutAnimationComplete, } = visualElement.getProps();\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    const targetChanged = !this.targetLayout ||\n                        !boxEquals(this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    const hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_c = this.resumeFrom) === null || _c === void 0 ? void 0 : _c.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !this.currentAnimation))) {\n                        if (this.resumeFrom) {\n                            this.resumingFrom = this.resumeFrom;\n                            this.resumingFrom.resumingFrom = undefined;\n                        }\n                        this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        const animationOptions = {\n                            ...getValueTransition(layoutTransition, \"layout\"),\n                            onPlay: onLayoutAnimationStart,\n                            onComplete: onLayoutAnimationComplete,\n                        };\n                        if (visualElement.shouldReduceMotion) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            this.animationProgress === 0) {\n                            this.finishAnimation();\n                        }\n                        this.isLead() && ((_e = (_d = this.options).onExitComplete) === null || _e === void 0 ? void 0 : _e.call(_d));\n                    }\n                    this.targetLayout = newLayout;\n                });\n            }\n        }\n        unmount() {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        }\n        // only on the root\n        blockUpdate() {\n            this.updateManuallyBlocked = true;\n        }\n        unblockUpdate() {\n            this.updateManuallyBlocked = false;\n        }\n        isUpdateBlocked() {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        }\n        isTreeAnimationBlocked() {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        }\n        // Note: currently only running on root node\n        startUpdate() {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n        }\n        willUpdate(shouldNotifyListeners = true) {\n            var _a, _b, _c;\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                node.shouldResetTransform = true;\n                /**\n                 * TODO: Check we haven't updated the scroll\n                 * since the last didUpdate\n                 */\n                node.updateScroll();\n            }\n            const { layoutId, layout } = this.options;\n            if (layoutId === undefined && !layout)\n                return;\n            const transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        }\n        // Note: Currently only running on root node\n        didUpdate() {\n            const updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        }\n        clearAllSnapshots() {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        }\n        scheduleUpdateProjection() {\n            sync.preRender(this.updateProjection, false, true);\n        }\n        scheduleCheckAfterUnmount() {\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(() => {\n                if (this.isLayoutDirty) {\n                    this.root.didUpdate();\n                }\n                else {\n                    this.root.checkUpdateFailed();\n                }\n            });\n        }\n        /**\n         * Update measurements\n         */\n        updateSnapshot() {\n            if (this.snapshot || !this.instance)\n                return;\n            const measured = this.measure();\n            const layout = this.removeTransform(this.removeElementScroll(measured));\n            roundBox(layout);\n            this.snapshot = {\n                measured,\n                layout,\n                latestValues: {},\n            };\n        }\n        updateLayout() {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (let i = 0; i < this.path.length; i++) {\n                    const node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            const measured = this.measure();\n            roundBox(measured);\n            const prevLayout = this.layout;\n            this.layout = {\n                measured,\n                actual: this.removeElementScroll(measured),\n            };\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.actual);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n        }\n        updateScroll() {\n            if (this.options.layoutScroll && this.instance) {\n                this.isScrollRoot = checkIsScrollRoot(this.instance);\n                this.scroll = measureScroll(this.instance);\n            }\n        }\n        resetTransform() {\n            var _a;\n            if (!resetTransform)\n                return;\n            const isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            const hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            const transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            const transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        }\n        measure() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return createBox();\n            const box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            const { scroll } = this.root;\n            if (scroll) {\n                translateAxis(box.x, scroll.x);\n                translateAxis(box.y, scroll.y);\n            }\n            return box;\n        }\n        removeElementScroll(box) {\n            const boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                const { scroll, options, isScrollRoot } = node;\n                if (node !== this.root && scroll && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (isScrollRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        const { scroll: rootScroll } = this.root;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll.x);\n                    translateAxis(boxWithoutScroll.y, scroll.y);\n                }\n            }\n            return boxWithoutScroll;\n        }\n        applyTransform(box, transformOnly = false) {\n            const withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.x,\n                        y: -node.scroll.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        }\n        removeTransform(box) {\n            var _a;\n            const boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (let i = 0; i < this.path.length; i++) {\n                const node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                const sourceBox = createBox();\n                const nodeBox = node.measure();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        }\n        /**\n         *\n         */\n        setTargetDelta(delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n        }\n        setOptions(options) {\n            this.options = {\n                ...this.options,\n                ...options,\n                crossfade: options.crossfade !== undefined ? options.crossfade : true,\n            };\n        }\n        clearMeasurements() {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        }\n        /**\n         * Frame calculations\n         */\n        resolveTargetDelta() {\n            var _a;\n            const { layout, layoutId } = this.options;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent && this.relativeParent.layout) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.actual);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.actual);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.actual);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent &&\n                    Boolean(this.relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !this.relativeParent.options.layoutScroll &&\n                    this.relativeParent.target) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n        }\n        getClosestProjectingParent() {\n            if (!this.parent || hasTransform(this.parent.latestValues))\n                return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        }\n        calcProjection() {\n            var _a;\n            const { layout, layoutId } = this.options;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            const lead = this.getLead();\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.actual);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n            const { target } = lead;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            const prevTreeScaleX = this.treeScale.x;\n            const prevTreeScaleY = this.treeScale.y;\n            const prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        }\n        hide() {\n            this.isVisible = false;\n            // TODO: Schedule render\n        }\n        show() {\n            this.isVisible = true;\n            // TODO: Schedule render\n        }\n        scheduleRender(notifyAll = true) {\n            var _a, _b, _c;\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        }\n        setAnimationOrigin(delta, hasOnlyRelativeTargetChanged = false) {\n            var _a;\n            const snapshot = this.snapshot;\n            const snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            const mixedValues = { ...this.latestValues };\n            const targetDelta = createDelta();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            const relativeLayout = createBox();\n            const isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n            const isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n            const shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = (latest) => {\n                var _a;\n                const progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                this.setTargetDelta(targetDelta);\n                if (this.relativeTarget &&\n                    this.relativeTargetOrigin &&\n                    this.layout &&\n                    ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, this.layout.actual, this.relativeParent.layout.actual);\n                    mixBox(this.relativeTarget, this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                this.root.scheduleUpdateProjection();\n                this.scheduleRender();\n                this.animationProgress = progress;\n            };\n            this.mixTargetDelta(0);\n        }\n        startAnimation(options) {\n            var _a, _b;\n            this.notifyListeners(\"animationStart\");\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(() => {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                this.currentAnimation = animate(0, animationTarget, {\n                    ...options,\n                    onUpdate: (latest) => {\n                        var _a;\n                        this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    },\n                    onComplete: () => {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        this.completeAnimation();\n                    },\n                });\n                if (this.resumingFrom) {\n                    this.resumingFrom.currentAnimation = this.currentAnimation;\n                }\n                this.pendingAnimation = undefined;\n            });\n        }\n        completeAnimation() {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        }\n        finishAnimation() {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        }\n        applyTransformsToTarget() {\n            const { targetWithTransforms, target, layout, latestValues } = this.getLead();\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its actual layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        }\n        registerSharedNode(layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            const stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        }\n        isLead() {\n            const stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        }\n        getLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        }\n        getPrevLead() {\n            var _a;\n            const { layoutId } = this.options;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        }\n        getStack() {\n            const { layoutId } = this.options;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        }\n        promote({ needsReset, transition, preserveFollowOpacity, } = {}) {\n            const stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition });\n        }\n        relegate() {\n            const stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        }\n        resetRotation() {\n            const { visualElement } = this.options;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            let hasRotate = false;\n            // Keep a record of all the values we've reset\n            const resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (let i = 0; i < transformAxes.length; i++) {\n                const axis = transformAxes[i];\n                const key = \"rotate\" + axis;\n                // If this rotation doesn't exist as a motion value, then we don't\n                // need to reset it\n                if (!visualElement.getStaticValue(key)) {\n                    continue;\n                }\n                hasRotate = true;\n                // Record the rotation and then temporarily set it to 0\n                resetValues[key] = visualElement.getStaticValue(key);\n                visualElement.setStaticValue(key, 0);\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\n            // Put back all the values we reset\n            for (const key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        }\n        getProjectionStyles(styleProp = {}) {\n            var _a, _b, _c;\n            // TODO: Return lifecycle-persistent object\n            const styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            const transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            const lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                const emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity =\n                        this.latestValues.opacity !== undefined\n                            ? this.latestValues.opacity\n                            : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            const valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            const { x, y } = this.projectionDelta;\n            styles.transformOrigin = `${x.origin * 100}% ${y.origin * 100}% 0`;\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_c = (_b = valuesToRender.opacity) !== null && _b !== void 0 ? _b : this.latestValues.opacity) !== null && _c !== void 0 ? _c : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its actual\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? valuesToRender.opacity !== undefined\n                            ? valuesToRender.opacity\n                            : \"\"\n                        : valuesToRender.opacityExit !== undefined\n                            ? valuesToRender.opacityExit\n                            : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (const key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                const { correct, applyTo } = scaleCorrectors[key];\n                const corrected = correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    const num = applyTo.length;\n                    for (let i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        }\n        clearSnapshot() {\n            this.resumeFrom = this.snapshot = undefined;\n        }\n        // Only run on root\n        resetTree() {\n            this.root.nodes.forEach((node) => { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        }\n    };\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c;\n    const snapshot = ((_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) || node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        const { actual: layout, measured: measuredLayout } = node.layout;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (node.options.animationType === \"size\") {\n            eachAxis((axis) => {\n                const axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                const length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (node.options.animationType === \"position\") {\n            eachAxis((axis) => {\n                const axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                const length = calcLength(layout[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        const layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout, snapshot.layout);\n        const visualDelta = createDelta();\n        if (snapshot.isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout, snapshot.layout);\n        }\n        const hasLayoutChanged = !isDeltaZero(layoutDelta);\n        let hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            node.relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (node.relativeParent && !node.relativeParent.resumeFrom) {\n                const { snapshot: parentSnapshot, layout: parentLayout } = node.relativeParent;\n                if (parentSnapshot && parentLayout) {\n                    const relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n                    const relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout, parentLayout.actual);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout,\n            snapshot,\n            delta: visualDelta,\n            layoutDelta,\n            hasLayoutChanged,\n            hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_c = (_b = node.options).onExitComplete) === null || _c === void 0 ? void 0 : _c.call(_b);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    const { visualElement } = node.options;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notifyBeforeLayoutMeasure();\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nconst defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, id) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    let searchNode = node.root;\n    for (let i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    const searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    const element = searchElement.querySelector(`[data-projection-id=\"${id}\"]`);\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };\n"]},"metadata":{},"sourceType":"module"}