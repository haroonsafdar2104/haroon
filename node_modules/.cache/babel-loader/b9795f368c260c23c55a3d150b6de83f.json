{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { AsyncAction } from './AsyncAction';\nimport { animationFrameProvider } from './animationFrameProvider';\n\nvar AnimationFrameAction = function (_super) {\n  __extends(AnimationFrameAction, _super);\n\n  function AnimationFrameAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n\n  AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay !== null && delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    }\n\n    scheduler.actions.push(this);\n    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function () {\n      return scheduler.flush(undefined);\n    }));\n  };\n\n  AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay != null && delay > 0 || delay == null && this.delay > 0) {\n      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n    }\n\n    if (!scheduler.actions.some(function (action) {\n      return action.id === id;\n    })) {\n      animationFrameProvider.cancelAnimationFrame(id);\n      scheduler._scheduled = undefined;\n    }\n\n    return undefined;\n  };\n\n  return AnimationFrameAction;\n}(AsyncAction);\n\nexport { AnimationFrameAction };","map":{"version":3,"mappings":";AAAA,SAASA,WAAT,QAA4B,eAA5B;AAGA,SAASC,sBAAT,QAAuC,0BAAvC;;AAEA;AAA6CC;;AAC3C,gCAAsBC,SAAtB,EAAoEC,IAApE,EAAuH;AAAvH,gBACEC,kBAAMF,SAAN,EAAiBC,IAAjB,KAAsB,IADxB;;AAAsBE;AAA8CA;;AAEnE;;AAESC,kDAAV,UAAyBJ,SAAzB,EAA6DK,EAA7D,EAAuEC,KAAvE,EAAwF;AAAjB;AAAAA;AAAiB;;AAEtF,QAAIA,KAAK,KAAK,IAAV,IAAkBA,KAAK,GAAG,CAA9B,EAAiC;AAC/B,aAAOJ,iBAAMK,cAAN,CAAoBC,IAApB,CAAoB,IAApB,EAAqBR,SAArB,EAAgCK,EAAhC,EAAoCC,KAApC,CAAP;AACD;;AAEDN,aAAS,CAACS,OAAV,CAAkBC,IAAlB,CAAuB,IAAvB;AAIA,WAAOV,SAAS,CAACW,UAAV,KAAyBX,SAAS,CAACW,UAAV,GAAuBb,sBAAsB,CAACc,qBAAvB,CAA6C;AAAM,sBAAS,CAACC,KAAV,CAAgBC,SAAhB;AAA0B,KAA7E,CAAhD,CAAP;AACD,GAXS;;AAYAV,kDAAV,UAAyBJ,SAAzB,EAA6DK,EAA7D,EAAuEC,KAAvE,EAAwF;AAAjB;AAAAA;AAAiB;;AAItF,QAAKA,KAAK,IAAI,IAAT,IAAiBA,KAAK,GAAG,CAA1B,IAAiCA,KAAK,IAAI,IAAT,IAAiB,KAAKA,KAAL,GAAa,CAAnE,EAAuE;AACrE,aAAOJ,iBAAMa,cAAN,CAAoBP,IAApB,CAAoB,IAApB,EAAqBR,SAArB,EAAgCK,EAAhC,EAAoCC,KAApC,CAAP;AACD;;AAID,QAAI,CAACN,SAAS,CAACS,OAAV,CAAkBO,IAAlB,CAAuB,UAACC,MAAD,EAAO;AAAK,mBAAM,CAACZ,EAAP,KAAcA,EAAd;AAAgB,KAAnD,CAAL,EAA2D;AACzDP,4BAAsB,CAACoB,oBAAvB,CAA4Cb,EAA5C;AACAL,eAAS,CAACW,UAAV,GAAuBG,SAAvB;AACD;;AAED,WAAOA,SAAP;AACD,GAhBS;;AAiBZ;AAlCA,EAA6CjB,WAA7C","names":["AsyncAction","animationFrameProvider","__extends","scheduler","work","_super","_this","AnimationFrameAction","id","delay","requestAsyncId","call","actions","push","_scheduled","requestAnimationFrame","flush","undefined","recycleAsyncId","some","action","cancelAnimationFrame"],"sources":["C:\\Users\\Admin\\Downloads\\portpoliopro-main\\client\\node_modules\\rxjs\\src\\internal\\scheduler\\AnimationFrameAction.ts"],"sourcesContent":["import { AsyncAction } from './AsyncAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nimport { SchedulerAction } from '../types';\nimport { animationFrameProvider } from './animationFrameProvider';\n\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n  constructor(protected scheduler: AnimationFrameScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue has no remaining actions with the same async id,\n    // cancel the requested animation frame and set the scheduled flag to\n    // undefined so the next AnimationFrameAction will request its own.\n    if (!scheduler.actions.some((action) => action.id === id)) {\n      animationFrameProvider.cancelAnimationFrame(id);\n      scheduler._scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}